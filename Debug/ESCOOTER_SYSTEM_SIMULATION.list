
ESCOOTER_SYSTEM_SIMULATION.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000040a8  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000005c  08004248  08004248  00014248  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080042a4  080042a4  00020078  2**0
                  CONTENTS
  4 .ARM          00000008  080042a4  080042a4  000142a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080042ac  080042ac  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080042ac  080042ac  000142ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080042b0  080042b0  000142b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  080042b4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000011c  20000078  0800432c  00020078  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000194  0800432c  00020194  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d7f8  00000000  00000000  000200a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001bc4  00000000  00000000  0002d8a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c50  00000000  00000000  0002f468  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000ba8  00000000  00000000  000300b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00015958  00000000  00000000  00030c60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000daeb  00000000  00000000  000465b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008b4cb  00000000  00000000  000540a3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000df56e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000037b0  00000000  00000000  000df5c0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000078 	.word	0x20000078
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08004230 	.word	0x08004230

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000007c 	.word	0x2000007c
 80001dc:	08004230 	.word	0x08004230

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b974 	b.w	8000580 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	468e      	mov	lr, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	d14d      	bne.n	800035a <__udivmoddi4+0xaa>
 80002be:	428a      	cmp	r2, r1
 80002c0:	4694      	mov	ip, r2
 80002c2:	d969      	bls.n	8000398 <__udivmoddi4+0xe8>
 80002c4:	fab2 f282 	clz	r2, r2
 80002c8:	b152      	cbz	r2, 80002e0 <__udivmoddi4+0x30>
 80002ca:	fa01 f302 	lsl.w	r3, r1, r2
 80002ce:	f1c2 0120 	rsb	r1, r2, #32
 80002d2:	fa20 f101 	lsr.w	r1, r0, r1
 80002d6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002da:	ea41 0e03 	orr.w	lr, r1, r3
 80002de:	4094      	lsls	r4, r2
 80002e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002e4:	0c21      	lsrs	r1, r4, #16
 80002e6:	fbbe f6f8 	udiv	r6, lr, r8
 80002ea:	fa1f f78c 	uxth.w	r7, ip
 80002ee:	fb08 e316 	mls	r3, r8, r6, lr
 80002f2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002f6:	fb06 f107 	mul.w	r1, r6, r7
 80002fa:	4299      	cmp	r1, r3
 80002fc:	d90a      	bls.n	8000314 <__udivmoddi4+0x64>
 80002fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000302:	f106 30ff 	add.w	r0, r6, #4294967295
 8000306:	f080 811f 	bcs.w	8000548 <__udivmoddi4+0x298>
 800030a:	4299      	cmp	r1, r3
 800030c:	f240 811c 	bls.w	8000548 <__udivmoddi4+0x298>
 8000310:	3e02      	subs	r6, #2
 8000312:	4463      	add	r3, ip
 8000314:	1a5b      	subs	r3, r3, r1
 8000316:	b2a4      	uxth	r4, r4
 8000318:	fbb3 f0f8 	udiv	r0, r3, r8
 800031c:	fb08 3310 	mls	r3, r8, r0, r3
 8000320:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000324:	fb00 f707 	mul.w	r7, r0, r7
 8000328:	42a7      	cmp	r7, r4
 800032a:	d90a      	bls.n	8000342 <__udivmoddi4+0x92>
 800032c:	eb1c 0404 	adds.w	r4, ip, r4
 8000330:	f100 33ff 	add.w	r3, r0, #4294967295
 8000334:	f080 810a 	bcs.w	800054c <__udivmoddi4+0x29c>
 8000338:	42a7      	cmp	r7, r4
 800033a:	f240 8107 	bls.w	800054c <__udivmoddi4+0x29c>
 800033e:	4464      	add	r4, ip
 8000340:	3802      	subs	r0, #2
 8000342:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000346:	1be4      	subs	r4, r4, r7
 8000348:	2600      	movs	r6, #0
 800034a:	b11d      	cbz	r5, 8000354 <__udivmoddi4+0xa4>
 800034c:	40d4      	lsrs	r4, r2
 800034e:	2300      	movs	r3, #0
 8000350:	e9c5 4300 	strd	r4, r3, [r5]
 8000354:	4631      	mov	r1, r6
 8000356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035a:	428b      	cmp	r3, r1
 800035c:	d909      	bls.n	8000372 <__udivmoddi4+0xc2>
 800035e:	2d00      	cmp	r5, #0
 8000360:	f000 80ef 	beq.w	8000542 <__udivmoddi4+0x292>
 8000364:	2600      	movs	r6, #0
 8000366:	e9c5 0100 	strd	r0, r1, [r5]
 800036a:	4630      	mov	r0, r6
 800036c:	4631      	mov	r1, r6
 800036e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000372:	fab3 f683 	clz	r6, r3
 8000376:	2e00      	cmp	r6, #0
 8000378:	d14a      	bne.n	8000410 <__udivmoddi4+0x160>
 800037a:	428b      	cmp	r3, r1
 800037c:	d302      	bcc.n	8000384 <__udivmoddi4+0xd4>
 800037e:	4282      	cmp	r2, r0
 8000380:	f200 80f9 	bhi.w	8000576 <__udivmoddi4+0x2c6>
 8000384:	1a84      	subs	r4, r0, r2
 8000386:	eb61 0303 	sbc.w	r3, r1, r3
 800038a:	2001      	movs	r0, #1
 800038c:	469e      	mov	lr, r3
 800038e:	2d00      	cmp	r5, #0
 8000390:	d0e0      	beq.n	8000354 <__udivmoddi4+0xa4>
 8000392:	e9c5 4e00 	strd	r4, lr, [r5]
 8000396:	e7dd      	b.n	8000354 <__udivmoddi4+0xa4>
 8000398:	b902      	cbnz	r2, 800039c <__udivmoddi4+0xec>
 800039a:	deff      	udf	#255	; 0xff
 800039c:	fab2 f282 	clz	r2, r2
 80003a0:	2a00      	cmp	r2, #0
 80003a2:	f040 8092 	bne.w	80004ca <__udivmoddi4+0x21a>
 80003a6:	eba1 010c 	sub.w	r1, r1, ip
 80003aa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003ae:	fa1f fe8c 	uxth.w	lr, ip
 80003b2:	2601      	movs	r6, #1
 80003b4:	0c20      	lsrs	r0, r4, #16
 80003b6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ba:	fb07 1113 	mls	r1, r7, r3, r1
 80003be:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003c2:	fb0e f003 	mul.w	r0, lr, r3
 80003c6:	4288      	cmp	r0, r1
 80003c8:	d908      	bls.n	80003dc <__udivmoddi4+0x12c>
 80003ca:	eb1c 0101 	adds.w	r1, ip, r1
 80003ce:	f103 38ff 	add.w	r8, r3, #4294967295
 80003d2:	d202      	bcs.n	80003da <__udivmoddi4+0x12a>
 80003d4:	4288      	cmp	r0, r1
 80003d6:	f200 80cb 	bhi.w	8000570 <__udivmoddi4+0x2c0>
 80003da:	4643      	mov	r3, r8
 80003dc:	1a09      	subs	r1, r1, r0
 80003de:	b2a4      	uxth	r4, r4
 80003e0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003e4:	fb07 1110 	mls	r1, r7, r0, r1
 80003e8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003ec:	fb0e fe00 	mul.w	lr, lr, r0
 80003f0:	45a6      	cmp	lr, r4
 80003f2:	d908      	bls.n	8000406 <__udivmoddi4+0x156>
 80003f4:	eb1c 0404 	adds.w	r4, ip, r4
 80003f8:	f100 31ff 	add.w	r1, r0, #4294967295
 80003fc:	d202      	bcs.n	8000404 <__udivmoddi4+0x154>
 80003fe:	45a6      	cmp	lr, r4
 8000400:	f200 80bb 	bhi.w	800057a <__udivmoddi4+0x2ca>
 8000404:	4608      	mov	r0, r1
 8000406:	eba4 040e 	sub.w	r4, r4, lr
 800040a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800040e:	e79c      	b.n	800034a <__udivmoddi4+0x9a>
 8000410:	f1c6 0720 	rsb	r7, r6, #32
 8000414:	40b3      	lsls	r3, r6
 8000416:	fa22 fc07 	lsr.w	ip, r2, r7
 800041a:	ea4c 0c03 	orr.w	ip, ip, r3
 800041e:	fa20 f407 	lsr.w	r4, r0, r7
 8000422:	fa01 f306 	lsl.w	r3, r1, r6
 8000426:	431c      	orrs	r4, r3
 8000428:	40f9      	lsrs	r1, r7
 800042a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800042e:	fa00 f306 	lsl.w	r3, r0, r6
 8000432:	fbb1 f8f9 	udiv	r8, r1, r9
 8000436:	0c20      	lsrs	r0, r4, #16
 8000438:	fa1f fe8c 	uxth.w	lr, ip
 800043c:	fb09 1118 	mls	r1, r9, r8, r1
 8000440:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000444:	fb08 f00e 	mul.w	r0, r8, lr
 8000448:	4288      	cmp	r0, r1
 800044a:	fa02 f206 	lsl.w	r2, r2, r6
 800044e:	d90b      	bls.n	8000468 <__udivmoddi4+0x1b8>
 8000450:	eb1c 0101 	adds.w	r1, ip, r1
 8000454:	f108 3aff 	add.w	sl, r8, #4294967295
 8000458:	f080 8088 	bcs.w	800056c <__udivmoddi4+0x2bc>
 800045c:	4288      	cmp	r0, r1
 800045e:	f240 8085 	bls.w	800056c <__udivmoddi4+0x2bc>
 8000462:	f1a8 0802 	sub.w	r8, r8, #2
 8000466:	4461      	add	r1, ip
 8000468:	1a09      	subs	r1, r1, r0
 800046a:	b2a4      	uxth	r4, r4
 800046c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000470:	fb09 1110 	mls	r1, r9, r0, r1
 8000474:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000478:	fb00 fe0e 	mul.w	lr, r0, lr
 800047c:	458e      	cmp	lr, r1
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x1e2>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f100 34ff 	add.w	r4, r0, #4294967295
 8000488:	d26c      	bcs.n	8000564 <__udivmoddi4+0x2b4>
 800048a:	458e      	cmp	lr, r1
 800048c:	d96a      	bls.n	8000564 <__udivmoddi4+0x2b4>
 800048e:	3802      	subs	r0, #2
 8000490:	4461      	add	r1, ip
 8000492:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000496:	fba0 9402 	umull	r9, r4, r0, r2
 800049a:	eba1 010e 	sub.w	r1, r1, lr
 800049e:	42a1      	cmp	r1, r4
 80004a0:	46c8      	mov	r8, r9
 80004a2:	46a6      	mov	lr, r4
 80004a4:	d356      	bcc.n	8000554 <__udivmoddi4+0x2a4>
 80004a6:	d053      	beq.n	8000550 <__udivmoddi4+0x2a0>
 80004a8:	b15d      	cbz	r5, 80004c2 <__udivmoddi4+0x212>
 80004aa:	ebb3 0208 	subs.w	r2, r3, r8
 80004ae:	eb61 010e 	sbc.w	r1, r1, lr
 80004b2:	fa01 f707 	lsl.w	r7, r1, r7
 80004b6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ba:	40f1      	lsrs	r1, r6
 80004bc:	431f      	orrs	r7, r3
 80004be:	e9c5 7100 	strd	r7, r1, [r5]
 80004c2:	2600      	movs	r6, #0
 80004c4:	4631      	mov	r1, r6
 80004c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ca:	f1c2 0320 	rsb	r3, r2, #32
 80004ce:	40d8      	lsrs	r0, r3
 80004d0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004d4:	fa21 f303 	lsr.w	r3, r1, r3
 80004d8:	4091      	lsls	r1, r2
 80004da:	4301      	orrs	r1, r0
 80004dc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004e0:	fa1f fe8c 	uxth.w	lr, ip
 80004e4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004e8:	fb07 3610 	mls	r6, r7, r0, r3
 80004ec:	0c0b      	lsrs	r3, r1, #16
 80004ee:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004f2:	fb00 f60e 	mul.w	r6, r0, lr
 80004f6:	429e      	cmp	r6, r3
 80004f8:	fa04 f402 	lsl.w	r4, r4, r2
 80004fc:	d908      	bls.n	8000510 <__udivmoddi4+0x260>
 80004fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000502:	f100 38ff 	add.w	r8, r0, #4294967295
 8000506:	d22f      	bcs.n	8000568 <__udivmoddi4+0x2b8>
 8000508:	429e      	cmp	r6, r3
 800050a:	d92d      	bls.n	8000568 <__udivmoddi4+0x2b8>
 800050c:	3802      	subs	r0, #2
 800050e:	4463      	add	r3, ip
 8000510:	1b9b      	subs	r3, r3, r6
 8000512:	b289      	uxth	r1, r1
 8000514:	fbb3 f6f7 	udiv	r6, r3, r7
 8000518:	fb07 3316 	mls	r3, r7, r6, r3
 800051c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000520:	fb06 f30e 	mul.w	r3, r6, lr
 8000524:	428b      	cmp	r3, r1
 8000526:	d908      	bls.n	800053a <__udivmoddi4+0x28a>
 8000528:	eb1c 0101 	adds.w	r1, ip, r1
 800052c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000530:	d216      	bcs.n	8000560 <__udivmoddi4+0x2b0>
 8000532:	428b      	cmp	r3, r1
 8000534:	d914      	bls.n	8000560 <__udivmoddi4+0x2b0>
 8000536:	3e02      	subs	r6, #2
 8000538:	4461      	add	r1, ip
 800053a:	1ac9      	subs	r1, r1, r3
 800053c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000540:	e738      	b.n	80003b4 <__udivmoddi4+0x104>
 8000542:	462e      	mov	r6, r5
 8000544:	4628      	mov	r0, r5
 8000546:	e705      	b.n	8000354 <__udivmoddi4+0xa4>
 8000548:	4606      	mov	r6, r0
 800054a:	e6e3      	b.n	8000314 <__udivmoddi4+0x64>
 800054c:	4618      	mov	r0, r3
 800054e:	e6f8      	b.n	8000342 <__udivmoddi4+0x92>
 8000550:	454b      	cmp	r3, r9
 8000552:	d2a9      	bcs.n	80004a8 <__udivmoddi4+0x1f8>
 8000554:	ebb9 0802 	subs.w	r8, r9, r2
 8000558:	eb64 0e0c 	sbc.w	lr, r4, ip
 800055c:	3801      	subs	r0, #1
 800055e:	e7a3      	b.n	80004a8 <__udivmoddi4+0x1f8>
 8000560:	4646      	mov	r6, r8
 8000562:	e7ea      	b.n	800053a <__udivmoddi4+0x28a>
 8000564:	4620      	mov	r0, r4
 8000566:	e794      	b.n	8000492 <__udivmoddi4+0x1e2>
 8000568:	4640      	mov	r0, r8
 800056a:	e7d1      	b.n	8000510 <__udivmoddi4+0x260>
 800056c:	46d0      	mov	r8, sl
 800056e:	e77b      	b.n	8000468 <__udivmoddi4+0x1b8>
 8000570:	3b02      	subs	r3, #2
 8000572:	4461      	add	r1, ip
 8000574:	e732      	b.n	80003dc <__udivmoddi4+0x12c>
 8000576:	4630      	mov	r0, r6
 8000578:	e709      	b.n	800038e <__udivmoddi4+0xde>
 800057a:	4464      	add	r4, ip
 800057c:	3802      	subs	r0, #2
 800057e:	e742      	b.n	8000406 <__udivmoddi4+0x156>

08000580 <__aeabi_idiv0>:
 8000580:	4770      	bx	lr
 8000582:	bf00      	nop

08000584 <motor_running>:
uint8_t timer3 = 0;
uint8_t buffer[3];

uint8_t spinning = 0;
void motor_running()
{
 8000584:	b580      	push	{r7, lr}
 8000586:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000588:	2200      	movs	r2, #0
 800058a:	2120      	movs	r1, #32
 800058c:	4803      	ldr	r0, [pc, #12]	; (800059c <motor_running+0x18>)
 800058e:	f001 f83f 	bl	8001610 <HAL_GPIO_WritePin>
    spinning = 1;
 8000592:	4b03      	ldr	r3, [pc, #12]	; (80005a0 <motor_running+0x1c>)
 8000594:	2201      	movs	r2, #1
 8000596:	701a      	strb	r2, [r3, #0]
}
 8000598:	bf00      	nop
 800059a:	bd80      	pop	{r7, pc}
 800059c:	40020000 	.word	0x40020000
 80005a0:	20000177 	.word	0x20000177

080005a4 <motor_stop>:

uint8_t stop = 1;
void motor_stop()
{
 80005a4:	b580      	push	{r7, lr}
 80005a6:	af00      	add	r7, sp, #0
	 rpm = 0;
 80005a8:	4b0a      	ldr	r3, [pc, #40]	; (80005d4 <motor_stop+0x30>)
 80005aa:	2200      	movs	r2, #0
 80005ac:	601a      	str	r2, [r3, #0]
     throttle = 0;
 80005ae:	4b0a      	ldr	r3, [pc, #40]	; (80005d8 <motor_stop+0x34>)
 80005b0:	2200      	movs	r2, #0
 80005b2:	701a      	strb	r2, [r3, #0]
     accelerate = 0;
 80005b4:	4b09      	ldr	r3, [pc, #36]	; (80005dc <motor_stop+0x38>)
 80005b6:	2200      	movs	r2, #0
 80005b8:	701a      	strb	r2, [r3, #0]
     decelerate = 0;
 80005ba:	4b09      	ldr	r3, [pc, #36]	; (80005e0 <motor_stop+0x3c>)
 80005bc:	2200      	movs	r2, #0
 80005be:	701a      	strb	r2, [r3, #0]
     motor_move = 0;
 80005c0:	4b08      	ldr	r3, [pc, #32]	; (80005e4 <motor_stop+0x40>)
 80005c2:	2200      	movs	r2, #0
 80005c4:	701a      	strb	r2, [r3, #0]
	 HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);
 80005c6:	2201      	movs	r2, #1
 80005c8:	2120      	movs	r1, #32
 80005ca:	4807      	ldr	r0, [pc, #28]	; (80005e8 <motor_stop+0x44>)
 80005cc:	f001 f820 	bl	8001610 <HAL_GPIO_WritePin>
}
 80005d0:	bf00      	nop
 80005d2:	bd80      	pop	{r7, pc}
 80005d4:	20000000 	.word	0x20000000
 80005d8:	20000168 	.word	0x20000168
 80005dc:	20000169 	.word	0x20000169
 80005e0:	2000016a 	.word	0x2000016a
 80005e4:	2000016b 	.word	0x2000016b
 80005e8:	40020000 	.word	0x40020000

080005ec <Motor_State_Machine>:

void Motor_State_Machine()
{
 80005ec:	b580      	push	{r7, lr}
 80005ee:	af00      	add	r7, sp, #0
   /*  When the speed reaches at 70 RPM, users can do the followings :
    *  1. Activate the throttle to set up the specific torque/speed ramp
    *  2. If the user has set up the throttle, the motor starts spinning !
    *  3. In the meantime, the user can also decelerate the motor speed
    */
   if( (rpm >= 70) && (rpm < 700) )
 80005f0:	4b32      	ldr	r3, [pc, #200]	; (80006bc <Motor_State_Machine+0xd0>)
 80005f2:	681b      	ldr	r3, [r3, #0]
 80005f4:	2b45      	cmp	r3, #69	; 0x45
 80005f6:	dd17      	ble.n	8000628 <Motor_State_Machine+0x3c>
 80005f8:	4b30      	ldr	r3, [pc, #192]	; (80006bc <Motor_State_Machine+0xd0>)
 80005fa:	681b      	ldr	r3, [r3, #0]
 80005fc:	f5b3 7f2f 	cmp.w	r3, #700	; 0x2bc
 8000600:	da12      	bge.n	8000628 <Motor_State_Machine+0x3c>
   {
	   if(throttle == 0)
 8000602:	4b2f      	ldr	r3, [pc, #188]	; (80006c0 <Motor_State_Machine+0xd4>)
 8000604:	781b      	ldrb	r3, [r3, #0]
 8000606:	2b00      	cmp	r3, #0
 8000608:	d10e      	bne.n	8000628 <Motor_State_Machine+0x3c>
	   {
		   /*
		    *  User can set the Torque/Speed Ramp for spinning the motor
		    */
		   throttle = 1;
 800060a:	4b2d      	ldr	r3, [pc, #180]	; (80006c0 <Motor_State_Machine+0xd4>)
 800060c:	2201      	movs	r2, #1
 800060e:	701a      	strb	r2, [r3, #0]
		   accelerate = 1;
 8000610:	4b2c      	ldr	r3, [pc, #176]	; (80006c4 <Motor_State_Machine+0xd8>)
 8000612:	2201      	movs	r2, #1
 8000614:	701a      	strb	r2, [r3, #0]
		   decelerate = 1;
 8000616:	4b2c      	ldr	r3, [pc, #176]	; (80006c8 <Motor_State_Machine+0xdc>)
 8000618:	2201      	movs	r2, #1
 800061a:	701a      	strb	r2, [r3, #0]
		   motor_move = 1;
 800061c:	4b2b      	ldr	r3, [pc, #172]	; (80006cc <Motor_State_Machine+0xe0>)
 800061e:	2201      	movs	r2, #1
 8000620:	701a      	strb	r2, [r3, #0]
		   stop = 0;
 8000622:	4b2b      	ldr	r3, [pc, #172]	; (80006d0 <Motor_State_Machine+0xe4>)
 8000624:	2200      	movs	r2, #0
 8000626:	701a      	strb	r2, [r3, #0]
	   }
   }

   if (rpm >= 700)
 8000628:	4b24      	ldr	r3, [pc, #144]	; (80006bc <Motor_State_Machine+0xd0>)
 800062a:	681b      	ldr	r3, [r3, #0]
 800062c:	f5b3 7f2f 	cmp.w	r3, #700	; 0x2bc
 8000630:	db02      	blt.n	8000638 <Motor_State_Machine+0x4c>
   {
         accelerate = 0;
 8000632:	4b24      	ldr	r3, [pc, #144]	; (80006c4 <Motor_State_Machine+0xd8>)
 8000634:	2200      	movs	r2, #0
 8000636:	701a      	strb	r2, [r3, #0]
   }


   if(throttle == 1 && motor_move == 1 && stop == 0)
 8000638:	4b21      	ldr	r3, [pc, #132]	; (80006c0 <Motor_State_Machine+0xd4>)
 800063a:	781b      	ldrb	r3, [r3, #0]
 800063c:	2b01      	cmp	r3, #1
 800063e:	d109      	bne.n	8000654 <Motor_State_Machine+0x68>
 8000640:	4b22      	ldr	r3, [pc, #136]	; (80006cc <Motor_State_Machine+0xe0>)
 8000642:	781b      	ldrb	r3, [r3, #0]
 8000644:	2b01      	cmp	r3, #1
 8000646:	d105      	bne.n	8000654 <Motor_State_Machine+0x68>
 8000648:	4b21      	ldr	r3, [pc, #132]	; (80006d0 <Motor_State_Machine+0xe4>)
 800064a:	781b      	ldrb	r3, [r3, #0]
 800064c:	2b00      	cmp	r3, #0
 800064e:	d101      	bne.n	8000654 <Motor_State_Machine+0x68>
   {
	   //Motor runs
	   motor_running();
 8000650:	f7ff ff98 	bl	8000584 <motor_running>
   }

   if(accelerate == 0 && rpm < 700 && rpm>0 && throttle == 1)
 8000654:	4b1b      	ldr	r3, [pc, #108]	; (80006c4 <Motor_State_Machine+0xd8>)
 8000656:	781b      	ldrb	r3, [r3, #0]
 8000658:	2b00      	cmp	r3, #0
 800065a:	d10f      	bne.n	800067c <Motor_State_Machine+0x90>
 800065c:	4b17      	ldr	r3, [pc, #92]	; (80006bc <Motor_State_Machine+0xd0>)
 800065e:	681b      	ldr	r3, [r3, #0]
 8000660:	f5b3 7f2f 	cmp.w	r3, #700	; 0x2bc
 8000664:	da0a      	bge.n	800067c <Motor_State_Machine+0x90>
 8000666:	4b15      	ldr	r3, [pc, #84]	; (80006bc <Motor_State_Machine+0xd0>)
 8000668:	681b      	ldr	r3, [r3, #0]
 800066a:	2b00      	cmp	r3, #0
 800066c:	dd06      	ble.n	800067c <Motor_State_Machine+0x90>
 800066e:	4b14      	ldr	r3, [pc, #80]	; (80006c0 <Motor_State_Machine+0xd4>)
 8000670:	781b      	ldrb	r3, [r3, #0]
 8000672:	2b01      	cmp	r3, #1
 8000674:	d102      	bne.n	800067c <Motor_State_Machine+0x90>
   {
  	  accelerate = 1;
 8000676:	4b13      	ldr	r3, [pc, #76]	; (80006c4 <Motor_State_Machine+0xd8>)
 8000678:	2201      	movs	r2, #1
 800067a:	701a      	strb	r2, [r3, #0]
   }

   if(stop == 1)
 800067c:	4b14      	ldr	r3, [pc, #80]	; (80006d0 <Motor_State_Machine+0xe4>)
 800067e:	781b      	ldrb	r3, [r3, #0]
 8000680:	2b01      	cmp	r3, #1
 8000682:	d101      	bne.n	8000688 <Motor_State_Machine+0x9c>
   {
      motor_stop();
 8000684:	f7ff ff8e 	bl	80005a4 <motor_stop>
   }

   if(accelerate == 0 && decelerate == 0 && throttle == 0 && motor_move == 0 && stop == 1)
 8000688:	4b0e      	ldr	r3, [pc, #56]	; (80006c4 <Motor_State_Machine+0xd8>)
 800068a:	781b      	ldrb	r3, [r3, #0]
 800068c:	2b00      	cmp	r3, #0
 800068e:	d112      	bne.n	80006b6 <Motor_State_Machine+0xca>
 8000690:	4b0d      	ldr	r3, [pc, #52]	; (80006c8 <Motor_State_Machine+0xdc>)
 8000692:	781b      	ldrb	r3, [r3, #0]
 8000694:	2b00      	cmp	r3, #0
 8000696:	d10e      	bne.n	80006b6 <Motor_State_Machine+0xca>
 8000698:	4b09      	ldr	r3, [pc, #36]	; (80006c0 <Motor_State_Machine+0xd4>)
 800069a:	781b      	ldrb	r3, [r3, #0]
 800069c:	2b00      	cmp	r3, #0
 800069e:	d10a      	bne.n	80006b6 <Motor_State_Machine+0xca>
 80006a0:	4b0a      	ldr	r3, [pc, #40]	; (80006cc <Motor_State_Machine+0xe0>)
 80006a2:	781b      	ldrb	r3, [r3, #0]
 80006a4:	2b00      	cmp	r3, #0
 80006a6:	d106      	bne.n	80006b6 <Motor_State_Machine+0xca>
 80006a8:	4b09      	ldr	r3, [pc, #36]	; (80006d0 <Motor_State_Machine+0xe4>)
 80006aa:	781b      	ldrb	r3, [r3, #0]
 80006ac:	2b01      	cmp	r3, #1
 80006ae:	d102      	bne.n	80006b6 <Motor_State_Machine+0xca>
   {
     rpm = 0;
 80006b0:	4b02      	ldr	r3, [pc, #8]	; (80006bc <Motor_State_Machine+0xd0>)
 80006b2:	2200      	movs	r2, #0
 80006b4:	601a      	str	r2, [r3, #0]
   }

}
 80006b6:	bf00      	nop
 80006b8:	bd80      	pop	{r7, pc}
 80006ba:	bf00      	nop
 80006bc:	20000000 	.word	0x20000000
 80006c0:	20000168 	.word	0x20000168
 80006c4:	20000169 	.word	0x20000169
 80006c8:	2000016a 	.word	0x2000016a
 80006cc:	2000016b 	.word	0x2000016b
 80006d0:	20000004 	.word	0x20000004

080006d4 <HAL_TIM_PeriodElapsedCallback>:

//It's much more better for user to input the torque elastically through uart1
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80006d4:	b580      	push	{r7, lr}
 80006d6:	b082      	sub	sp, #8
 80006d8:	af00      	add	r7, sp, #0
 80006da:	6078      	str	r0, [r7, #4]
	if(htim == &htim2)
 80006dc:	687b      	ldr	r3, [r7, #4]
 80006de:	4a1c      	ldr	r2, [pc, #112]	; (8000750 <HAL_TIM_PeriodElapsedCallback+0x7c>)
 80006e0:	4293      	cmp	r3, r2
 80006e2:	d126      	bne.n	8000732 <HAL_TIM_PeriodElapsedCallback+0x5e>
	{
		voltage = 36;
 80006e4:	4b1b      	ldr	r3, [pc, #108]	; (8000754 <HAL_TIM_PeriodElapsedCallback+0x80>)
 80006e6:	2224      	movs	r2, #36	; 0x24
 80006e8:	601a      	str	r2, [r3, #0]
 		//Speed
 		HAL_UART_Transmit(&huart2, (unsigned char*)"Speed: ",sizeof("Speed: "),HAL_MAX_DELAY);
 80006ea:	f04f 33ff 	mov.w	r3, #4294967295
 80006ee:	2208      	movs	r2, #8
 80006f0:	4919      	ldr	r1, [pc, #100]	; (8000758 <HAL_TIM_PeriodElapsedCallback+0x84>)
 80006f2:	481a      	ldr	r0, [pc, #104]	; (800075c <HAL_TIM_PeriodElapsedCallback+0x88>)
 80006f4:	f002 f8d1 	bl	800289a <HAL_UART_Transmit>
 		HAL_UART_Transmit(&huart2, (uint8_t*) buffer,sprintf(buffer, "%d", rpm),HAL_MAX_DELAY);
 80006f8:	4b19      	ldr	r3, [pc, #100]	; (8000760 <HAL_TIM_PeriodElapsedCallback+0x8c>)
 80006fa:	681b      	ldr	r3, [r3, #0]
 80006fc:	461a      	mov	r2, r3
 80006fe:	4919      	ldr	r1, [pc, #100]	; (8000764 <HAL_TIM_PeriodElapsedCallback+0x90>)
 8000700:	4819      	ldr	r0, [pc, #100]	; (8000768 <HAL_TIM_PeriodElapsedCallback+0x94>)
 8000702:	f003 f927 	bl	8003954 <siprintf>
 8000706:	4603      	mov	r3, r0
 8000708:	b29a      	uxth	r2, r3
 800070a:	f04f 33ff 	mov.w	r3, #4294967295
 800070e:	4916      	ldr	r1, [pc, #88]	; (8000768 <HAL_TIM_PeriodElapsedCallback+0x94>)
 8000710:	4812      	ldr	r0, [pc, #72]	; (800075c <HAL_TIM_PeriodElapsedCallback+0x88>)
 8000712:	f002 f8c2 	bl	800289a <HAL_UART_Transmit>
 		HAL_UART_Transmit(&huart2, (unsigned char*)"\r",sizeof("\r"),HAL_MAX_DELAY);
 8000716:	f04f 33ff 	mov.w	r3, #4294967295
 800071a:	2202      	movs	r2, #2
 800071c:	4913      	ldr	r1, [pc, #76]	; (800076c <HAL_TIM_PeriodElapsedCallback+0x98>)
 800071e:	480f      	ldr	r0, [pc, #60]	; (800075c <HAL_TIM_PeriodElapsedCallback+0x88>)
 8000720:	f002 f8bb 	bl	800289a <HAL_UART_Transmit>
        timer2++;
 8000724:	4b12      	ldr	r3, [pc, #72]	; (8000770 <HAL_TIM_PeriodElapsedCallback+0x9c>)
 8000726:	781b      	ldrb	r3, [r3, #0]
 8000728:	3301      	adds	r3, #1
 800072a:	b2da      	uxtb	r2, r3
 800072c:	4b10      	ldr	r3, [pc, #64]	; (8000770 <HAL_TIM_PeriodElapsedCallback+0x9c>)
 800072e:	701a      	strb	r2, [r3, #0]
	}
	else if (htim == &htim3)
	{
		timer3++;
	}
}
 8000730:	e009      	b.n	8000746 <HAL_TIM_PeriodElapsedCallback+0x72>
	else if (htim == &htim3)
 8000732:	687b      	ldr	r3, [r7, #4]
 8000734:	4a0f      	ldr	r2, [pc, #60]	; (8000774 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 8000736:	4293      	cmp	r3, r2
 8000738:	d105      	bne.n	8000746 <HAL_TIM_PeriodElapsedCallback+0x72>
		timer3++;
 800073a:	4b0f      	ldr	r3, [pc, #60]	; (8000778 <HAL_TIM_PeriodElapsedCallback+0xa4>)
 800073c:	781b      	ldrb	r3, [r3, #0]
 800073e:	3301      	adds	r3, #1
 8000740:	b2da      	uxtb	r2, r3
 8000742:	4b0d      	ldr	r3, [pc, #52]	; (8000778 <HAL_TIM_PeriodElapsedCallback+0xa4>)
 8000744:	701a      	strb	r2, [r3, #0]
}
 8000746:	bf00      	nop
 8000748:	3708      	adds	r7, #8
 800074a:	46bd      	mov	sp, r7
 800074c:	bd80      	pop	{r7, pc}
 800074e:	bf00      	nop
 8000750:	20000094 	.word	0x20000094
 8000754:	2000016c 	.word	0x2000016c
 8000758:	08004248 	.word	0x08004248
 800075c:	20000124 	.word	0x20000124
 8000760:	20000000 	.word	0x20000000
 8000764:	08004250 	.word	0x08004250
 8000768:	20000174 	.word	0x20000174
 800076c:	08004254 	.word	0x08004254
 8000770:	20000170 	.word	0x20000170
 8000774:	200000dc 	.word	0x200000dc
 8000778:	20000171 	.word	0x20000171

0800077c <HAL_UART_RxCpltCallback>:
 *
 */
uint8_t light = 0;
uint8_t dllm = 0;
void HAL_UART_RxCpltCallback (UART_HandleTypeDef *huart)
{
 800077c:	b580      	push	{r7, lr}
 800077e:	b082      	sub	sp, #8
 8000780:	af00      	add	r7, sp, #0
 8000782:	6078      	str	r0, [r7, #4]
	if(huart==&huart2)
 8000784:	687b      	ldr	r3, [r7, #4]
 8000786:	4a2b      	ldr	r2, [pc, #172]	; (8000834 <HAL_UART_RxCpltCallback+0xb8>)
 8000788:	4293      	cmp	r3, r2
 800078a:	d14e      	bne.n	800082a <HAL_UART_RxCpltCallback+0xae>
	{
		//Acceleration
	    if( (RX_CMD_BUFFER[0] == 'A') && (throttle == 1) && (accelerate == 1))
 800078c:	4b2a      	ldr	r3, [pc, #168]	; (8000838 <HAL_UART_RxCpltCallback+0xbc>)
 800078e:	781b      	ldrb	r3, [r3, #0]
 8000790:	2b41      	cmp	r3, #65	; 0x41
 8000792:	d10d      	bne.n	80007b0 <HAL_UART_RxCpltCallback+0x34>
 8000794:	4b29      	ldr	r3, [pc, #164]	; (800083c <HAL_UART_RxCpltCallback+0xc0>)
 8000796:	781b      	ldrb	r3, [r3, #0]
 8000798:	2b01      	cmp	r3, #1
 800079a:	d109      	bne.n	80007b0 <HAL_UART_RxCpltCallback+0x34>
 800079c:	4b28      	ldr	r3, [pc, #160]	; (8000840 <HAL_UART_RxCpltCallback+0xc4>)
 800079e:	781b      	ldrb	r3, [r3, #0]
 80007a0:	2b01      	cmp	r3, #1
 80007a2:	d105      	bne.n	80007b0 <HAL_UART_RxCpltCallback+0x34>
        {
        	rpm = rpm + 10;
 80007a4:	4b27      	ldr	r3, [pc, #156]	; (8000844 <HAL_UART_RxCpltCallback+0xc8>)
 80007a6:	681b      	ldr	r3, [r3, #0]
 80007a8:	330a      	adds	r3, #10
 80007aa:	4a26      	ldr	r2, [pc, #152]	; (8000844 <HAL_UART_RxCpltCallback+0xc8>)
 80007ac:	6013      	str	r3, [r2, #0]
 80007ae:	e037      	b.n	8000820 <HAL_UART_RxCpltCallback+0xa4>
        }
        //Deceleration
        else if( (RX_CMD_BUFFER[0] == 'D') && (throttle == 1) )
 80007b0:	4b21      	ldr	r3, [pc, #132]	; (8000838 <HAL_UART_RxCpltCallback+0xbc>)
 80007b2:	781b      	ldrb	r3, [r3, #0]
 80007b4:	2b44      	cmp	r3, #68	; 0x44
 80007b6:	d109      	bne.n	80007cc <HAL_UART_RxCpltCallback+0x50>
 80007b8:	4b20      	ldr	r3, [pc, #128]	; (800083c <HAL_UART_RxCpltCallback+0xc0>)
 80007ba:	781b      	ldrb	r3, [r3, #0]
 80007bc:	2b01      	cmp	r3, #1
 80007be:	d105      	bne.n	80007cc <HAL_UART_RxCpltCallback+0x50>
        {
            rpm = rpm - 10;
 80007c0:	4b20      	ldr	r3, [pc, #128]	; (8000844 <HAL_UART_RxCpltCallback+0xc8>)
 80007c2:	681b      	ldr	r3, [r3, #0]
 80007c4:	3b0a      	subs	r3, #10
 80007c6:	4a1f      	ldr	r2, [pc, #124]	; (8000844 <HAL_UART_RxCpltCallback+0xc8>)
 80007c8:	6013      	str	r3, [r2, #0]
 80007ca:	e029      	b.n	8000820 <HAL_UART_RxCpltCallback+0xa4>
        }
        else if( (RX_CMD_BUFFER[0] == 'R') && (throttle == 0) && (accelerate == 0) && (decelerate == 0) && (motor_move == 0)  )
 80007cc:	4b1a      	ldr	r3, [pc, #104]	; (8000838 <HAL_UART_RxCpltCallback+0xbc>)
 80007ce:	781b      	ldrb	r3, [r3, #0]
 80007d0:	2b52      	cmp	r3, #82	; 0x52
 80007d2:	d11b      	bne.n	800080c <HAL_UART_RxCpltCallback+0x90>
 80007d4:	4b19      	ldr	r3, [pc, #100]	; (800083c <HAL_UART_RxCpltCallback+0xc0>)
 80007d6:	781b      	ldrb	r3, [r3, #0]
 80007d8:	2b00      	cmp	r3, #0
 80007da:	d117      	bne.n	800080c <HAL_UART_RxCpltCallback+0x90>
 80007dc:	4b18      	ldr	r3, [pc, #96]	; (8000840 <HAL_UART_RxCpltCallback+0xc4>)
 80007de:	781b      	ldrb	r3, [r3, #0]
 80007e0:	2b00      	cmp	r3, #0
 80007e2:	d113      	bne.n	800080c <HAL_UART_RxCpltCallback+0x90>
 80007e4:	4b18      	ldr	r3, [pc, #96]	; (8000848 <HAL_UART_RxCpltCallback+0xcc>)
 80007e6:	781b      	ldrb	r3, [r3, #0]
 80007e8:	2b00      	cmp	r3, #0
 80007ea:	d10f      	bne.n	800080c <HAL_UART_RxCpltCallback+0x90>
 80007ec:	4b17      	ldr	r3, [pc, #92]	; (800084c <HAL_UART_RxCpltCallback+0xd0>)
 80007ee:	781b      	ldrb	r3, [r3, #0]
 80007f0:	2b00      	cmp	r3, #0
 80007f2:	d10b      	bne.n	800080c <HAL_UART_RxCpltCallback+0x90>
        {
             dllm = 1;
 80007f4:	4b16      	ldr	r3, [pc, #88]	; (8000850 <HAL_UART_RxCpltCallback+0xd4>)
 80007f6:	2201      	movs	r2, #1
 80007f8:	701a      	strb	r2, [r3, #0]
             stop = 0;
 80007fa:	4b16      	ldr	r3, [pc, #88]	; (8000854 <HAL_UART_RxCpltCallback+0xd8>)
 80007fc:	2200      	movs	r2, #0
 80007fe:	701a      	strb	r2, [r3, #0]
             rpm = rpm + 15;
 8000800:	4b10      	ldr	r3, [pc, #64]	; (8000844 <HAL_UART_RxCpltCallback+0xc8>)
 8000802:	681b      	ldr	r3, [r3, #0]
 8000804:	330f      	adds	r3, #15
 8000806:	4a0f      	ldr	r2, [pc, #60]	; (8000844 <HAL_UART_RxCpltCallback+0xc8>)
 8000808:	6013      	str	r3, [r2, #0]
 800080a:	e009      	b.n	8000820 <HAL_UART_RxCpltCallback+0xa4>
        }
        else if ( RX_CMD_BUFFER[0] == 'S' )
 800080c:	4b0a      	ldr	r3, [pc, #40]	; (8000838 <HAL_UART_RxCpltCallback+0xbc>)
 800080e:	781b      	ldrb	r3, [r3, #0]
 8000810:	2b53      	cmp	r3, #83	; 0x53
 8000812:	d105      	bne.n	8000820 <HAL_UART_RxCpltCallback+0xa4>
        {
            light = 1;
 8000814:	4b10      	ldr	r3, [pc, #64]	; (8000858 <HAL_UART_RxCpltCallback+0xdc>)
 8000816:	2201      	movs	r2, #1
 8000818:	701a      	strb	r2, [r3, #0]
            stop = 1;
 800081a:	4b0e      	ldr	r3, [pc, #56]	; (8000854 <HAL_UART_RxCpltCallback+0xd8>)
 800081c:	2201      	movs	r2, #1
 800081e:	701a      	strb	r2, [r3, #0]
        }
		HAL_UART_Receive_IT(&huart2,(unsigned char*)RX_CMD_BUFFER,sizeof(RX_CMD_BUFFER));
 8000820:	2201      	movs	r2, #1
 8000822:	4905      	ldr	r1, [pc, #20]	; (8000838 <HAL_UART_RxCpltCallback+0xbc>)
 8000824:	4803      	ldr	r0, [pc, #12]	; (8000834 <HAL_UART_RxCpltCallback+0xb8>)
 8000826:	f002 f8ca 	bl	80029be <HAL_UART_Receive_IT>
	}
}
 800082a:	bf00      	nop
 800082c:	3708      	adds	r7, #8
 800082e:	46bd      	mov	sp, r7
 8000830:	bd80      	pop	{r7, pc}
 8000832:	bf00      	nop
 8000834:	20000124 	.word	0x20000124
 8000838:	20000178 	.word	0x20000178
 800083c:	20000168 	.word	0x20000168
 8000840:	20000169 	.word	0x20000169
 8000844:	20000000 	.word	0x20000000
 8000848:	2000016a 	.word	0x2000016a
 800084c:	2000016b 	.word	0x2000016b
 8000850:	2000017a 	.word	0x2000017a
 8000854:	20000004 	.word	0x20000004
 8000858:	20000179 	.word	0x20000179

0800085c <main>:

int main(void)
{
 800085c:	b580      	push	{r7, lr}
 800085e:	af00      	add	r7, sp, #0
  HAL_Init();
 8000860:	f000 fb3c 	bl	8000edc <HAL_Init>
  SystemClock_Config();
 8000864:	f000 f81e 	bl	80008a4 <SystemClock_Config>
  MX_GPIO_Init();
 8000868:	f000 f94e 	bl	8000b08 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800086c:	f000 f922 	bl	8000ab4 <MX_USART2_UART_Init>
  MX_TIM2_Init();
 8000870:	f000 f884 	bl	800097c <MX_TIM2_Init>
  MX_TIM3_Init();
 8000874:	f000 f8d0 	bl	8000a18 <MX_TIM3_Init>
  HAL_TIM_Base_Start_IT(&htim2);
 8000878:	4806      	ldr	r0, [pc, #24]	; (8000894 <main+0x38>)
 800087a:	f001 fbcb 	bl	8002014 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim3);
 800087e:	4806      	ldr	r0, [pc, #24]	; (8000898 <main+0x3c>)
 8000880:	f001 fbc8 	bl	8002014 <HAL_TIM_Base_Start_IT>
  //HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);
  HAL_UART_Receive_IT(&huart2, (unsigned char*)RX_CMD_BUFFER, sizeof(RX_CMD_BUFFER));
 8000884:	2201      	movs	r2, #1
 8000886:	4905      	ldr	r1, [pc, #20]	; (800089c <main+0x40>)
 8000888:	4805      	ldr	r0, [pc, #20]	; (80008a0 <main+0x44>)
 800088a:	f002 f898 	bl	80029be <HAL_UART_Receive_IT>
  while (1)
  {
     Motor_State_Machine();
 800088e:	f7ff fead 	bl	80005ec <Motor_State_Machine>
 8000892:	e7fc      	b.n	800088e <main+0x32>
 8000894:	20000094 	.word	0x20000094
 8000898:	200000dc 	.word	0x200000dc
 800089c:	20000178 	.word	0x20000178
 80008a0:	20000124 	.word	0x20000124

080008a4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80008a4:	b580      	push	{r7, lr}
 80008a6:	b094      	sub	sp, #80	; 0x50
 80008a8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80008aa:	f107 0320 	add.w	r3, r7, #32
 80008ae:	2230      	movs	r2, #48	; 0x30
 80008b0:	2100      	movs	r1, #0
 80008b2:	4618      	mov	r0, r3
 80008b4:	f003 f846 	bl	8003944 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80008b8:	f107 030c 	add.w	r3, r7, #12
 80008bc:	2200      	movs	r2, #0
 80008be:	601a      	str	r2, [r3, #0]
 80008c0:	605a      	str	r2, [r3, #4]
 80008c2:	609a      	str	r2, [r3, #8]
 80008c4:	60da      	str	r2, [r3, #12]
 80008c6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80008c8:	2300      	movs	r3, #0
 80008ca:	60bb      	str	r3, [r7, #8]
 80008cc:	4b29      	ldr	r3, [pc, #164]	; (8000974 <SystemClock_Config+0xd0>)
 80008ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008d0:	4a28      	ldr	r2, [pc, #160]	; (8000974 <SystemClock_Config+0xd0>)
 80008d2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80008d6:	6413      	str	r3, [r2, #64]	; 0x40
 80008d8:	4b26      	ldr	r3, [pc, #152]	; (8000974 <SystemClock_Config+0xd0>)
 80008da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008dc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80008e0:	60bb      	str	r3, [r7, #8]
 80008e2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 80008e4:	2300      	movs	r3, #0
 80008e6:	607b      	str	r3, [r7, #4]
 80008e8:	4b23      	ldr	r3, [pc, #140]	; (8000978 <SystemClock_Config+0xd4>)
 80008ea:	681b      	ldr	r3, [r3, #0]
 80008ec:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80008f0:	4a21      	ldr	r2, [pc, #132]	; (8000978 <SystemClock_Config+0xd4>)
 80008f2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80008f6:	6013      	str	r3, [r2, #0]
 80008f8:	4b1f      	ldr	r3, [pc, #124]	; (8000978 <SystemClock_Config+0xd4>)
 80008fa:	681b      	ldr	r3, [r3, #0]
 80008fc:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000900:	607b      	str	r3, [r7, #4]
 8000902:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000904:	2302      	movs	r3, #2
 8000906:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000908:	2301      	movs	r3, #1
 800090a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800090c:	2310      	movs	r3, #16
 800090e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000910:	2302      	movs	r3, #2
 8000912:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000914:	2300      	movs	r3, #0
 8000916:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000918:	2310      	movs	r3, #16
 800091a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 800091c:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000920:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000922:	2304      	movs	r3, #4
 8000924:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000926:	2307      	movs	r3, #7
 8000928:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800092a:	f107 0320 	add.w	r3, r7, #32
 800092e:	4618      	mov	r0, r3
 8000930:	f000 fe88 	bl	8001644 <HAL_RCC_OscConfig>
 8000934:	4603      	mov	r3, r0
 8000936:	2b00      	cmp	r3, #0
 8000938:	d001      	beq.n	800093e <SystemClock_Config+0x9a>
  {
    Error_Handler();
 800093a:	f000 f953 	bl	8000be4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800093e:	230f      	movs	r3, #15
 8000940:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000942:	2302      	movs	r3, #2
 8000944:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000946:	2300      	movs	r3, #0
 8000948:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800094a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800094e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000950:	2300      	movs	r3, #0
 8000952:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000954:	f107 030c 	add.w	r3, r7, #12
 8000958:	2102      	movs	r1, #2
 800095a:	4618      	mov	r0, r3
 800095c:	f001 f8ea 	bl	8001b34 <HAL_RCC_ClockConfig>
 8000960:	4603      	mov	r3, r0
 8000962:	2b00      	cmp	r3, #0
 8000964:	d001      	beq.n	800096a <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8000966:	f000 f93d 	bl	8000be4 <Error_Handler>
  }
}
 800096a:	bf00      	nop
 800096c:	3750      	adds	r7, #80	; 0x50
 800096e:	46bd      	mov	sp, r7
 8000970:	bd80      	pop	{r7, pc}
 8000972:	bf00      	nop
 8000974:	40023800 	.word	0x40023800
 8000978:	40007000 	.word	0x40007000

0800097c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800097c:	b580      	push	{r7, lr}
 800097e:	b086      	sub	sp, #24
 8000980:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000982:	f107 0308 	add.w	r3, r7, #8
 8000986:	2200      	movs	r2, #0
 8000988:	601a      	str	r2, [r3, #0]
 800098a:	605a      	str	r2, [r3, #4]
 800098c:	609a      	str	r2, [r3, #8]
 800098e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000990:	463b      	mov	r3, r7
 8000992:	2200      	movs	r2, #0
 8000994:	601a      	str	r2, [r3, #0]
 8000996:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000998:	4b1e      	ldr	r3, [pc, #120]	; (8000a14 <MX_TIM2_Init+0x98>)
 800099a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800099e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 10000;
 80009a0:	4b1c      	ldr	r3, [pc, #112]	; (8000a14 <MX_TIM2_Init+0x98>)
 80009a2:	f242 7210 	movw	r2, #10000	; 0x2710
 80009a6:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80009a8:	4b1a      	ldr	r3, [pc, #104]	; (8000a14 <MX_TIM2_Init+0x98>)
 80009aa:	2200      	movs	r2, #0
 80009ac:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 2100;
 80009ae:	4b19      	ldr	r3, [pc, #100]	; (8000a14 <MX_TIM2_Init+0x98>)
 80009b0:	f640 0234 	movw	r2, #2100	; 0x834
 80009b4:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80009b6:	4b17      	ldr	r3, [pc, #92]	; (8000a14 <MX_TIM2_Init+0x98>)
 80009b8:	2200      	movs	r2, #0
 80009ba:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80009bc:	4b15      	ldr	r3, [pc, #84]	; (8000a14 <MX_TIM2_Init+0x98>)
 80009be:	2200      	movs	r2, #0
 80009c0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80009c2:	4814      	ldr	r0, [pc, #80]	; (8000a14 <MX_TIM2_Init+0x98>)
 80009c4:	f001 fad6 	bl	8001f74 <HAL_TIM_Base_Init>
 80009c8:	4603      	mov	r3, r0
 80009ca:	2b00      	cmp	r3, #0
 80009cc:	d001      	beq.n	80009d2 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 80009ce:	f000 f909 	bl	8000be4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80009d2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80009d6:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80009d8:	f107 0308 	add.w	r3, r7, #8
 80009dc:	4619      	mov	r1, r3
 80009de:	480d      	ldr	r0, [pc, #52]	; (8000a14 <MX_TIM2_Init+0x98>)
 80009e0:	f001 fc82 	bl	80022e8 <HAL_TIM_ConfigClockSource>
 80009e4:	4603      	mov	r3, r0
 80009e6:	2b00      	cmp	r3, #0
 80009e8:	d001      	beq.n	80009ee <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 80009ea:	f000 f8fb 	bl	8000be4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80009ee:	2300      	movs	r3, #0
 80009f0:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80009f2:	2300      	movs	r3, #0
 80009f4:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80009f6:	463b      	mov	r3, r7
 80009f8:	4619      	mov	r1, r3
 80009fa:	4806      	ldr	r0, [pc, #24]	; (8000a14 <MX_TIM2_Init+0x98>)
 80009fc:	f001 fe7e 	bl	80026fc <HAL_TIMEx_MasterConfigSynchronization>
 8000a00:	4603      	mov	r3, r0
 8000a02:	2b00      	cmp	r3, #0
 8000a04:	d001      	beq.n	8000a0a <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8000a06:	f000 f8ed 	bl	8000be4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000a0a:	bf00      	nop
 8000a0c:	3718      	adds	r7, #24
 8000a0e:	46bd      	mov	sp, r7
 8000a10:	bd80      	pop	{r7, pc}
 8000a12:	bf00      	nop
 8000a14:	20000094 	.word	0x20000094

08000a18 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000a18:	b580      	push	{r7, lr}
 8000a1a:	b086      	sub	sp, #24
 8000a1c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000a1e:	f107 0308 	add.w	r3, r7, #8
 8000a22:	2200      	movs	r2, #0
 8000a24:	601a      	str	r2, [r3, #0]
 8000a26:	605a      	str	r2, [r3, #4]
 8000a28:	609a      	str	r2, [r3, #8]
 8000a2a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000a2c:	463b      	mov	r3, r7
 8000a2e:	2200      	movs	r2, #0
 8000a30:	601a      	str	r2, [r3, #0]
 8000a32:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000a34:	4b1d      	ldr	r3, [pc, #116]	; (8000aac <MX_TIM3_Init+0x94>)
 8000a36:	4a1e      	ldr	r2, [pc, #120]	; (8000ab0 <MX_TIM3_Init+0x98>)
 8000a38:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 10000;
 8000a3a:	4b1c      	ldr	r3, [pc, #112]	; (8000aac <MX_TIM3_Init+0x94>)
 8000a3c:	f242 7210 	movw	r2, #10000	; 0x2710
 8000a40:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a42:	4b1a      	ldr	r3, [pc, #104]	; (8000aac <MX_TIM3_Init+0x94>)
 8000a44:	2200      	movs	r2, #0
 8000a46:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 8400;
 8000a48:	4b18      	ldr	r3, [pc, #96]	; (8000aac <MX_TIM3_Init+0x94>)
 8000a4a:	f242 02d0 	movw	r2, #8400	; 0x20d0
 8000a4e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a50:	4b16      	ldr	r3, [pc, #88]	; (8000aac <MX_TIM3_Init+0x94>)
 8000a52:	2200      	movs	r2, #0
 8000a54:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a56:	4b15      	ldr	r3, [pc, #84]	; (8000aac <MX_TIM3_Init+0x94>)
 8000a58:	2200      	movs	r2, #0
 8000a5a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000a5c:	4813      	ldr	r0, [pc, #76]	; (8000aac <MX_TIM3_Init+0x94>)
 8000a5e:	f001 fa89 	bl	8001f74 <HAL_TIM_Base_Init>
 8000a62:	4603      	mov	r3, r0
 8000a64:	2b00      	cmp	r3, #0
 8000a66:	d001      	beq.n	8000a6c <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 8000a68:	f000 f8bc 	bl	8000be4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000a6c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000a70:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000a72:	f107 0308 	add.w	r3, r7, #8
 8000a76:	4619      	mov	r1, r3
 8000a78:	480c      	ldr	r0, [pc, #48]	; (8000aac <MX_TIM3_Init+0x94>)
 8000a7a:	f001 fc35 	bl	80022e8 <HAL_TIM_ConfigClockSource>
 8000a7e:	4603      	mov	r3, r0
 8000a80:	2b00      	cmp	r3, #0
 8000a82:	d001      	beq.n	8000a88 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 8000a84:	f000 f8ae 	bl	8000be4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000a88:	2300      	movs	r3, #0
 8000a8a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a8c:	2300      	movs	r3, #0
 8000a8e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000a90:	463b      	mov	r3, r7
 8000a92:	4619      	mov	r1, r3
 8000a94:	4805      	ldr	r0, [pc, #20]	; (8000aac <MX_TIM3_Init+0x94>)
 8000a96:	f001 fe31 	bl	80026fc <HAL_TIMEx_MasterConfigSynchronization>
 8000a9a:	4603      	mov	r3, r0
 8000a9c:	2b00      	cmp	r3, #0
 8000a9e:	d001      	beq.n	8000aa4 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8000aa0:	f000 f8a0 	bl	8000be4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000aa4:	bf00      	nop
 8000aa6:	3718      	adds	r7, #24
 8000aa8:	46bd      	mov	sp, r7
 8000aaa:	bd80      	pop	{r7, pc}
 8000aac:	200000dc 	.word	0x200000dc
 8000ab0:	40000400 	.word	0x40000400

08000ab4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000ab4:	b580      	push	{r7, lr}
 8000ab6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000ab8:	4b11      	ldr	r3, [pc, #68]	; (8000b00 <MX_USART2_UART_Init+0x4c>)
 8000aba:	4a12      	ldr	r2, [pc, #72]	; (8000b04 <MX_USART2_UART_Init+0x50>)
 8000abc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000abe:	4b10      	ldr	r3, [pc, #64]	; (8000b00 <MX_USART2_UART_Init+0x4c>)
 8000ac0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000ac4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000ac6:	4b0e      	ldr	r3, [pc, #56]	; (8000b00 <MX_USART2_UART_Init+0x4c>)
 8000ac8:	2200      	movs	r2, #0
 8000aca:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000acc:	4b0c      	ldr	r3, [pc, #48]	; (8000b00 <MX_USART2_UART_Init+0x4c>)
 8000ace:	2200      	movs	r2, #0
 8000ad0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000ad2:	4b0b      	ldr	r3, [pc, #44]	; (8000b00 <MX_USART2_UART_Init+0x4c>)
 8000ad4:	2200      	movs	r2, #0
 8000ad6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000ad8:	4b09      	ldr	r3, [pc, #36]	; (8000b00 <MX_USART2_UART_Init+0x4c>)
 8000ada:	220c      	movs	r2, #12
 8000adc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000ade:	4b08      	ldr	r3, [pc, #32]	; (8000b00 <MX_USART2_UART_Init+0x4c>)
 8000ae0:	2200      	movs	r2, #0
 8000ae2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ae4:	4b06      	ldr	r3, [pc, #24]	; (8000b00 <MX_USART2_UART_Init+0x4c>)
 8000ae6:	2200      	movs	r2, #0
 8000ae8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000aea:	4805      	ldr	r0, [pc, #20]	; (8000b00 <MX_USART2_UART_Init+0x4c>)
 8000aec:	f001 fe88 	bl	8002800 <HAL_UART_Init>
 8000af0:	4603      	mov	r3, r0
 8000af2:	2b00      	cmp	r3, #0
 8000af4:	d001      	beq.n	8000afa <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000af6:	f000 f875 	bl	8000be4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000afa:	bf00      	nop
 8000afc:	bd80      	pop	{r7, pc}
 8000afe:	bf00      	nop
 8000b00:	20000124 	.word	0x20000124
 8000b04:	40004400 	.word	0x40004400

08000b08 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000b08:	b580      	push	{r7, lr}
 8000b0a:	b08a      	sub	sp, #40	; 0x28
 8000b0c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b0e:	f107 0314 	add.w	r3, r7, #20
 8000b12:	2200      	movs	r2, #0
 8000b14:	601a      	str	r2, [r3, #0]
 8000b16:	605a      	str	r2, [r3, #4]
 8000b18:	609a      	str	r2, [r3, #8]
 8000b1a:	60da      	str	r2, [r3, #12]
 8000b1c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b1e:	2300      	movs	r3, #0
 8000b20:	613b      	str	r3, [r7, #16]
 8000b22:	4b2d      	ldr	r3, [pc, #180]	; (8000bd8 <MX_GPIO_Init+0xd0>)
 8000b24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b26:	4a2c      	ldr	r2, [pc, #176]	; (8000bd8 <MX_GPIO_Init+0xd0>)
 8000b28:	f043 0304 	orr.w	r3, r3, #4
 8000b2c:	6313      	str	r3, [r2, #48]	; 0x30
 8000b2e:	4b2a      	ldr	r3, [pc, #168]	; (8000bd8 <MX_GPIO_Init+0xd0>)
 8000b30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b32:	f003 0304 	and.w	r3, r3, #4
 8000b36:	613b      	str	r3, [r7, #16]
 8000b38:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000b3a:	2300      	movs	r3, #0
 8000b3c:	60fb      	str	r3, [r7, #12]
 8000b3e:	4b26      	ldr	r3, [pc, #152]	; (8000bd8 <MX_GPIO_Init+0xd0>)
 8000b40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b42:	4a25      	ldr	r2, [pc, #148]	; (8000bd8 <MX_GPIO_Init+0xd0>)
 8000b44:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000b48:	6313      	str	r3, [r2, #48]	; 0x30
 8000b4a:	4b23      	ldr	r3, [pc, #140]	; (8000bd8 <MX_GPIO_Init+0xd0>)
 8000b4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b4e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000b52:	60fb      	str	r3, [r7, #12]
 8000b54:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b56:	2300      	movs	r3, #0
 8000b58:	60bb      	str	r3, [r7, #8]
 8000b5a:	4b1f      	ldr	r3, [pc, #124]	; (8000bd8 <MX_GPIO_Init+0xd0>)
 8000b5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b5e:	4a1e      	ldr	r2, [pc, #120]	; (8000bd8 <MX_GPIO_Init+0xd0>)
 8000b60:	f043 0301 	orr.w	r3, r3, #1
 8000b64:	6313      	str	r3, [r2, #48]	; 0x30
 8000b66:	4b1c      	ldr	r3, [pc, #112]	; (8000bd8 <MX_GPIO_Init+0xd0>)
 8000b68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b6a:	f003 0301 	and.w	r3, r3, #1
 8000b6e:	60bb      	str	r3, [r7, #8]
 8000b70:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b72:	2300      	movs	r3, #0
 8000b74:	607b      	str	r3, [r7, #4]
 8000b76:	4b18      	ldr	r3, [pc, #96]	; (8000bd8 <MX_GPIO_Init+0xd0>)
 8000b78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b7a:	4a17      	ldr	r2, [pc, #92]	; (8000bd8 <MX_GPIO_Init+0xd0>)
 8000b7c:	f043 0302 	orr.w	r3, r3, #2
 8000b80:	6313      	str	r3, [r2, #48]	; 0x30
 8000b82:	4b15      	ldr	r3, [pc, #84]	; (8000bd8 <MX_GPIO_Init+0xd0>)
 8000b84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b86:	f003 0302 	and.w	r3, r3, #2
 8000b8a:	607b      	str	r3, [r7, #4]
 8000b8c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000b8e:	2200      	movs	r2, #0
 8000b90:	2120      	movs	r1, #32
 8000b92:	4812      	ldr	r0, [pc, #72]	; (8000bdc <MX_GPIO_Init+0xd4>)
 8000b94:	f000 fd3c 	bl	8001610 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000b98:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000b9c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000b9e:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000ba2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ba4:	2300      	movs	r3, #0
 8000ba6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000ba8:	f107 0314 	add.w	r3, r7, #20
 8000bac:	4619      	mov	r1, r3
 8000bae:	480c      	ldr	r0, [pc, #48]	; (8000be0 <MX_GPIO_Init+0xd8>)
 8000bb0:	f000 fbaa 	bl	8001308 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000bb4:	2320      	movs	r3, #32
 8000bb6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bb8:	2301      	movs	r3, #1
 8000bba:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bbc:	2300      	movs	r3, #0
 8000bbe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bc0:	2300      	movs	r3, #0
 8000bc2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000bc4:	f107 0314 	add.w	r3, r7, #20
 8000bc8:	4619      	mov	r1, r3
 8000bca:	4804      	ldr	r0, [pc, #16]	; (8000bdc <MX_GPIO_Init+0xd4>)
 8000bcc:	f000 fb9c 	bl	8001308 <HAL_GPIO_Init>

}
 8000bd0:	bf00      	nop
 8000bd2:	3728      	adds	r7, #40	; 0x28
 8000bd4:	46bd      	mov	sp, r7
 8000bd6:	bd80      	pop	{r7, pc}
 8000bd8:	40023800 	.word	0x40023800
 8000bdc:	40020000 	.word	0x40020000
 8000be0:	40020800 	.word	0x40020800

08000be4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000be4:	b480      	push	{r7}
 8000be6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000be8:	b672      	cpsid	i
}
 8000bea:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000bec:	e7fe      	b.n	8000bec <Error_Handler+0x8>
	...

08000bf0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000bf0:	b580      	push	{r7, lr}
 8000bf2:	b082      	sub	sp, #8
 8000bf4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000bf6:	2300      	movs	r3, #0
 8000bf8:	607b      	str	r3, [r7, #4]
 8000bfa:	4b10      	ldr	r3, [pc, #64]	; (8000c3c <HAL_MspInit+0x4c>)
 8000bfc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000bfe:	4a0f      	ldr	r2, [pc, #60]	; (8000c3c <HAL_MspInit+0x4c>)
 8000c00:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000c04:	6453      	str	r3, [r2, #68]	; 0x44
 8000c06:	4b0d      	ldr	r3, [pc, #52]	; (8000c3c <HAL_MspInit+0x4c>)
 8000c08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c0a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000c0e:	607b      	str	r3, [r7, #4]
 8000c10:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c12:	2300      	movs	r3, #0
 8000c14:	603b      	str	r3, [r7, #0]
 8000c16:	4b09      	ldr	r3, [pc, #36]	; (8000c3c <HAL_MspInit+0x4c>)
 8000c18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c1a:	4a08      	ldr	r2, [pc, #32]	; (8000c3c <HAL_MspInit+0x4c>)
 8000c1c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c20:	6413      	str	r3, [r2, #64]	; 0x40
 8000c22:	4b06      	ldr	r3, [pc, #24]	; (8000c3c <HAL_MspInit+0x4c>)
 8000c24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c26:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c2a:	603b      	str	r3, [r7, #0]
 8000c2c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000c2e:	2007      	movs	r0, #7
 8000c30:	f000 fa96 	bl	8001160 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c34:	bf00      	nop
 8000c36:	3708      	adds	r7, #8
 8000c38:	46bd      	mov	sp, r7
 8000c3a:	bd80      	pop	{r7, pc}
 8000c3c:	40023800 	.word	0x40023800

08000c40 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000c40:	b580      	push	{r7, lr}
 8000c42:	b084      	sub	sp, #16
 8000c44:	af00      	add	r7, sp, #0
 8000c46:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000c48:	687b      	ldr	r3, [r7, #4]
 8000c4a:	681b      	ldr	r3, [r3, #0]
 8000c4c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000c50:	d116      	bne.n	8000c80 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000c52:	2300      	movs	r3, #0
 8000c54:	60fb      	str	r3, [r7, #12]
 8000c56:	4b1a      	ldr	r3, [pc, #104]	; (8000cc0 <HAL_TIM_Base_MspInit+0x80>)
 8000c58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c5a:	4a19      	ldr	r2, [pc, #100]	; (8000cc0 <HAL_TIM_Base_MspInit+0x80>)
 8000c5c:	f043 0301 	orr.w	r3, r3, #1
 8000c60:	6413      	str	r3, [r2, #64]	; 0x40
 8000c62:	4b17      	ldr	r3, [pc, #92]	; (8000cc0 <HAL_TIM_Base_MspInit+0x80>)
 8000c64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c66:	f003 0301 	and.w	r3, r3, #1
 8000c6a:	60fb      	str	r3, [r7, #12]
 8000c6c:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000c6e:	2200      	movs	r2, #0
 8000c70:	2100      	movs	r1, #0
 8000c72:	201c      	movs	r0, #28
 8000c74:	f000 fa7f 	bl	8001176 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000c78:	201c      	movs	r0, #28
 8000c7a:	f000 fa98 	bl	80011ae <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8000c7e:	e01a      	b.n	8000cb6 <HAL_TIM_Base_MspInit+0x76>
  else if(htim_base->Instance==TIM3)
 8000c80:	687b      	ldr	r3, [r7, #4]
 8000c82:	681b      	ldr	r3, [r3, #0]
 8000c84:	4a0f      	ldr	r2, [pc, #60]	; (8000cc4 <HAL_TIM_Base_MspInit+0x84>)
 8000c86:	4293      	cmp	r3, r2
 8000c88:	d115      	bne.n	8000cb6 <HAL_TIM_Base_MspInit+0x76>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000c8a:	2300      	movs	r3, #0
 8000c8c:	60bb      	str	r3, [r7, #8]
 8000c8e:	4b0c      	ldr	r3, [pc, #48]	; (8000cc0 <HAL_TIM_Base_MspInit+0x80>)
 8000c90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c92:	4a0b      	ldr	r2, [pc, #44]	; (8000cc0 <HAL_TIM_Base_MspInit+0x80>)
 8000c94:	f043 0302 	orr.w	r3, r3, #2
 8000c98:	6413      	str	r3, [r2, #64]	; 0x40
 8000c9a:	4b09      	ldr	r3, [pc, #36]	; (8000cc0 <HAL_TIM_Base_MspInit+0x80>)
 8000c9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c9e:	f003 0302 	and.w	r3, r3, #2
 8000ca2:	60bb      	str	r3, [r7, #8]
 8000ca4:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8000ca6:	2200      	movs	r2, #0
 8000ca8:	2100      	movs	r1, #0
 8000caa:	201d      	movs	r0, #29
 8000cac:	f000 fa63 	bl	8001176 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8000cb0:	201d      	movs	r0, #29
 8000cb2:	f000 fa7c 	bl	80011ae <HAL_NVIC_EnableIRQ>
}
 8000cb6:	bf00      	nop
 8000cb8:	3710      	adds	r7, #16
 8000cba:	46bd      	mov	sp, r7
 8000cbc:	bd80      	pop	{r7, pc}
 8000cbe:	bf00      	nop
 8000cc0:	40023800 	.word	0x40023800
 8000cc4:	40000400 	.word	0x40000400

08000cc8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000cc8:	b580      	push	{r7, lr}
 8000cca:	b08a      	sub	sp, #40	; 0x28
 8000ccc:	af00      	add	r7, sp, #0
 8000cce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cd0:	f107 0314 	add.w	r3, r7, #20
 8000cd4:	2200      	movs	r2, #0
 8000cd6:	601a      	str	r2, [r3, #0]
 8000cd8:	605a      	str	r2, [r3, #4]
 8000cda:	609a      	str	r2, [r3, #8]
 8000cdc:	60da      	str	r2, [r3, #12]
 8000cde:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	681b      	ldr	r3, [r3, #0]
 8000ce4:	4a1d      	ldr	r2, [pc, #116]	; (8000d5c <HAL_UART_MspInit+0x94>)
 8000ce6:	4293      	cmp	r3, r2
 8000ce8:	d133      	bne.n	8000d52 <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000cea:	2300      	movs	r3, #0
 8000cec:	613b      	str	r3, [r7, #16]
 8000cee:	4b1c      	ldr	r3, [pc, #112]	; (8000d60 <HAL_UART_MspInit+0x98>)
 8000cf0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cf2:	4a1b      	ldr	r2, [pc, #108]	; (8000d60 <HAL_UART_MspInit+0x98>)
 8000cf4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000cf8:	6413      	str	r3, [r2, #64]	; 0x40
 8000cfa:	4b19      	ldr	r3, [pc, #100]	; (8000d60 <HAL_UART_MspInit+0x98>)
 8000cfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cfe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d02:	613b      	str	r3, [r7, #16]
 8000d04:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d06:	2300      	movs	r3, #0
 8000d08:	60fb      	str	r3, [r7, #12]
 8000d0a:	4b15      	ldr	r3, [pc, #84]	; (8000d60 <HAL_UART_MspInit+0x98>)
 8000d0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d0e:	4a14      	ldr	r2, [pc, #80]	; (8000d60 <HAL_UART_MspInit+0x98>)
 8000d10:	f043 0301 	orr.w	r3, r3, #1
 8000d14:	6313      	str	r3, [r2, #48]	; 0x30
 8000d16:	4b12      	ldr	r3, [pc, #72]	; (8000d60 <HAL_UART_MspInit+0x98>)
 8000d18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d1a:	f003 0301 	and.w	r3, r3, #1
 8000d1e:	60fb      	str	r3, [r7, #12]
 8000d20:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000d22:	230c      	movs	r3, #12
 8000d24:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d26:	2302      	movs	r3, #2
 8000d28:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d2a:	2300      	movs	r3, #0
 8000d2c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d2e:	2300      	movs	r3, #0
 8000d30:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000d32:	2307      	movs	r3, #7
 8000d34:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d36:	f107 0314 	add.w	r3, r7, #20
 8000d3a:	4619      	mov	r1, r3
 8000d3c:	4809      	ldr	r0, [pc, #36]	; (8000d64 <HAL_UART_MspInit+0x9c>)
 8000d3e:	f000 fae3 	bl	8001308 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000d42:	2200      	movs	r2, #0
 8000d44:	2100      	movs	r1, #0
 8000d46:	2026      	movs	r0, #38	; 0x26
 8000d48:	f000 fa15 	bl	8001176 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000d4c:	2026      	movs	r0, #38	; 0x26
 8000d4e:	f000 fa2e 	bl	80011ae <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000d52:	bf00      	nop
 8000d54:	3728      	adds	r7, #40	; 0x28
 8000d56:	46bd      	mov	sp, r7
 8000d58:	bd80      	pop	{r7, pc}
 8000d5a:	bf00      	nop
 8000d5c:	40004400 	.word	0x40004400
 8000d60:	40023800 	.word	0x40023800
 8000d64:	40020000 	.word	0x40020000

08000d68 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d68:	b480      	push	{r7}
 8000d6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000d6c:	e7fe      	b.n	8000d6c <NMI_Handler+0x4>

08000d6e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d6e:	b480      	push	{r7}
 8000d70:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d72:	e7fe      	b.n	8000d72 <HardFault_Handler+0x4>

08000d74 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d74:	b480      	push	{r7}
 8000d76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d78:	e7fe      	b.n	8000d78 <MemManage_Handler+0x4>

08000d7a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d7a:	b480      	push	{r7}
 8000d7c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d7e:	e7fe      	b.n	8000d7e <BusFault_Handler+0x4>

08000d80 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d80:	b480      	push	{r7}
 8000d82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d84:	e7fe      	b.n	8000d84 <UsageFault_Handler+0x4>

08000d86 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000d86:	b480      	push	{r7}
 8000d88:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000d8a:	bf00      	nop
 8000d8c:	46bd      	mov	sp, r7
 8000d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d92:	4770      	bx	lr

08000d94 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d94:	b480      	push	{r7}
 8000d96:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d98:	bf00      	nop
 8000d9a:	46bd      	mov	sp, r7
 8000d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da0:	4770      	bx	lr

08000da2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000da2:	b480      	push	{r7}
 8000da4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000da6:	bf00      	nop
 8000da8:	46bd      	mov	sp, r7
 8000daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dae:	4770      	bx	lr

08000db0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000db0:	b580      	push	{r7, lr}
 8000db2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000db4:	f000 f8e4 	bl	8000f80 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000db8:	bf00      	nop
 8000dba:	bd80      	pop	{r7, pc}

08000dbc <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000dbc:	b580      	push	{r7, lr}
 8000dbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000dc0:	4802      	ldr	r0, [pc, #8]	; (8000dcc <TIM2_IRQHandler+0x10>)
 8000dc2:	f001 f989 	bl	80020d8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000dc6:	bf00      	nop
 8000dc8:	bd80      	pop	{r7, pc}
 8000dca:	bf00      	nop
 8000dcc:	20000094 	.word	0x20000094

08000dd0 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8000dd0:	b580      	push	{r7, lr}
 8000dd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8000dd4:	4802      	ldr	r0, [pc, #8]	; (8000de0 <TIM3_IRQHandler+0x10>)
 8000dd6:	f001 f97f 	bl	80020d8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8000dda:	bf00      	nop
 8000ddc:	bd80      	pop	{r7, pc}
 8000dde:	bf00      	nop
 8000de0:	200000dc 	.word	0x200000dc

08000de4 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000de4:	b580      	push	{r7, lr}
 8000de6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000de8:	4802      	ldr	r0, [pc, #8]	; (8000df4 <USART2_IRQHandler+0x10>)
 8000dea:	f001 fe19 	bl	8002a20 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000dee:	bf00      	nop
 8000df0:	bd80      	pop	{r7, pc}
 8000df2:	bf00      	nop
 8000df4:	20000124 	.word	0x20000124

08000df8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000df8:	b580      	push	{r7, lr}
 8000dfa:	b086      	sub	sp, #24
 8000dfc:	af00      	add	r7, sp, #0
 8000dfe:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000e00:	4a14      	ldr	r2, [pc, #80]	; (8000e54 <_sbrk+0x5c>)
 8000e02:	4b15      	ldr	r3, [pc, #84]	; (8000e58 <_sbrk+0x60>)
 8000e04:	1ad3      	subs	r3, r2, r3
 8000e06:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000e08:	697b      	ldr	r3, [r7, #20]
 8000e0a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000e0c:	4b13      	ldr	r3, [pc, #76]	; (8000e5c <_sbrk+0x64>)
 8000e0e:	681b      	ldr	r3, [r3, #0]
 8000e10:	2b00      	cmp	r3, #0
 8000e12:	d102      	bne.n	8000e1a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000e14:	4b11      	ldr	r3, [pc, #68]	; (8000e5c <_sbrk+0x64>)
 8000e16:	4a12      	ldr	r2, [pc, #72]	; (8000e60 <_sbrk+0x68>)
 8000e18:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000e1a:	4b10      	ldr	r3, [pc, #64]	; (8000e5c <_sbrk+0x64>)
 8000e1c:	681a      	ldr	r2, [r3, #0]
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	4413      	add	r3, r2
 8000e22:	693a      	ldr	r2, [r7, #16]
 8000e24:	429a      	cmp	r2, r3
 8000e26:	d207      	bcs.n	8000e38 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000e28:	f002 fd62 	bl	80038f0 <__errno>
 8000e2c:	4603      	mov	r3, r0
 8000e2e:	220c      	movs	r2, #12
 8000e30:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000e32:	f04f 33ff 	mov.w	r3, #4294967295
 8000e36:	e009      	b.n	8000e4c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000e38:	4b08      	ldr	r3, [pc, #32]	; (8000e5c <_sbrk+0x64>)
 8000e3a:	681b      	ldr	r3, [r3, #0]
 8000e3c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000e3e:	4b07      	ldr	r3, [pc, #28]	; (8000e5c <_sbrk+0x64>)
 8000e40:	681a      	ldr	r2, [r3, #0]
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	4413      	add	r3, r2
 8000e46:	4a05      	ldr	r2, [pc, #20]	; (8000e5c <_sbrk+0x64>)
 8000e48:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000e4a:	68fb      	ldr	r3, [r7, #12]
}
 8000e4c:	4618      	mov	r0, r3
 8000e4e:	3718      	adds	r7, #24
 8000e50:	46bd      	mov	sp, r7
 8000e52:	bd80      	pop	{r7, pc}
 8000e54:	20018000 	.word	0x20018000
 8000e58:	00000400 	.word	0x00000400
 8000e5c:	2000017c 	.word	0x2000017c
 8000e60:	20000198 	.word	0x20000198

08000e64 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000e64:	b480      	push	{r7}
 8000e66:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000e68:	4b06      	ldr	r3, [pc, #24]	; (8000e84 <SystemInit+0x20>)
 8000e6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000e6e:	4a05      	ldr	r2, [pc, #20]	; (8000e84 <SystemInit+0x20>)
 8000e70:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000e74:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000e78:	bf00      	nop
 8000e7a:	46bd      	mov	sp, r7
 8000e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e80:	4770      	bx	lr
 8000e82:	bf00      	nop
 8000e84:	e000ed00 	.word	0xe000ed00

08000e88 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000e88:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000ec0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000e8c:	480d      	ldr	r0, [pc, #52]	; (8000ec4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000e8e:	490e      	ldr	r1, [pc, #56]	; (8000ec8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000e90:	4a0e      	ldr	r2, [pc, #56]	; (8000ecc <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000e92:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e94:	e002      	b.n	8000e9c <LoopCopyDataInit>

08000e96 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e96:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e98:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e9a:	3304      	adds	r3, #4

08000e9c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e9c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e9e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ea0:	d3f9      	bcc.n	8000e96 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000ea2:	4a0b      	ldr	r2, [pc, #44]	; (8000ed0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000ea4:	4c0b      	ldr	r4, [pc, #44]	; (8000ed4 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000ea6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ea8:	e001      	b.n	8000eae <LoopFillZerobss>

08000eaa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000eaa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000eac:	3204      	adds	r2, #4

08000eae <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000eae:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000eb0:	d3fb      	bcc.n	8000eaa <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000eb2:	f7ff ffd7 	bl	8000e64 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000eb6:	f002 fd21 	bl	80038fc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000eba:	f7ff fccf 	bl	800085c <main>
  bx  lr    
 8000ebe:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000ec0:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000ec4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ec8:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 8000ecc:	080042b4 	.word	0x080042b4
  ldr r2, =_sbss
 8000ed0:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 8000ed4:	20000194 	.word	0x20000194

08000ed8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000ed8:	e7fe      	b.n	8000ed8 <ADC_IRQHandler>
	...

08000edc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000edc:	b580      	push	{r7, lr}
 8000ede:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000ee0:	4b0e      	ldr	r3, [pc, #56]	; (8000f1c <HAL_Init+0x40>)
 8000ee2:	681b      	ldr	r3, [r3, #0]
 8000ee4:	4a0d      	ldr	r2, [pc, #52]	; (8000f1c <HAL_Init+0x40>)
 8000ee6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000eea:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000eec:	4b0b      	ldr	r3, [pc, #44]	; (8000f1c <HAL_Init+0x40>)
 8000eee:	681b      	ldr	r3, [r3, #0]
 8000ef0:	4a0a      	ldr	r2, [pc, #40]	; (8000f1c <HAL_Init+0x40>)
 8000ef2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000ef6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ef8:	4b08      	ldr	r3, [pc, #32]	; (8000f1c <HAL_Init+0x40>)
 8000efa:	681b      	ldr	r3, [r3, #0]
 8000efc:	4a07      	ldr	r2, [pc, #28]	; (8000f1c <HAL_Init+0x40>)
 8000efe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000f02:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f04:	2003      	movs	r0, #3
 8000f06:	f000 f92b 	bl	8001160 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000f0a:	2000      	movs	r0, #0
 8000f0c:	f000 f808 	bl	8000f20 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000f10:	f7ff fe6e 	bl	8000bf0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000f14:	2300      	movs	r3, #0
}
 8000f16:	4618      	mov	r0, r3
 8000f18:	bd80      	pop	{r7, pc}
 8000f1a:	bf00      	nop
 8000f1c:	40023c00 	.word	0x40023c00

08000f20 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f20:	b580      	push	{r7, lr}
 8000f22:	b082      	sub	sp, #8
 8000f24:	af00      	add	r7, sp, #0
 8000f26:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000f28:	4b12      	ldr	r3, [pc, #72]	; (8000f74 <HAL_InitTick+0x54>)
 8000f2a:	681a      	ldr	r2, [r3, #0]
 8000f2c:	4b12      	ldr	r3, [pc, #72]	; (8000f78 <HAL_InitTick+0x58>)
 8000f2e:	781b      	ldrb	r3, [r3, #0]
 8000f30:	4619      	mov	r1, r3
 8000f32:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f36:	fbb3 f3f1 	udiv	r3, r3, r1
 8000f3a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f3e:	4618      	mov	r0, r3
 8000f40:	f000 f943 	bl	80011ca <HAL_SYSTICK_Config>
 8000f44:	4603      	mov	r3, r0
 8000f46:	2b00      	cmp	r3, #0
 8000f48:	d001      	beq.n	8000f4e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000f4a:	2301      	movs	r3, #1
 8000f4c:	e00e      	b.n	8000f6c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	2b0f      	cmp	r3, #15
 8000f52:	d80a      	bhi.n	8000f6a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f54:	2200      	movs	r2, #0
 8000f56:	6879      	ldr	r1, [r7, #4]
 8000f58:	f04f 30ff 	mov.w	r0, #4294967295
 8000f5c:	f000 f90b 	bl	8001176 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000f60:	4a06      	ldr	r2, [pc, #24]	; (8000f7c <HAL_InitTick+0x5c>)
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000f66:	2300      	movs	r3, #0
 8000f68:	e000      	b.n	8000f6c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000f6a:	2301      	movs	r3, #1
}
 8000f6c:	4618      	mov	r0, r3
 8000f6e:	3708      	adds	r7, #8
 8000f70:	46bd      	mov	sp, r7
 8000f72:	bd80      	pop	{r7, pc}
 8000f74:	20000008 	.word	0x20000008
 8000f78:	20000010 	.word	0x20000010
 8000f7c:	2000000c 	.word	0x2000000c

08000f80 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f80:	b480      	push	{r7}
 8000f82:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000f84:	4b06      	ldr	r3, [pc, #24]	; (8000fa0 <HAL_IncTick+0x20>)
 8000f86:	781b      	ldrb	r3, [r3, #0]
 8000f88:	461a      	mov	r2, r3
 8000f8a:	4b06      	ldr	r3, [pc, #24]	; (8000fa4 <HAL_IncTick+0x24>)
 8000f8c:	681b      	ldr	r3, [r3, #0]
 8000f8e:	4413      	add	r3, r2
 8000f90:	4a04      	ldr	r2, [pc, #16]	; (8000fa4 <HAL_IncTick+0x24>)
 8000f92:	6013      	str	r3, [r2, #0]
}
 8000f94:	bf00      	nop
 8000f96:	46bd      	mov	sp, r7
 8000f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f9c:	4770      	bx	lr
 8000f9e:	bf00      	nop
 8000fa0:	20000010 	.word	0x20000010
 8000fa4:	20000180 	.word	0x20000180

08000fa8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000fa8:	b480      	push	{r7}
 8000faa:	af00      	add	r7, sp, #0
  return uwTick;
 8000fac:	4b03      	ldr	r3, [pc, #12]	; (8000fbc <HAL_GetTick+0x14>)
 8000fae:	681b      	ldr	r3, [r3, #0]
}
 8000fb0:	4618      	mov	r0, r3
 8000fb2:	46bd      	mov	sp, r7
 8000fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb8:	4770      	bx	lr
 8000fba:	bf00      	nop
 8000fbc:	20000180 	.word	0x20000180

08000fc0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000fc0:	b480      	push	{r7}
 8000fc2:	b085      	sub	sp, #20
 8000fc4:	af00      	add	r7, sp, #0
 8000fc6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	f003 0307 	and.w	r3, r3, #7
 8000fce:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000fd0:	4b0c      	ldr	r3, [pc, #48]	; (8001004 <__NVIC_SetPriorityGrouping+0x44>)
 8000fd2:	68db      	ldr	r3, [r3, #12]
 8000fd4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000fd6:	68ba      	ldr	r2, [r7, #8]
 8000fd8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000fdc:	4013      	ands	r3, r2
 8000fde:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000fe0:	68fb      	ldr	r3, [r7, #12]
 8000fe2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000fe4:	68bb      	ldr	r3, [r7, #8]
 8000fe6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000fe8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000fec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ff0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000ff2:	4a04      	ldr	r2, [pc, #16]	; (8001004 <__NVIC_SetPriorityGrouping+0x44>)
 8000ff4:	68bb      	ldr	r3, [r7, #8]
 8000ff6:	60d3      	str	r3, [r2, #12]
}
 8000ff8:	bf00      	nop
 8000ffa:	3714      	adds	r7, #20
 8000ffc:	46bd      	mov	sp, r7
 8000ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001002:	4770      	bx	lr
 8001004:	e000ed00 	.word	0xe000ed00

08001008 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001008:	b480      	push	{r7}
 800100a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800100c:	4b04      	ldr	r3, [pc, #16]	; (8001020 <__NVIC_GetPriorityGrouping+0x18>)
 800100e:	68db      	ldr	r3, [r3, #12]
 8001010:	0a1b      	lsrs	r3, r3, #8
 8001012:	f003 0307 	and.w	r3, r3, #7
}
 8001016:	4618      	mov	r0, r3
 8001018:	46bd      	mov	sp, r7
 800101a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800101e:	4770      	bx	lr
 8001020:	e000ed00 	.word	0xe000ed00

08001024 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001024:	b480      	push	{r7}
 8001026:	b083      	sub	sp, #12
 8001028:	af00      	add	r7, sp, #0
 800102a:	4603      	mov	r3, r0
 800102c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800102e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001032:	2b00      	cmp	r3, #0
 8001034:	db0b      	blt.n	800104e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001036:	79fb      	ldrb	r3, [r7, #7]
 8001038:	f003 021f 	and.w	r2, r3, #31
 800103c:	4907      	ldr	r1, [pc, #28]	; (800105c <__NVIC_EnableIRQ+0x38>)
 800103e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001042:	095b      	lsrs	r3, r3, #5
 8001044:	2001      	movs	r0, #1
 8001046:	fa00 f202 	lsl.w	r2, r0, r2
 800104a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800104e:	bf00      	nop
 8001050:	370c      	adds	r7, #12
 8001052:	46bd      	mov	sp, r7
 8001054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001058:	4770      	bx	lr
 800105a:	bf00      	nop
 800105c:	e000e100 	.word	0xe000e100

08001060 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001060:	b480      	push	{r7}
 8001062:	b083      	sub	sp, #12
 8001064:	af00      	add	r7, sp, #0
 8001066:	4603      	mov	r3, r0
 8001068:	6039      	str	r1, [r7, #0]
 800106a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800106c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001070:	2b00      	cmp	r3, #0
 8001072:	db0a      	blt.n	800108a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001074:	683b      	ldr	r3, [r7, #0]
 8001076:	b2da      	uxtb	r2, r3
 8001078:	490c      	ldr	r1, [pc, #48]	; (80010ac <__NVIC_SetPriority+0x4c>)
 800107a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800107e:	0112      	lsls	r2, r2, #4
 8001080:	b2d2      	uxtb	r2, r2
 8001082:	440b      	add	r3, r1
 8001084:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001088:	e00a      	b.n	80010a0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800108a:	683b      	ldr	r3, [r7, #0]
 800108c:	b2da      	uxtb	r2, r3
 800108e:	4908      	ldr	r1, [pc, #32]	; (80010b0 <__NVIC_SetPriority+0x50>)
 8001090:	79fb      	ldrb	r3, [r7, #7]
 8001092:	f003 030f 	and.w	r3, r3, #15
 8001096:	3b04      	subs	r3, #4
 8001098:	0112      	lsls	r2, r2, #4
 800109a:	b2d2      	uxtb	r2, r2
 800109c:	440b      	add	r3, r1
 800109e:	761a      	strb	r2, [r3, #24]
}
 80010a0:	bf00      	nop
 80010a2:	370c      	adds	r7, #12
 80010a4:	46bd      	mov	sp, r7
 80010a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010aa:	4770      	bx	lr
 80010ac:	e000e100 	.word	0xe000e100
 80010b0:	e000ed00 	.word	0xe000ed00

080010b4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80010b4:	b480      	push	{r7}
 80010b6:	b089      	sub	sp, #36	; 0x24
 80010b8:	af00      	add	r7, sp, #0
 80010ba:	60f8      	str	r0, [r7, #12]
 80010bc:	60b9      	str	r1, [r7, #8]
 80010be:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80010c0:	68fb      	ldr	r3, [r7, #12]
 80010c2:	f003 0307 	and.w	r3, r3, #7
 80010c6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80010c8:	69fb      	ldr	r3, [r7, #28]
 80010ca:	f1c3 0307 	rsb	r3, r3, #7
 80010ce:	2b04      	cmp	r3, #4
 80010d0:	bf28      	it	cs
 80010d2:	2304      	movcs	r3, #4
 80010d4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80010d6:	69fb      	ldr	r3, [r7, #28]
 80010d8:	3304      	adds	r3, #4
 80010da:	2b06      	cmp	r3, #6
 80010dc:	d902      	bls.n	80010e4 <NVIC_EncodePriority+0x30>
 80010de:	69fb      	ldr	r3, [r7, #28]
 80010e0:	3b03      	subs	r3, #3
 80010e2:	e000      	b.n	80010e6 <NVIC_EncodePriority+0x32>
 80010e4:	2300      	movs	r3, #0
 80010e6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010e8:	f04f 32ff 	mov.w	r2, #4294967295
 80010ec:	69bb      	ldr	r3, [r7, #24]
 80010ee:	fa02 f303 	lsl.w	r3, r2, r3
 80010f2:	43da      	mvns	r2, r3
 80010f4:	68bb      	ldr	r3, [r7, #8]
 80010f6:	401a      	ands	r2, r3
 80010f8:	697b      	ldr	r3, [r7, #20]
 80010fa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80010fc:	f04f 31ff 	mov.w	r1, #4294967295
 8001100:	697b      	ldr	r3, [r7, #20]
 8001102:	fa01 f303 	lsl.w	r3, r1, r3
 8001106:	43d9      	mvns	r1, r3
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800110c:	4313      	orrs	r3, r2
         );
}
 800110e:	4618      	mov	r0, r3
 8001110:	3724      	adds	r7, #36	; 0x24
 8001112:	46bd      	mov	sp, r7
 8001114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001118:	4770      	bx	lr
	...

0800111c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800111c:	b580      	push	{r7, lr}
 800111e:	b082      	sub	sp, #8
 8001120:	af00      	add	r7, sp, #0
 8001122:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	3b01      	subs	r3, #1
 8001128:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800112c:	d301      	bcc.n	8001132 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800112e:	2301      	movs	r3, #1
 8001130:	e00f      	b.n	8001152 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001132:	4a0a      	ldr	r2, [pc, #40]	; (800115c <SysTick_Config+0x40>)
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	3b01      	subs	r3, #1
 8001138:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800113a:	210f      	movs	r1, #15
 800113c:	f04f 30ff 	mov.w	r0, #4294967295
 8001140:	f7ff ff8e 	bl	8001060 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001144:	4b05      	ldr	r3, [pc, #20]	; (800115c <SysTick_Config+0x40>)
 8001146:	2200      	movs	r2, #0
 8001148:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800114a:	4b04      	ldr	r3, [pc, #16]	; (800115c <SysTick_Config+0x40>)
 800114c:	2207      	movs	r2, #7
 800114e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001150:	2300      	movs	r3, #0
}
 8001152:	4618      	mov	r0, r3
 8001154:	3708      	adds	r7, #8
 8001156:	46bd      	mov	sp, r7
 8001158:	bd80      	pop	{r7, pc}
 800115a:	bf00      	nop
 800115c:	e000e010 	.word	0xe000e010

08001160 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001160:	b580      	push	{r7, lr}
 8001162:	b082      	sub	sp, #8
 8001164:	af00      	add	r7, sp, #0
 8001166:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001168:	6878      	ldr	r0, [r7, #4]
 800116a:	f7ff ff29 	bl	8000fc0 <__NVIC_SetPriorityGrouping>
}
 800116e:	bf00      	nop
 8001170:	3708      	adds	r7, #8
 8001172:	46bd      	mov	sp, r7
 8001174:	bd80      	pop	{r7, pc}

08001176 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001176:	b580      	push	{r7, lr}
 8001178:	b086      	sub	sp, #24
 800117a:	af00      	add	r7, sp, #0
 800117c:	4603      	mov	r3, r0
 800117e:	60b9      	str	r1, [r7, #8]
 8001180:	607a      	str	r2, [r7, #4]
 8001182:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001184:	2300      	movs	r3, #0
 8001186:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001188:	f7ff ff3e 	bl	8001008 <__NVIC_GetPriorityGrouping>
 800118c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800118e:	687a      	ldr	r2, [r7, #4]
 8001190:	68b9      	ldr	r1, [r7, #8]
 8001192:	6978      	ldr	r0, [r7, #20]
 8001194:	f7ff ff8e 	bl	80010b4 <NVIC_EncodePriority>
 8001198:	4602      	mov	r2, r0
 800119a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800119e:	4611      	mov	r1, r2
 80011a0:	4618      	mov	r0, r3
 80011a2:	f7ff ff5d 	bl	8001060 <__NVIC_SetPriority>
}
 80011a6:	bf00      	nop
 80011a8:	3718      	adds	r7, #24
 80011aa:	46bd      	mov	sp, r7
 80011ac:	bd80      	pop	{r7, pc}

080011ae <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80011ae:	b580      	push	{r7, lr}
 80011b0:	b082      	sub	sp, #8
 80011b2:	af00      	add	r7, sp, #0
 80011b4:	4603      	mov	r3, r0
 80011b6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80011b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011bc:	4618      	mov	r0, r3
 80011be:	f7ff ff31 	bl	8001024 <__NVIC_EnableIRQ>
}
 80011c2:	bf00      	nop
 80011c4:	3708      	adds	r7, #8
 80011c6:	46bd      	mov	sp, r7
 80011c8:	bd80      	pop	{r7, pc}

080011ca <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80011ca:	b580      	push	{r7, lr}
 80011cc:	b082      	sub	sp, #8
 80011ce:	af00      	add	r7, sp, #0
 80011d0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80011d2:	6878      	ldr	r0, [r7, #4]
 80011d4:	f7ff ffa2 	bl	800111c <SysTick_Config>
 80011d8:	4603      	mov	r3, r0
}
 80011da:	4618      	mov	r0, r3
 80011dc:	3708      	adds	r7, #8
 80011de:	46bd      	mov	sp, r7
 80011e0:	bd80      	pop	{r7, pc}

080011e2 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80011e2:	b580      	push	{r7, lr}
 80011e4:	b084      	sub	sp, #16
 80011e6:	af00      	add	r7, sp, #0
 80011e8:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80011ee:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80011f0:	f7ff feda 	bl	8000fa8 <HAL_GetTick>
 80011f4:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80011fc:	b2db      	uxtb	r3, r3
 80011fe:	2b02      	cmp	r3, #2
 8001200:	d008      	beq.n	8001214 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	2280      	movs	r2, #128	; 0x80
 8001206:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	2200      	movs	r2, #0
 800120c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8001210:	2301      	movs	r3, #1
 8001212:	e052      	b.n	80012ba <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	681a      	ldr	r2, [r3, #0]
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	f022 0216 	bic.w	r2, r2, #22
 8001222:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	695a      	ldr	r2, [r3, #20]
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001232:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001238:	2b00      	cmp	r3, #0
 800123a:	d103      	bne.n	8001244 <HAL_DMA_Abort+0x62>
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001240:	2b00      	cmp	r3, #0
 8001242:	d007      	beq.n	8001254 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	681a      	ldr	r2, [r3, #0]
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	f022 0208 	bic.w	r2, r2, #8
 8001252:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	681a      	ldr	r2, [r3, #0]
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	f022 0201 	bic.w	r2, r2, #1
 8001262:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001264:	e013      	b.n	800128e <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001266:	f7ff fe9f 	bl	8000fa8 <HAL_GetTick>
 800126a:	4602      	mov	r2, r0
 800126c:	68bb      	ldr	r3, [r7, #8]
 800126e:	1ad3      	subs	r3, r2, r3
 8001270:	2b05      	cmp	r3, #5
 8001272:	d90c      	bls.n	800128e <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	2220      	movs	r2, #32
 8001278:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	2203      	movs	r2, #3
 800127e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	2200      	movs	r2, #0
 8001286:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 800128a:	2303      	movs	r3, #3
 800128c:	e015      	b.n	80012ba <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	f003 0301 	and.w	r3, r3, #1
 8001298:	2b00      	cmp	r3, #0
 800129a:	d1e4      	bne.n	8001266 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80012a0:	223f      	movs	r2, #63	; 0x3f
 80012a2:	409a      	lsls	r2, r3
 80012a4:	68fb      	ldr	r3, [r7, #12]
 80012a6:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	2201      	movs	r2, #1
 80012ac:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	2200      	movs	r2, #0
 80012b4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 80012b8:	2300      	movs	r3, #0
}
 80012ba:	4618      	mov	r0, r3
 80012bc:	3710      	adds	r7, #16
 80012be:	46bd      	mov	sp, r7
 80012c0:	bd80      	pop	{r7, pc}

080012c2 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80012c2:	b480      	push	{r7}
 80012c4:	b083      	sub	sp, #12
 80012c6:	af00      	add	r7, sp, #0
 80012c8:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80012d0:	b2db      	uxtb	r3, r3
 80012d2:	2b02      	cmp	r3, #2
 80012d4:	d004      	beq.n	80012e0 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	2280      	movs	r2, #128	; 0x80
 80012da:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80012dc:	2301      	movs	r3, #1
 80012de:	e00c      	b.n	80012fa <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	2205      	movs	r2, #5
 80012e4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	681a      	ldr	r2, [r3, #0]
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	f022 0201 	bic.w	r2, r2, #1
 80012f6:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80012f8:	2300      	movs	r3, #0
}
 80012fa:	4618      	mov	r0, r3
 80012fc:	370c      	adds	r7, #12
 80012fe:	46bd      	mov	sp, r7
 8001300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001304:	4770      	bx	lr
	...

08001308 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001308:	b480      	push	{r7}
 800130a:	b089      	sub	sp, #36	; 0x24
 800130c:	af00      	add	r7, sp, #0
 800130e:	6078      	str	r0, [r7, #4]
 8001310:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001312:	2300      	movs	r3, #0
 8001314:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001316:	2300      	movs	r3, #0
 8001318:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800131a:	2300      	movs	r3, #0
 800131c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800131e:	2300      	movs	r3, #0
 8001320:	61fb      	str	r3, [r7, #28]
 8001322:	e159      	b.n	80015d8 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001324:	2201      	movs	r2, #1
 8001326:	69fb      	ldr	r3, [r7, #28]
 8001328:	fa02 f303 	lsl.w	r3, r2, r3
 800132c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800132e:	683b      	ldr	r3, [r7, #0]
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	697a      	ldr	r2, [r7, #20]
 8001334:	4013      	ands	r3, r2
 8001336:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001338:	693a      	ldr	r2, [r7, #16]
 800133a:	697b      	ldr	r3, [r7, #20]
 800133c:	429a      	cmp	r2, r3
 800133e:	f040 8148 	bne.w	80015d2 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001342:	683b      	ldr	r3, [r7, #0]
 8001344:	685b      	ldr	r3, [r3, #4]
 8001346:	f003 0303 	and.w	r3, r3, #3
 800134a:	2b01      	cmp	r3, #1
 800134c:	d005      	beq.n	800135a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800134e:	683b      	ldr	r3, [r7, #0]
 8001350:	685b      	ldr	r3, [r3, #4]
 8001352:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001356:	2b02      	cmp	r3, #2
 8001358:	d130      	bne.n	80013bc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	689b      	ldr	r3, [r3, #8]
 800135e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001360:	69fb      	ldr	r3, [r7, #28]
 8001362:	005b      	lsls	r3, r3, #1
 8001364:	2203      	movs	r2, #3
 8001366:	fa02 f303 	lsl.w	r3, r2, r3
 800136a:	43db      	mvns	r3, r3
 800136c:	69ba      	ldr	r2, [r7, #24]
 800136e:	4013      	ands	r3, r2
 8001370:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001372:	683b      	ldr	r3, [r7, #0]
 8001374:	68da      	ldr	r2, [r3, #12]
 8001376:	69fb      	ldr	r3, [r7, #28]
 8001378:	005b      	lsls	r3, r3, #1
 800137a:	fa02 f303 	lsl.w	r3, r2, r3
 800137e:	69ba      	ldr	r2, [r7, #24]
 8001380:	4313      	orrs	r3, r2
 8001382:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	69ba      	ldr	r2, [r7, #24]
 8001388:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	685b      	ldr	r3, [r3, #4]
 800138e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001390:	2201      	movs	r2, #1
 8001392:	69fb      	ldr	r3, [r7, #28]
 8001394:	fa02 f303 	lsl.w	r3, r2, r3
 8001398:	43db      	mvns	r3, r3
 800139a:	69ba      	ldr	r2, [r7, #24]
 800139c:	4013      	ands	r3, r2
 800139e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80013a0:	683b      	ldr	r3, [r7, #0]
 80013a2:	685b      	ldr	r3, [r3, #4]
 80013a4:	091b      	lsrs	r3, r3, #4
 80013a6:	f003 0201 	and.w	r2, r3, #1
 80013aa:	69fb      	ldr	r3, [r7, #28]
 80013ac:	fa02 f303 	lsl.w	r3, r2, r3
 80013b0:	69ba      	ldr	r2, [r7, #24]
 80013b2:	4313      	orrs	r3, r2
 80013b4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	69ba      	ldr	r2, [r7, #24]
 80013ba:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80013bc:	683b      	ldr	r3, [r7, #0]
 80013be:	685b      	ldr	r3, [r3, #4]
 80013c0:	f003 0303 	and.w	r3, r3, #3
 80013c4:	2b03      	cmp	r3, #3
 80013c6:	d017      	beq.n	80013f8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	68db      	ldr	r3, [r3, #12]
 80013cc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80013ce:	69fb      	ldr	r3, [r7, #28]
 80013d0:	005b      	lsls	r3, r3, #1
 80013d2:	2203      	movs	r2, #3
 80013d4:	fa02 f303 	lsl.w	r3, r2, r3
 80013d8:	43db      	mvns	r3, r3
 80013da:	69ba      	ldr	r2, [r7, #24]
 80013dc:	4013      	ands	r3, r2
 80013de:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80013e0:	683b      	ldr	r3, [r7, #0]
 80013e2:	689a      	ldr	r2, [r3, #8]
 80013e4:	69fb      	ldr	r3, [r7, #28]
 80013e6:	005b      	lsls	r3, r3, #1
 80013e8:	fa02 f303 	lsl.w	r3, r2, r3
 80013ec:	69ba      	ldr	r2, [r7, #24]
 80013ee:	4313      	orrs	r3, r2
 80013f0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	69ba      	ldr	r2, [r7, #24]
 80013f6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80013f8:	683b      	ldr	r3, [r7, #0]
 80013fa:	685b      	ldr	r3, [r3, #4]
 80013fc:	f003 0303 	and.w	r3, r3, #3
 8001400:	2b02      	cmp	r3, #2
 8001402:	d123      	bne.n	800144c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001404:	69fb      	ldr	r3, [r7, #28]
 8001406:	08da      	lsrs	r2, r3, #3
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	3208      	adds	r2, #8
 800140c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001410:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001412:	69fb      	ldr	r3, [r7, #28]
 8001414:	f003 0307 	and.w	r3, r3, #7
 8001418:	009b      	lsls	r3, r3, #2
 800141a:	220f      	movs	r2, #15
 800141c:	fa02 f303 	lsl.w	r3, r2, r3
 8001420:	43db      	mvns	r3, r3
 8001422:	69ba      	ldr	r2, [r7, #24]
 8001424:	4013      	ands	r3, r2
 8001426:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001428:	683b      	ldr	r3, [r7, #0]
 800142a:	691a      	ldr	r2, [r3, #16]
 800142c:	69fb      	ldr	r3, [r7, #28]
 800142e:	f003 0307 	and.w	r3, r3, #7
 8001432:	009b      	lsls	r3, r3, #2
 8001434:	fa02 f303 	lsl.w	r3, r2, r3
 8001438:	69ba      	ldr	r2, [r7, #24]
 800143a:	4313      	orrs	r3, r2
 800143c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800143e:	69fb      	ldr	r3, [r7, #28]
 8001440:	08da      	lsrs	r2, r3, #3
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	3208      	adds	r2, #8
 8001446:	69b9      	ldr	r1, [r7, #24]
 8001448:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001452:	69fb      	ldr	r3, [r7, #28]
 8001454:	005b      	lsls	r3, r3, #1
 8001456:	2203      	movs	r2, #3
 8001458:	fa02 f303 	lsl.w	r3, r2, r3
 800145c:	43db      	mvns	r3, r3
 800145e:	69ba      	ldr	r2, [r7, #24]
 8001460:	4013      	ands	r3, r2
 8001462:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001464:	683b      	ldr	r3, [r7, #0]
 8001466:	685b      	ldr	r3, [r3, #4]
 8001468:	f003 0203 	and.w	r2, r3, #3
 800146c:	69fb      	ldr	r3, [r7, #28]
 800146e:	005b      	lsls	r3, r3, #1
 8001470:	fa02 f303 	lsl.w	r3, r2, r3
 8001474:	69ba      	ldr	r2, [r7, #24]
 8001476:	4313      	orrs	r3, r2
 8001478:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	69ba      	ldr	r2, [r7, #24]
 800147e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001480:	683b      	ldr	r3, [r7, #0]
 8001482:	685b      	ldr	r3, [r3, #4]
 8001484:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001488:	2b00      	cmp	r3, #0
 800148a:	f000 80a2 	beq.w	80015d2 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800148e:	2300      	movs	r3, #0
 8001490:	60fb      	str	r3, [r7, #12]
 8001492:	4b57      	ldr	r3, [pc, #348]	; (80015f0 <HAL_GPIO_Init+0x2e8>)
 8001494:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001496:	4a56      	ldr	r2, [pc, #344]	; (80015f0 <HAL_GPIO_Init+0x2e8>)
 8001498:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800149c:	6453      	str	r3, [r2, #68]	; 0x44
 800149e:	4b54      	ldr	r3, [pc, #336]	; (80015f0 <HAL_GPIO_Init+0x2e8>)
 80014a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014a2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80014a6:	60fb      	str	r3, [r7, #12]
 80014a8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80014aa:	4a52      	ldr	r2, [pc, #328]	; (80015f4 <HAL_GPIO_Init+0x2ec>)
 80014ac:	69fb      	ldr	r3, [r7, #28]
 80014ae:	089b      	lsrs	r3, r3, #2
 80014b0:	3302      	adds	r3, #2
 80014b2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80014b6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80014b8:	69fb      	ldr	r3, [r7, #28]
 80014ba:	f003 0303 	and.w	r3, r3, #3
 80014be:	009b      	lsls	r3, r3, #2
 80014c0:	220f      	movs	r2, #15
 80014c2:	fa02 f303 	lsl.w	r3, r2, r3
 80014c6:	43db      	mvns	r3, r3
 80014c8:	69ba      	ldr	r2, [r7, #24]
 80014ca:	4013      	ands	r3, r2
 80014cc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	4a49      	ldr	r2, [pc, #292]	; (80015f8 <HAL_GPIO_Init+0x2f0>)
 80014d2:	4293      	cmp	r3, r2
 80014d4:	d019      	beq.n	800150a <HAL_GPIO_Init+0x202>
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	4a48      	ldr	r2, [pc, #288]	; (80015fc <HAL_GPIO_Init+0x2f4>)
 80014da:	4293      	cmp	r3, r2
 80014dc:	d013      	beq.n	8001506 <HAL_GPIO_Init+0x1fe>
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	4a47      	ldr	r2, [pc, #284]	; (8001600 <HAL_GPIO_Init+0x2f8>)
 80014e2:	4293      	cmp	r3, r2
 80014e4:	d00d      	beq.n	8001502 <HAL_GPIO_Init+0x1fa>
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	4a46      	ldr	r2, [pc, #280]	; (8001604 <HAL_GPIO_Init+0x2fc>)
 80014ea:	4293      	cmp	r3, r2
 80014ec:	d007      	beq.n	80014fe <HAL_GPIO_Init+0x1f6>
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	4a45      	ldr	r2, [pc, #276]	; (8001608 <HAL_GPIO_Init+0x300>)
 80014f2:	4293      	cmp	r3, r2
 80014f4:	d101      	bne.n	80014fa <HAL_GPIO_Init+0x1f2>
 80014f6:	2304      	movs	r3, #4
 80014f8:	e008      	b.n	800150c <HAL_GPIO_Init+0x204>
 80014fa:	2307      	movs	r3, #7
 80014fc:	e006      	b.n	800150c <HAL_GPIO_Init+0x204>
 80014fe:	2303      	movs	r3, #3
 8001500:	e004      	b.n	800150c <HAL_GPIO_Init+0x204>
 8001502:	2302      	movs	r3, #2
 8001504:	e002      	b.n	800150c <HAL_GPIO_Init+0x204>
 8001506:	2301      	movs	r3, #1
 8001508:	e000      	b.n	800150c <HAL_GPIO_Init+0x204>
 800150a:	2300      	movs	r3, #0
 800150c:	69fa      	ldr	r2, [r7, #28]
 800150e:	f002 0203 	and.w	r2, r2, #3
 8001512:	0092      	lsls	r2, r2, #2
 8001514:	4093      	lsls	r3, r2
 8001516:	69ba      	ldr	r2, [r7, #24]
 8001518:	4313      	orrs	r3, r2
 800151a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800151c:	4935      	ldr	r1, [pc, #212]	; (80015f4 <HAL_GPIO_Init+0x2ec>)
 800151e:	69fb      	ldr	r3, [r7, #28]
 8001520:	089b      	lsrs	r3, r3, #2
 8001522:	3302      	adds	r3, #2
 8001524:	69ba      	ldr	r2, [r7, #24]
 8001526:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800152a:	4b38      	ldr	r3, [pc, #224]	; (800160c <HAL_GPIO_Init+0x304>)
 800152c:	689b      	ldr	r3, [r3, #8]
 800152e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001530:	693b      	ldr	r3, [r7, #16]
 8001532:	43db      	mvns	r3, r3
 8001534:	69ba      	ldr	r2, [r7, #24]
 8001536:	4013      	ands	r3, r2
 8001538:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800153a:	683b      	ldr	r3, [r7, #0]
 800153c:	685b      	ldr	r3, [r3, #4]
 800153e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001542:	2b00      	cmp	r3, #0
 8001544:	d003      	beq.n	800154e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001546:	69ba      	ldr	r2, [r7, #24]
 8001548:	693b      	ldr	r3, [r7, #16]
 800154a:	4313      	orrs	r3, r2
 800154c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800154e:	4a2f      	ldr	r2, [pc, #188]	; (800160c <HAL_GPIO_Init+0x304>)
 8001550:	69bb      	ldr	r3, [r7, #24]
 8001552:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001554:	4b2d      	ldr	r3, [pc, #180]	; (800160c <HAL_GPIO_Init+0x304>)
 8001556:	68db      	ldr	r3, [r3, #12]
 8001558:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800155a:	693b      	ldr	r3, [r7, #16]
 800155c:	43db      	mvns	r3, r3
 800155e:	69ba      	ldr	r2, [r7, #24]
 8001560:	4013      	ands	r3, r2
 8001562:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001564:	683b      	ldr	r3, [r7, #0]
 8001566:	685b      	ldr	r3, [r3, #4]
 8001568:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800156c:	2b00      	cmp	r3, #0
 800156e:	d003      	beq.n	8001578 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001570:	69ba      	ldr	r2, [r7, #24]
 8001572:	693b      	ldr	r3, [r7, #16]
 8001574:	4313      	orrs	r3, r2
 8001576:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001578:	4a24      	ldr	r2, [pc, #144]	; (800160c <HAL_GPIO_Init+0x304>)
 800157a:	69bb      	ldr	r3, [r7, #24]
 800157c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800157e:	4b23      	ldr	r3, [pc, #140]	; (800160c <HAL_GPIO_Init+0x304>)
 8001580:	685b      	ldr	r3, [r3, #4]
 8001582:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001584:	693b      	ldr	r3, [r7, #16]
 8001586:	43db      	mvns	r3, r3
 8001588:	69ba      	ldr	r2, [r7, #24]
 800158a:	4013      	ands	r3, r2
 800158c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800158e:	683b      	ldr	r3, [r7, #0]
 8001590:	685b      	ldr	r3, [r3, #4]
 8001592:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001596:	2b00      	cmp	r3, #0
 8001598:	d003      	beq.n	80015a2 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800159a:	69ba      	ldr	r2, [r7, #24]
 800159c:	693b      	ldr	r3, [r7, #16]
 800159e:	4313      	orrs	r3, r2
 80015a0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80015a2:	4a1a      	ldr	r2, [pc, #104]	; (800160c <HAL_GPIO_Init+0x304>)
 80015a4:	69bb      	ldr	r3, [r7, #24]
 80015a6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80015a8:	4b18      	ldr	r3, [pc, #96]	; (800160c <HAL_GPIO_Init+0x304>)
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80015ae:	693b      	ldr	r3, [r7, #16]
 80015b0:	43db      	mvns	r3, r3
 80015b2:	69ba      	ldr	r2, [r7, #24]
 80015b4:	4013      	ands	r3, r2
 80015b6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80015b8:	683b      	ldr	r3, [r7, #0]
 80015ba:	685b      	ldr	r3, [r3, #4]
 80015bc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80015c0:	2b00      	cmp	r3, #0
 80015c2:	d003      	beq.n	80015cc <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80015c4:	69ba      	ldr	r2, [r7, #24]
 80015c6:	693b      	ldr	r3, [r7, #16]
 80015c8:	4313      	orrs	r3, r2
 80015ca:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80015cc:	4a0f      	ldr	r2, [pc, #60]	; (800160c <HAL_GPIO_Init+0x304>)
 80015ce:	69bb      	ldr	r3, [r7, #24]
 80015d0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80015d2:	69fb      	ldr	r3, [r7, #28]
 80015d4:	3301      	adds	r3, #1
 80015d6:	61fb      	str	r3, [r7, #28]
 80015d8:	69fb      	ldr	r3, [r7, #28]
 80015da:	2b0f      	cmp	r3, #15
 80015dc:	f67f aea2 	bls.w	8001324 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80015e0:	bf00      	nop
 80015e2:	bf00      	nop
 80015e4:	3724      	adds	r7, #36	; 0x24
 80015e6:	46bd      	mov	sp, r7
 80015e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ec:	4770      	bx	lr
 80015ee:	bf00      	nop
 80015f0:	40023800 	.word	0x40023800
 80015f4:	40013800 	.word	0x40013800
 80015f8:	40020000 	.word	0x40020000
 80015fc:	40020400 	.word	0x40020400
 8001600:	40020800 	.word	0x40020800
 8001604:	40020c00 	.word	0x40020c00
 8001608:	40021000 	.word	0x40021000
 800160c:	40013c00 	.word	0x40013c00

08001610 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001610:	b480      	push	{r7}
 8001612:	b083      	sub	sp, #12
 8001614:	af00      	add	r7, sp, #0
 8001616:	6078      	str	r0, [r7, #4]
 8001618:	460b      	mov	r3, r1
 800161a:	807b      	strh	r3, [r7, #2]
 800161c:	4613      	mov	r3, r2
 800161e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001620:	787b      	ldrb	r3, [r7, #1]
 8001622:	2b00      	cmp	r3, #0
 8001624:	d003      	beq.n	800162e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001626:	887a      	ldrh	r2, [r7, #2]
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800162c:	e003      	b.n	8001636 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800162e:	887b      	ldrh	r3, [r7, #2]
 8001630:	041a      	lsls	r2, r3, #16
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	619a      	str	r2, [r3, #24]
}
 8001636:	bf00      	nop
 8001638:	370c      	adds	r7, #12
 800163a:	46bd      	mov	sp, r7
 800163c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001640:	4770      	bx	lr
	...

08001644 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001644:	b580      	push	{r7, lr}
 8001646:	b086      	sub	sp, #24
 8001648:	af00      	add	r7, sp, #0
 800164a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	2b00      	cmp	r3, #0
 8001650:	d101      	bne.n	8001656 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001652:	2301      	movs	r3, #1
 8001654:	e267      	b.n	8001b26 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	f003 0301 	and.w	r3, r3, #1
 800165e:	2b00      	cmp	r3, #0
 8001660:	d075      	beq.n	800174e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001662:	4b88      	ldr	r3, [pc, #544]	; (8001884 <HAL_RCC_OscConfig+0x240>)
 8001664:	689b      	ldr	r3, [r3, #8]
 8001666:	f003 030c 	and.w	r3, r3, #12
 800166a:	2b04      	cmp	r3, #4
 800166c:	d00c      	beq.n	8001688 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800166e:	4b85      	ldr	r3, [pc, #532]	; (8001884 <HAL_RCC_OscConfig+0x240>)
 8001670:	689b      	ldr	r3, [r3, #8]
 8001672:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001676:	2b08      	cmp	r3, #8
 8001678:	d112      	bne.n	80016a0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800167a:	4b82      	ldr	r3, [pc, #520]	; (8001884 <HAL_RCC_OscConfig+0x240>)
 800167c:	685b      	ldr	r3, [r3, #4]
 800167e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001682:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001686:	d10b      	bne.n	80016a0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001688:	4b7e      	ldr	r3, [pc, #504]	; (8001884 <HAL_RCC_OscConfig+0x240>)
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001690:	2b00      	cmp	r3, #0
 8001692:	d05b      	beq.n	800174c <HAL_RCC_OscConfig+0x108>
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	685b      	ldr	r3, [r3, #4]
 8001698:	2b00      	cmp	r3, #0
 800169a:	d157      	bne.n	800174c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800169c:	2301      	movs	r3, #1
 800169e:	e242      	b.n	8001b26 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	685b      	ldr	r3, [r3, #4]
 80016a4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80016a8:	d106      	bne.n	80016b8 <HAL_RCC_OscConfig+0x74>
 80016aa:	4b76      	ldr	r3, [pc, #472]	; (8001884 <HAL_RCC_OscConfig+0x240>)
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	4a75      	ldr	r2, [pc, #468]	; (8001884 <HAL_RCC_OscConfig+0x240>)
 80016b0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80016b4:	6013      	str	r3, [r2, #0]
 80016b6:	e01d      	b.n	80016f4 <HAL_RCC_OscConfig+0xb0>
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	685b      	ldr	r3, [r3, #4]
 80016bc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80016c0:	d10c      	bne.n	80016dc <HAL_RCC_OscConfig+0x98>
 80016c2:	4b70      	ldr	r3, [pc, #448]	; (8001884 <HAL_RCC_OscConfig+0x240>)
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	4a6f      	ldr	r2, [pc, #444]	; (8001884 <HAL_RCC_OscConfig+0x240>)
 80016c8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80016cc:	6013      	str	r3, [r2, #0]
 80016ce:	4b6d      	ldr	r3, [pc, #436]	; (8001884 <HAL_RCC_OscConfig+0x240>)
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	4a6c      	ldr	r2, [pc, #432]	; (8001884 <HAL_RCC_OscConfig+0x240>)
 80016d4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80016d8:	6013      	str	r3, [r2, #0]
 80016da:	e00b      	b.n	80016f4 <HAL_RCC_OscConfig+0xb0>
 80016dc:	4b69      	ldr	r3, [pc, #420]	; (8001884 <HAL_RCC_OscConfig+0x240>)
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	4a68      	ldr	r2, [pc, #416]	; (8001884 <HAL_RCC_OscConfig+0x240>)
 80016e2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80016e6:	6013      	str	r3, [r2, #0]
 80016e8:	4b66      	ldr	r3, [pc, #408]	; (8001884 <HAL_RCC_OscConfig+0x240>)
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	4a65      	ldr	r2, [pc, #404]	; (8001884 <HAL_RCC_OscConfig+0x240>)
 80016ee:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80016f2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	685b      	ldr	r3, [r3, #4]
 80016f8:	2b00      	cmp	r3, #0
 80016fa:	d013      	beq.n	8001724 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016fc:	f7ff fc54 	bl	8000fa8 <HAL_GetTick>
 8001700:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001702:	e008      	b.n	8001716 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001704:	f7ff fc50 	bl	8000fa8 <HAL_GetTick>
 8001708:	4602      	mov	r2, r0
 800170a:	693b      	ldr	r3, [r7, #16]
 800170c:	1ad3      	subs	r3, r2, r3
 800170e:	2b64      	cmp	r3, #100	; 0x64
 8001710:	d901      	bls.n	8001716 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001712:	2303      	movs	r3, #3
 8001714:	e207      	b.n	8001b26 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001716:	4b5b      	ldr	r3, [pc, #364]	; (8001884 <HAL_RCC_OscConfig+0x240>)
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800171e:	2b00      	cmp	r3, #0
 8001720:	d0f0      	beq.n	8001704 <HAL_RCC_OscConfig+0xc0>
 8001722:	e014      	b.n	800174e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001724:	f7ff fc40 	bl	8000fa8 <HAL_GetTick>
 8001728:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800172a:	e008      	b.n	800173e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800172c:	f7ff fc3c 	bl	8000fa8 <HAL_GetTick>
 8001730:	4602      	mov	r2, r0
 8001732:	693b      	ldr	r3, [r7, #16]
 8001734:	1ad3      	subs	r3, r2, r3
 8001736:	2b64      	cmp	r3, #100	; 0x64
 8001738:	d901      	bls.n	800173e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800173a:	2303      	movs	r3, #3
 800173c:	e1f3      	b.n	8001b26 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800173e:	4b51      	ldr	r3, [pc, #324]	; (8001884 <HAL_RCC_OscConfig+0x240>)
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001746:	2b00      	cmp	r3, #0
 8001748:	d1f0      	bne.n	800172c <HAL_RCC_OscConfig+0xe8>
 800174a:	e000      	b.n	800174e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800174c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	f003 0302 	and.w	r3, r3, #2
 8001756:	2b00      	cmp	r3, #0
 8001758:	d063      	beq.n	8001822 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800175a:	4b4a      	ldr	r3, [pc, #296]	; (8001884 <HAL_RCC_OscConfig+0x240>)
 800175c:	689b      	ldr	r3, [r3, #8]
 800175e:	f003 030c 	and.w	r3, r3, #12
 8001762:	2b00      	cmp	r3, #0
 8001764:	d00b      	beq.n	800177e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001766:	4b47      	ldr	r3, [pc, #284]	; (8001884 <HAL_RCC_OscConfig+0x240>)
 8001768:	689b      	ldr	r3, [r3, #8]
 800176a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800176e:	2b08      	cmp	r3, #8
 8001770:	d11c      	bne.n	80017ac <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001772:	4b44      	ldr	r3, [pc, #272]	; (8001884 <HAL_RCC_OscConfig+0x240>)
 8001774:	685b      	ldr	r3, [r3, #4]
 8001776:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800177a:	2b00      	cmp	r3, #0
 800177c:	d116      	bne.n	80017ac <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800177e:	4b41      	ldr	r3, [pc, #260]	; (8001884 <HAL_RCC_OscConfig+0x240>)
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	f003 0302 	and.w	r3, r3, #2
 8001786:	2b00      	cmp	r3, #0
 8001788:	d005      	beq.n	8001796 <HAL_RCC_OscConfig+0x152>
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	68db      	ldr	r3, [r3, #12]
 800178e:	2b01      	cmp	r3, #1
 8001790:	d001      	beq.n	8001796 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001792:	2301      	movs	r3, #1
 8001794:	e1c7      	b.n	8001b26 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001796:	4b3b      	ldr	r3, [pc, #236]	; (8001884 <HAL_RCC_OscConfig+0x240>)
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	691b      	ldr	r3, [r3, #16]
 80017a2:	00db      	lsls	r3, r3, #3
 80017a4:	4937      	ldr	r1, [pc, #220]	; (8001884 <HAL_RCC_OscConfig+0x240>)
 80017a6:	4313      	orrs	r3, r2
 80017a8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80017aa:	e03a      	b.n	8001822 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	68db      	ldr	r3, [r3, #12]
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	d020      	beq.n	80017f6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80017b4:	4b34      	ldr	r3, [pc, #208]	; (8001888 <HAL_RCC_OscConfig+0x244>)
 80017b6:	2201      	movs	r2, #1
 80017b8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017ba:	f7ff fbf5 	bl	8000fa8 <HAL_GetTick>
 80017be:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80017c0:	e008      	b.n	80017d4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80017c2:	f7ff fbf1 	bl	8000fa8 <HAL_GetTick>
 80017c6:	4602      	mov	r2, r0
 80017c8:	693b      	ldr	r3, [r7, #16]
 80017ca:	1ad3      	subs	r3, r2, r3
 80017cc:	2b02      	cmp	r3, #2
 80017ce:	d901      	bls.n	80017d4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80017d0:	2303      	movs	r3, #3
 80017d2:	e1a8      	b.n	8001b26 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80017d4:	4b2b      	ldr	r3, [pc, #172]	; (8001884 <HAL_RCC_OscConfig+0x240>)
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	f003 0302 	and.w	r3, r3, #2
 80017dc:	2b00      	cmp	r3, #0
 80017de:	d0f0      	beq.n	80017c2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80017e0:	4b28      	ldr	r3, [pc, #160]	; (8001884 <HAL_RCC_OscConfig+0x240>)
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	691b      	ldr	r3, [r3, #16]
 80017ec:	00db      	lsls	r3, r3, #3
 80017ee:	4925      	ldr	r1, [pc, #148]	; (8001884 <HAL_RCC_OscConfig+0x240>)
 80017f0:	4313      	orrs	r3, r2
 80017f2:	600b      	str	r3, [r1, #0]
 80017f4:	e015      	b.n	8001822 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80017f6:	4b24      	ldr	r3, [pc, #144]	; (8001888 <HAL_RCC_OscConfig+0x244>)
 80017f8:	2200      	movs	r2, #0
 80017fa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017fc:	f7ff fbd4 	bl	8000fa8 <HAL_GetTick>
 8001800:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001802:	e008      	b.n	8001816 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001804:	f7ff fbd0 	bl	8000fa8 <HAL_GetTick>
 8001808:	4602      	mov	r2, r0
 800180a:	693b      	ldr	r3, [r7, #16]
 800180c:	1ad3      	subs	r3, r2, r3
 800180e:	2b02      	cmp	r3, #2
 8001810:	d901      	bls.n	8001816 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001812:	2303      	movs	r3, #3
 8001814:	e187      	b.n	8001b26 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001816:	4b1b      	ldr	r3, [pc, #108]	; (8001884 <HAL_RCC_OscConfig+0x240>)
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	f003 0302 	and.w	r3, r3, #2
 800181e:	2b00      	cmp	r3, #0
 8001820:	d1f0      	bne.n	8001804 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	f003 0308 	and.w	r3, r3, #8
 800182a:	2b00      	cmp	r3, #0
 800182c:	d036      	beq.n	800189c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	695b      	ldr	r3, [r3, #20]
 8001832:	2b00      	cmp	r3, #0
 8001834:	d016      	beq.n	8001864 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001836:	4b15      	ldr	r3, [pc, #84]	; (800188c <HAL_RCC_OscConfig+0x248>)
 8001838:	2201      	movs	r2, #1
 800183a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800183c:	f7ff fbb4 	bl	8000fa8 <HAL_GetTick>
 8001840:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001842:	e008      	b.n	8001856 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001844:	f7ff fbb0 	bl	8000fa8 <HAL_GetTick>
 8001848:	4602      	mov	r2, r0
 800184a:	693b      	ldr	r3, [r7, #16]
 800184c:	1ad3      	subs	r3, r2, r3
 800184e:	2b02      	cmp	r3, #2
 8001850:	d901      	bls.n	8001856 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001852:	2303      	movs	r3, #3
 8001854:	e167      	b.n	8001b26 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001856:	4b0b      	ldr	r3, [pc, #44]	; (8001884 <HAL_RCC_OscConfig+0x240>)
 8001858:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800185a:	f003 0302 	and.w	r3, r3, #2
 800185e:	2b00      	cmp	r3, #0
 8001860:	d0f0      	beq.n	8001844 <HAL_RCC_OscConfig+0x200>
 8001862:	e01b      	b.n	800189c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001864:	4b09      	ldr	r3, [pc, #36]	; (800188c <HAL_RCC_OscConfig+0x248>)
 8001866:	2200      	movs	r2, #0
 8001868:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800186a:	f7ff fb9d 	bl	8000fa8 <HAL_GetTick>
 800186e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001870:	e00e      	b.n	8001890 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001872:	f7ff fb99 	bl	8000fa8 <HAL_GetTick>
 8001876:	4602      	mov	r2, r0
 8001878:	693b      	ldr	r3, [r7, #16]
 800187a:	1ad3      	subs	r3, r2, r3
 800187c:	2b02      	cmp	r3, #2
 800187e:	d907      	bls.n	8001890 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001880:	2303      	movs	r3, #3
 8001882:	e150      	b.n	8001b26 <HAL_RCC_OscConfig+0x4e2>
 8001884:	40023800 	.word	0x40023800
 8001888:	42470000 	.word	0x42470000
 800188c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001890:	4b88      	ldr	r3, [pc, #544]	; (8001ab4 <HAL_RCC_OscConfig+0x470>)
 8001892:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001894:	f003 0302 	and.w	r3, r3, #2
 8001898:	2b00      	cmp	r3, #0
 800189a:	d1ea      	bne.n	8001872 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	f003 0304 	and.w	r3, r3, #4
 80018a4:	2b00      	cmp	r3, #0
 80018a6:	f000 8097 	beq.w	80019d8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80018aa:	2300      	movs	r3, #0
 80018ac:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80018ae:	4b81      	ldr	r3, [pc, #516]	; (8001ab4 <HAL_RCC_OscConfig+0x470>)
 80018b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	d10f      	bne.n	80018da <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80018ba:	2300      	movs	r3, #0
 80018bc:	60bb      	str	r3, [r7, #8]
 80018be:	4b7d      	ldr	r3, [pc, #500]	; (8001ab4 <HAL_RCC_OscConfig+0x470>)
 80018c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018c2:	4a7c      	ldr	r2, [pc, #496]	; (8001ab4 <HAL_RCC_OscConfig+0x470>)
 80018c4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80018c8:	6413      	str	r3, [r2, #64]	; 0x40
 80018ca:	4b7a      	ldr	r3, [pc, #488]	; (8001ab4 <HAL_RCC_OscConfig+0x470>)
 80018cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018d2:	60bb      	str	r3, [r7, #8]
 80018d4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80018d6:	2301      	movs	r3, #1
 80018d8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80018da:	4b77      	ldr	r3, [pc, #476]	; (8001ab8 <HAL_RCC_OscConfig+0x474>)
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	d118      	bne.n	8001918 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80018e6:	4b74      	ldr	r3, [pc, #464]	; (8001ab8 <HAL_RCC_OscConfig+0x474>)
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	4a73      	ldr	r2, [pc, #460]	; (8001ab8 <HAL_RCC_OscConfig+0x474>)
 80018ec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80018f0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80018f2:	f7ff fb59 	bl	8000fa8 <HAL_GetTick>
 80018f6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80018f8:	e008      	b.n	800190c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80018fa:	f7ff fb55 	bl	8000fa8 <HAL_GetTick>
 80018fe:	4602      	mov	r2, r0
 8001900:	693b      	ldr	r3, [r7, #16]
 8001902:	1ad3      	subs	r3, r2, r3
 8001904:	2b02      	cmp	r3, #2
 8001906:	d901      	bls.n	800190c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001908:	2303      	movs	r3, #3
 800190a:	e10c      	b.n	8001b26 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800190c:	4b6a      	ldr	r3, [pc, #424]	; (8001ab8 <HAL_RCC_OscConfig+0x474>)
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001914:	2b00      	cmp	r3, #0
 8001916:	d0f0      	beq.n	80018fa <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	689b      	ldr	r3, [r3, #8]
 800191c:	2b01      	cmp	r3, #1
 800191e:	d106      	bne.n	800192e <HAL_RCC_OscConfig+0x2ea>
 8001920:	4b64      	ldr	r3, [pc, #400]	; (8001ab4 <HAL_RCC_OscConfig+0x470>)
 8001922:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001924:	4a63      	ldr	r2, [pc, #396]	; (8001ab4 <HAL_RCC_OscConfig+0x470>)
 8001926:	f043 0301 	orr.w	r3, r3, #1
 800192a:	6713      	str	r3, [r2, #112]	; 0x70
 800192c:	e01c      	b.n	8001968 <HAL_RCC_OscConfig+0x324>
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	689b      	ldr	r3, [r3, #8]
 8001932:	2b05      	cmp	r3, #5
 8001934:	d10c      	bne.n	8001950 <HAL_RCC_OscConfig+0x30c>
 8001936:	4b5f      	ldr	r3, [pc, #380]	; (8001ab4 <HAL_RCC_OscConfig+0x470>)
 8001938:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800193a:	4a5e      	ldr	r2, [pc, #376]	; (8001ab4 <HAL_RCC_OscConfig+0x470>)
 800193c:	f043 0304 	orr.w	r3, r3, #4
 8001940:	6713      	str	r3, [r2, #112]	; 0x70
 8001942:	4b5c      	ldr	r3, [pc, #368]	; (8001ab4 <HAL_RCC_OscConfig+0x470>)
 8001944:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001946:	4a5b      	ldr	r2, [pc, #364]	; (8001ab4 <HAL_RCC_OscConfig+0x470>)
 8001948:	f043 0301 	orr.w	r3, r3, #1
 800194c:	6713      	str	r3, [r2, #112]	; 0x70
 800194e:	e00b      	b.n	8001968 <HAL_RCC_OscConfig+0x324>
 8001950:	4b58      	ldr	r3, [pc, #352]	; (8001ab4 <HAL_RCC_OscConfig+0x470>)
 8001952:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001954:	4a57      	ldr	r2, [pc, #348]	; (8001ab4 <HAL_RCC_OscConfig+0x470>)
 8001956:	f023 0301 	bic.w	r3, r3, #1
 800195a:	6713      	str	r3, [r2, #112]	; 0x70
 800195c:	4b55      	ldr	r3, [pc, #340]	; (8001ab4 <HAL_RCC_OscConfig+0x470>)
 800195e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001960:	4a54      	ldr	r2, [pc, #336]	; (8001ab4 <HAL_RCC_OscConfig+0x470>)
 8001962:	f023 0304 	bic.w	r3, r3, #4
 8001966:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	689b      	ldr	r3, [r3, #8]
 800196c:	2b00      	cmp	r3, #0
 800196e:	d015      	beq.n	800199c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001970:	f7ff fb1a 	bl	8000fa8 <HAL_GetTick>
 8001974:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001976:	e00a      	b.n	800198e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001978:	f7ff fb16 	bl	8000fa8 <HAL_GetTick>
 800197c:	4602      	mov	r2, r0
 800197e:	693b      	ldr	r3, [r7, #16]
 8001980:	1ad3      	subs	r3, r2, r3
 8001982:	f241 3288 	movw	r2, #5000	; 0x1388
 8001986:	4293      	cmp	r3, r2
 8001988:	d901      	bls.n	800198e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800198a:	2303      	movs	r3, #3
 800198c:	e0cb      	b.n	8001b26 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800198e:	4b49      	ldr	r3, [pc, #292]	; (8001ab4 <HAL_RCC_OscConfig+0x470>)
 8001990:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001992:	f003 0302 	and.w	r3, r3, #2
 8001996:	2b00      	cmp	r3, #0
 8001998:	d0ee      	beq.n	8001978 <HAL_RCC_OscConfig+0x334>
 800199a:	e014      	b.n	80019c6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800199c:	f7ff fb04 	bl	8000fa8 <HAL_GetTick>
 80019a0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80019a2:	e00a      	b.n	80019ba <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80019a4:	f7ff fb00 	bl	8000fa8 <HAL_GetTick>
 80019a8:	4602      	mov	r2, r0
 80019aa:	693b      	ldr	r3, [r7, #16]
 80019ac:	1ad3      	subs	r3, r2, r3
 80019ae:	f241 3288 	movw	r2, #5000	; 0x1388
 80019b2:	4293      	cmp	r3, r2
 80019b4:	d901      	bls.n	80019ba <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80019b6:	2303      	movs	r3, #3
 80019b8:	e0b5      	b.n	8001b26 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80019ba:	4b3e      	ldr	r3, [pc, #248]	; (8001ab4 <HAL_RCC_OscConfig+0x470>)
 80019bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80019be:	f003 0302 	and.w	r3, r3, #2
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d1ee      	bne.n	80019a4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80019c6:	7dfb      	ldrb	r3, [r7, #23]
 80019c8:	2b01      	cmp	r3, #1
 80019ca:	d105      	bne.n	80019d8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80019cc:	4b39      	ldr	r3, [pc, #228]	; (8001ab4 <HAL_RCC_OscConfig+0x470>)
 80019ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019d0:	4a38      	ldr	r2, [pc, #224]	; (8001ab4 <HAL_RCC_OscConfig+0x470>)
 80019d2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80019d6:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	699b      	ldr	r3, [r3, #24]
 80019dc:	2b00      	cmp	r3, #0
 80019de:	f000 80a1 	beq.w	8001b24 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80019e2:	4b34      	ldr	r3, [pc, #208]	; (8001ab4 <HAL_RCC_OscConfig+0x470>)
 80019e4:	689b      	ldr	r3, [r3, #8]
 80019e6:	f003 030c 	and.w	r3, r3, #12
 80019ea:	2b08      	cmp	r3, #8
 80019ec:	d05c      	beq.n	8001aa8 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	699b      	ldr	r3, [r3, #24]
 80019f2:	2b02      	cmp	r3, #2
 80019f4:	d141      	bne.n	8001a7a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80019f6:	4b31      	ldr	r3, [pc, #196]	; (8001abc <HAL_RCC_OscConfig+0x478>)
 80019f8:	2200      	movs	r2, #0
 80019fa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019fc:	f7ff fad4 	bl	8000fa8 <HAL_GetTick>
 8001a00:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001a02:	e008      	b.n	8001a16 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001a04:	f7ff fad0 	bl	8000fa8 <HAL_GetTick>
 8001a08:	4602      	mov	r2, r0
 8001a0a:	693b      	ldr	r3, [r7, #16]
 8001a0c:	1ad3      	subs	r3, r2, r3
 8001a0e:	2b02      	cmp	r3, #2
 8001a10:	d901      	bls.n	8001a16 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001a12:	2303      	movs	r3, #3
 8001a14:	e087      	b.n	8001b26 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001a16:	4b27      	ldr	r3, [pc, #156]	; (8001ab4 <HAL_RCC_OscConfig+0x470>)
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	d1f0      	bne.n	8001a04 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	69da      	ldr	r2, [r3, #28]
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	6a1b      	ldr	r3, [r3, #32]
 8001a2a:	431a      	orrs	r2, r3
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a30:	019b      	lsls	r3, r3, #6
 8001a32:	431a      	orrs	r2, r3
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a38:	085b      	lsrs	r3, r3, #1
 8001a3a:	3b01      	subs	r3, #1
 8001a3c:	041b      	lsls	r3, r3, #16
 8001a3e:	431a      	orrs	r2, r3
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a44:	061b      	lsls	r3, r3, #24
 8001a46:	491b      	ldr	r1, [pc, #108]	; (8001ab4 <HAL_RCC_OscConfig+0x470>)
 8001a48:	4313      	orrs	r3, r2
 8001a4a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001a4c:	4b1b      	ldr	r3, [pc, #108]	; (8001abc <HAL_RCC_OscConfig+0x478>)
 8001a4e:	2201      	movs	r2, #1
 8001a50:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a52:	f7ff faa9 	bl	8000fa8 <HAL_GetTick>
 8001a56:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001a58:	e008      	b.n	8001a6c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001a5a:	f7ff faa5 	bl	8000fa8 <HAL_GetTick>
 8001a5e:	4602      	mov	r2, r0
 8001a60:	693b      	ldr	r3, [r7, #16]
 8001a62:	1ad3      	subs	r3, r2, r3
 8001a64:	2b02      	cmp	r3, #2
 8001a66:	d901      	bls.n	8001a6c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001a68:	2303      	movs	r3, #3
 8001a6a:	e05c      	b.n	8001b26 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001a6c:	4b11      	ldr	r3, [pc, #68]	; (8001ab4 <HAL_RCC_OscConfig+0x470>)
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	d0f0      	beq.n	8001a5a <HAL_RCC_OscConfig+0x416>
 8001a78:	e054      	b.n	8001b24 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001a7a:	4b10      	ldr	r3, [pc, #64]	; (8001abc <HAL_RCC_OscConfig+0x478>)
 8001a7c:	2200      	movs	r2, #0
 8001a7e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a80:	f7ff fa92 	bl	8000fa8 <HAL_GetTick>
 8001a84:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001a86:	e008      	b.n	8001a9a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001a88:	f7ff fa8e 	bl	8000fa8 <HAL_GetTick>
 8001a8c:	4602      	mov	r2, r0
 8001a8e:	693b      	ldr	r3, [r7, #16]
 8001a90:	1ad3      	subs	r3, r2, r3
 8001a92:	2b02      	cmp	r3, #2
 8001a94:	d901      	bls.n	8001a9a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001a96:	2303      	movs	r3, #3
 8001a98:	e045      	b.n	8001b26 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001a9a:	4b06      	ldr	r3, [pc, #24]	; (8001ab4 <HAL_RCC_OscConfig+0x470>)
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	d1f0      	bne.n	8001a88 <HAL_RCC_OscConfig+0x444>
 8001aa6:	e03d      	b.n	8001b24 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	699b      	ldr	r3, [r3, #24]
 8001aac:	2b01      	cmp	r3, #1
 8001aae:	d107      	bne.n	8001ac0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001ab0:	2301      	movs	r3, #1
 8001ab2:	e038      	b.n	8001b26 <HAL_RCC_OscConfig+0x4e2>
 8001ab4:	40023800 	.word	0x40023800
 8001ab8:	40007000 	.word	0x40007000
 8001abc:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001ac0:	4b1b      	ldr	r3, [pc, #108]	; (8001b30 <HAL_RCC_OscConfig+0x4ec>)
 8001ac2:	685b      	ldr	r3, [r3, #4]
 8001ac4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	699b      	ldr	r3, [r3, #24]
 8001aca:	2b01      	cmp	r3, #1
 8001acc:	d028      	beq.n	8001b20 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001ace:	68fb      	ldr	r3, [r7, #12]
 8001ad0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001ad8:	429a      	cmp	r2, r3
 8001ada:	d121      	bne.n	8001b20 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001adc:	68fb      	ldr	r3, [r7, #12]
 8001ade:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001ae6:	429a      	cmp	r2, r3
 8001ae8:	d11a      	bne.n	8001b20 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001aea:	68fa      	ldr	r2, [r7, #12]
 8001aec:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001af0:	4013      	ands	r3, r2
 8001af2:	687a      	ldr	r2, [r7, #4]
 8001af4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001af6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001af8:	4293      	cmp	r3, r2
 8001afa:	d111      	bne.n	8001b20 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001afc:	68fb      	ldr	r3, [r7, #12]
 8001afe:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b06:	085b      	lsrs	r3, r3, #1
 8001b08:	3b01      	subs	r3, #1
 8001b0a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001b0c:	429a      	cmp	r2, r3
 8001b0e:	d107      	bne.n	8001b20 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001b10:	68fb      	ldr	r3, [r7, #12]
 8001b12:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b1a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001b1c:	429a      	cmp	r2, r3
 8001b1e:	d001      	beq.n	8001b24 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8001b20:	2301      	movs	r3, #1
 8001b22:	e000      	b.n	8001b26 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001b24:	2300      	movs	r3, #0
}
 8001b26:	4618      	mov	r0, r3
 8001b28:	3718      	adds	r7, #24
 8001b2a:	46bd      	mov	sp, r7
 8001b2c:	bd80      	pop	{r7, pc}
 8001b2e:	bf00      	nop
 8001b30:	40023800 	.word	0x40023800

08001b34 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001b34:	b580      	push	{r7, lr}
 8001b36:	b084      	sub	sp, #16
 8001b38:	af00      	add	r7, sp, #0
 8001b3a:	6078      	str	r0, [r7, #4]
 8001b3c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	d101      	bne.n	8001b48 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001b44:	2301      	movs	r3, #1
 8001b46:	e0cc      	b.n	8001ce2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001b48:	4b68      	ldr	r3, [pc, #416]	; (8001cec <HAL_RCC_ClockConfig+0x1b8>)
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	f003 0307 	and.w	r3, r3, #7
 8001b50:	683a      	ldr	r2, [r7, #0]
 8001b52:	429a      	cmp	r2, r3
 8001b54:	d90c      	bls.n	8001b70 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b56:	4b65      	ldr	r3, [pc, #404]	; (8001cec <HAL_RCC_ClockConfig+0x1b8>)
 8001b58:	683a      	ldr	r2, [r7, #0]
 8001b5a:	b2d2      	uxtb	r2, r2
 8001b5c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b5e:	4b63      	ldr	r3, [pc, #396]	; (8001cec <HAL_RCC_ClockConfig+0x1b8>)
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	f003 0307 	and.w	r3, r3, #7
 8001b66:	683a      	ldr	r2, [r7, #0]
 8001b68:	429a      	cmp	r2, r3
 8001b6a:	d001      	beq.n	8001b70 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001b6c:	2301      	movs	r3, #1
 8001b6e:	e0b8      	b.n	8001ce2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	f003 0302 	and.w	r3, r3, #2
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	d020      	beq.n	8001bbe <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	f003 0304 	and.w	r3, r3, #4
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	d005      	beq.n	8001b94 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001b88:	4b59      	ldr	r3, [pc, #356]	; (8001cf0 <HAL_RCC_ClockConfig+0x1bc>)
 8001b8a:	689b      	ldr	r3, [r3, #8]
 8001b8c:	4a58      	ldr	r2, [pc, #352]	; (8001cf0 <HAL_RCC_ClockConfig+0x1bc>)
 8001b8e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001b92:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	f003 0308 	and.w	r3, r3, #8
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	d005      	beq.n	8001bac <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001ba0:	4b53      	ldr	r3, [pc, #332]	; (8001cf0 <HAL_RCC_ClockConfig+0x1bc>)
 8001ba2:	689b      	ldr	r3, [r3, #8]
 8001ba4:	4a52      	ldr	r2, [pc, #328]	; (8001cf0 <HAL_RCC_ClockConfig+0x1bc>)
 8001ba6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001baa:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001bac:	4b50      	ldr	r3, [pc, #320]	; (8001cf0 <HAL_RCC_ClockConfig+0x1bc>)
 8001bae:	689b      	ldr	r3, [r3, #8]
 8001bb0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	689b      	ldr	r3, [r3, #8]
 8001bb8:	494d      	ldr	r1, [pc, #308]	; (8001cf0 <HAL_RCC_ClockConfig+0x1bc>)
 8001bba:	4313      	orrs	r3, r2
 8001bbc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	f003 0301 	and.w	r3, r3, #1
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	d044      	beq.n	8001c54 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	685b      	ldr	r3, [r3, #4]
 8001bce:	2b01      	cmp	r3, #1
 8001bd0:	d107      	bne.n	8001be2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001bd2:	4b47      	ldr	r3, [pc, #284]	; (8001cf0 <HAL_RCC_ClockConfig+0x1bc>)
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d119      	bne.n	8001c12 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001bde:	2301      	movs	r3, #1
 8001be0:	e07f      	b.n	8001ce2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	685b      	ldr	r3, [r3, #4]
 8001be6:	2b02      	cmp	r3, #2
 8001be8:	d003      	beq.n	8001bf2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001bee:	2b03      	cmp	r3, #3
 8001bf0:	d107      	bne.n	8001c02 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001bf2:	4b3f      	ldr	r3, [pc, #252]	; (8001cf0 <HAL_RCC_ClockConfig+0x1bc>)
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d109      	bne.n	8001c12 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001bfe:	2301      	movs	r3, #1
 8001c00:	e06f      	b.n	8001ce2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c02:	4b3b      	ldr	r3, [pc, #236]	; (8001cf0 <HAL_RCC_ClockConfig+0x1bc>)
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	f003 0302 	and.w	r3, r3, #2
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d101      	bne.n	8001c12 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001c0e:	2301      	movs	r3, #1
 8001c10:	e067      	b.n	8001ce2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001c12:	4b37      	ldr	r3, [pc, #220]	; (8001cf0 <HAL_RCC_ClockConfig+0x1bc>)
 8001c14:	689b      	ldr	r3, [r3, #8]
 8001c16:	f023 0203 	bic.w	r2, r3, #3
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	685b      	ldr	r3, [r3, #4]
 8001c1e:	4934      	ldr	r1, [pc, #208]	; (8001cf0 <HAL_RCC_ClockConfig+0x1bc>)
 8001c20:	4313      	orrs	r3, r2
 8001c22:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001c24:	f7ff f9c0 	bl	8000fa8 <HAL_GetTick>
 8001c28:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001c2a:	e00a      	b.n	8001c42 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001c2c:	f7ff f9bc 	bl	8000fa8 <HAL_GetTick>
 8001c30:	4602      	mov	r2, r0
 8001c32:	68fb      	ldr	r3, [r7, #12]
 8001c34:	1ad3      	subs	r3, r2, r3
 8001c36:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c3a:	4293      	cmp	r3, r2
 8001c3c:	d901      	bls.n	8001c42 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001c3e:	2303      	movs	r3, #3
 8001c40:	e04f      	b.n	8001ce2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001c42:	4b2b      	ldr	r3, [pc, #172]	; (8001cf0 <HAL_RCC_ClockConfig+0x1bc>)
 8001c44:	689b      	ldr	r3, [r3, #8]
 8001c46:	f003 020c 	and.w	r2, r3, #12
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	685b      	ldr	r3, [r3, #4]
 8001c4e:	009b      	lsls	r3, r3, #2
 8001c50:	429a      	cmp	r2, r3
 8001c52:	d1eb      	bne.n	8001c2c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001c54:	4b25      	ldr	r3, [pc, #148]	; (8001cec <HAL_RCC_ClockConfig+0x1b8>)
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	f003 0307 	and.w	r3, r3, #7
 8001c5c:	683a      	ldr	r2, [r7, #0]
 8001c5e:	429a      	cmp	r2, r3
 8001c60:	d20c      	bcs.n	8001c7c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c62:	4b22      	ldr	r3, [pc, #136]	; (8001cec <HAL_RCC_ClockConfig+0x1b8>)
 8001c64:	683a      	ldr	r2, [r7, #0]
 8001c66:	b2d2      	uxtb	r2, r2
 8001c68:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c6a:	4b20      	ldr	r3, [pc, #128]	; (8001cec <HAL_RCC_ClockConfig+0x1b8>)
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	f003 0307 	and.w	r3, r3, #7
 8001c72:	683a      	ldr	r2, [r7, #0]
 8001c74:	429a      	cmp	r2, r3
 8001c76:	d001      	beq.n	8001c7c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001c78:	2301      	movs	r3, #1
 8001c7a:	e032      	b.n	8001ce2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	f003 0304 	and.w	r3, r3, #4
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	d008      	beq.n	8001c9a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001c88:	4b19      	ldr	r3, [pc, #100]	; (8001cf0 <HAL_RCC_ClockConfig+0x1bc>)
 8001c8a:	689b      	ldr	r3, [r3, #8]
 8001c8c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	68db      	ldr	r3, [r3, #12]
 8001c94:	4916      	ldr	r1, [pc, #88]	; (8001cf0 <HAL_RCC_ClockConfig+0x1bc>)
 8001c96:	4313      	orrs	r3, r2
 8001c98:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	f003 0308 	and.w	r3, r3, #8
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d009      	beq.n	8001cba <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001ca6:	4b12      	ldr	r3, [pc, #72]	; (8001cf0 <HAL_RCC_ClockConfig+0x1bc>)
 8001ca8:	689b      	ldr	r3, [r3, #8]
 8001caa:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	691b      	ldr	r3, [r3, #16]
 8001cb2:	00db      	lsls	r3, r3, #3
 8001cb4:	490e      	ldr	r1, [pc, #56]	; (8001cf0 <HAL_RCC_ClockConfig+0x1bc>)
 8001cb6:	4313      	orrs	r3, r2
 8001cb8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001cba:	f000 f821 	bl	8001d00 <HAL_RCC_GetSysClockFreq>
 8001cbe:	4602      	mov	r2, r0
 8001cc0:	4b0b      	ldr	r3, [pc, #44]	; (8001cf0 <HAL_RCC_ClockConfig+0x1bc>)
 8001cc2:	689b      	ldr	r3, [r3, #8]
 8001cc4:	091b      	lsrs	r3, r3, #4
 8001cc6:	f003 030f 	and.w	r3, r3, #15
 8001cca:	490a      	ldr	r1, [pc, #40]	; (8001cf4 <HAL_RCC_ClockConfig+0x1c0>)
 8001ccc:	5ccb      	ldrb	r3, [r1, r3]
 8001cce:	fa22 f303 	lsr.w	r3, r2, r3
 8001cd2:	4a09      	ldr	r2, [pc, #36]	; (8001cf8 <HAL_RCC_ClockConfig+0x1c4>)
 8001cd4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001cd6:	4b09      	ldr	r3, [pc, #36]	; (8001cfc <HAL_RCC_ClockConfig+0x1c8>)
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	4618      	mov	r0, r3
 8001cdc:	f7ff f920 	bl	8000f20 <HAL_InitTick>

  return HAL_OK;
 8001ce0:	2300      	movs	r3, #0
}
 8001ce2:	4618      	mov	r0, r3
 8001ce4:	3710      	adds	r7, #16
 8001ce6:	46bd      	mov	sp, r7
 8001ce8:	bd80      	pop	{r7, pc}
 8001cea:	bf00      	nop
 8001cec:	40023c00 	.word	0x40023c00
 8001cf0:	40023800 	.word	0x40023800
 8001cf4:	08004258 	.word	0x08004258
 8001cf8:	20000008 	.word	0x20000008
 8001cfc:	2000000c 	.word	0x2000000c

08001d00 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001d00:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001d04:	b094      	sub	sp, #80	; 0x50
 8001d06:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001d08:	2300      	movs	r3, #0
 8001d0a:	647b      	str	r3, [r7, #68]	; 0x44
 8001d0c:	2300      	movs	r3, #0
 8001d0e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001d10:	2300      	movs	r3, #0
 8001d12:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8001d14:	2300      	movs	r3, #0
 8001d16:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001d18:	4b79      	ldr	r3, [pc, #484]	; (8001f00 <HAL_RCC_GetSysClockFreq+0x200>)
 8001d1a:	689b      	ldr	r3, [r3, #8]
 8001d1c:	f003 030c 	and.w	r3, r3, #12
 8001d20:	2b08      	cmp	r3, #8
 8001d22:	d00d      	beq.n	8001d40 <HAL_RCC_GetSysClockFreq+0x40>
 8001d24:	2b08      	cmp	r3, #8
 8001d26:	f200 80e1 	bhi.w	8001eec <HAL_RCC_GetSysClockFreq+0x1ec>
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d002      	beq.n	8001d34 <HAL_RCC_GetSysClockFreq+0x34>
 8001d2e:	2b04      	cmp	r3, #4
 8001d30:	d003      	beq.n	8001d3a <HAL_RCC_GetSysClockFreq+0x3a>
 8001d32:	e0db      	b.n	8001eec <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001d34:	4b73      	ldr	r3, [pc, #460]	; (8001f04 <HAL_RCC_GetSysClockFreq+0x204>)
 8001d36:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8001d38:	e0db      	b.n	8001ef2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001d3a:	4b73      	ldr	r3, [pc, #460]	; (8001f08 <HAL_RCC_GetSysClockFreq+0x208>)
 8001d3c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001d3e:	e0d8      	b.n	8001ef2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001d40:	4b6f      	ldr	r3, [pc, #444]	; (8001f00 <HAL_RCC_GetSysClockFreq+0x200>)
 8001d42:	685b      	ldr	r3, [r3, #4]
 8001d44:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001d48:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001d4a:	4b6d      	ldr	r3, [pc, #436]	; (8001f00 <HAL_RCC_GetSysClockFreq+0x200>)
 8001d4c:	685b      	ldr	r3, [r3, #4]
 8001d4e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d063      	beq.n	8001e1e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001d56:	4b6a      	ldr	r3, [pc, #424]	; (8001f00 <HAL_RCC_GetSysClockFreq+0x200>)
 8001d58:	685b      	ldr	r3, [r3, #4]
 8001d5a:	099b      	lsrs	r3, r3, #6
 8001d5c:	2200      	movs	r2, #0
 8001d5e:	63bb      	str	r3, [r7, #56]	; 0x38
 8001d60:	63fa      	str	r2, [r7, #60]	; 0x3c
 8001d62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001d64:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001d68:	633b      	str	r3, [r7, #48]	; 0x30
 8001d6a:	2300      	movs	r3, #0
 8001d6c:	637b      	str	r3, [r7, #52]	; 0x34
 8001d6e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8001d72:	4622      	mov	r2, r4
 8001d74:	462b      	mov	r3, r5
 8001d76:	f04f 0000 	mov.w	r0, #0
 8001d7a:	f04f 0100 	mov.w	r1, #0
 8001d7e:	0159      	lsls	r1, r3, #5
 8001d80:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001d84:	0150      	lsls	r0, r2, #5
 8001d86:	4602      	mov	r2, r0
 8001d88:	460b      	mov	r3, r1
 8001d8a:	4621      	mov	r1, r4
 8001d8c:	1a51      	subs	r1, r2, r1
 8001d8e:	6139      	str	r1, [r7, #16]
 8001d90:	4629      	mov	r1, r5
 8001d92:	eb63 0301 	sbc.w	r3, r3, r1
 8001d96:	617b      	str	r3, [r7, #20]
 8001d98:	f04f 0200 	mov.w	r2, #0
 8001d9c:	f04f 0300 	mov.w	r3, #0
 8001da0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001da4:	4659      	mov	r1, fp
 8001da6:	018b      	lsls	r3, r1, #6
 8001da8:	4651      	mov	r1, sl
 8001daa:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001dae:	4651      	mov	r1, sl
 8001db0:	018a      	lsls	r2, r1, #6
 8001db2:	4651      	mov	r1, sl
 8001db4:	ebb2 0801 	subs.w	r8, r2, r1
 8001db8:	4659      	mov	r1, fp
 8001dba:	eb63 0901 	sbc.w	r9, r3, r1
 8001dbe:	f04f 0200 	mov.w	r2, #0
 8001dc2:	f04f 0300 	mov.w	r3, #0
 8001dc6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001dca:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001dce:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001dd2:	4690      	mov	r8, r2
 8001dd4:	4699      	mov	r9, r3
 8001dd6:	4623      	mov	r3, r4
 8001dd8:	eb18 0303 	adds.w	r3, r8, r3
 8001ddc:	60bb      	str	r3, [r7, #8]
 8001dde:	462b      	mov	r3, r5
 8001de0:	eb49 0303 	adc.w	r3, r9, r3
 8001de4:	60fb      	str	r3, [r7, #12]
 8001de6:	f04f 0200 	mov.w	r2, #0
 8001dea:	f04f 0300 	mov.w	r3, #0
 8001dee:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8001df2:	4629      	mov	r1, r5
 8001df4:	024b      	lsls	r3, r1, #9
 8001df6:	4621      	mov	r1, r4
 8001df8:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001dfc:	4621      	mov	r1, r4
 8001dfe:	024a      	lsls	r2, r1, #9
 8001e00:	4610      	mov	r0, r2
 8001e02:	4619      	mov	r1, r3
 8001e04:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001e06:	2200      	movs	r2, #0
 8001e08:	62bb      	str	r3, [r7, #40]	; 0x28
 8001e0a:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001e0c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001e10:	f7fe fa36 	bl	8000280 <__aeabi_uldivmod>
 8001e14:	4602      	mov	r2, r0
 8001e16:	460b      	mov	r3, r1
 8001e18:	4613      	mov	r3, r2
 8001e1a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001e1c:	e058      	b.n	8001ed0 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001e1e:	4b38      	ldr	r3, [pc, #224]	; (8001f00 <HAL_RCC_GetSysClockFreq+0x200>)
 8001e20:	685b      	ldr	r3, [r3, #4]
 8001e22:	099b      	lsrs	r3, r3, #6
 8001e24:	2200      	movs	r2, #0
 8001e26:	4618      	mov	r0, r3
 8001e28:	4611      	mov	r1, r2
 8001e2a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001e2e:	623b      	str	r3, [r7, #32]
 8001e30:	2300      	movs	r3, #0
 8001e32:	627b      	str	r3, [r7, #36]	; 0x24
 8001e34:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001e38:	4642      	mov	r2, r8
 8001e3a:	464b      	mov	r3, r9
 8001e3c:	f04f 0000 	mov.w	r0, #0
 8001e40:	f04f 0100 	mov.w	r1, #0
 8001e44:	0159      	lsls	r1, r3, #5
 8001e46:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001e4a:	0150      	lsls	r0, r2, #5
 8001e4c:	4602      	mov	r2, r0
 8001e4e:	460b      	mov	r3, r1
 8001e50:	4641      	mov	r1, r8
 8001e52:	ebb2 0a01 	subs.w	sl, r2, r1
 8001e56:	4649      	mov	r1, r9
 8001e58:	eb63 0b01 	sbc.w	fp, r3, r1
 8001e5c:	f04f 0200 	mov.w	r2, #0
 8001e60:	f04f 0300 	mov.w	r3, #0
 8001e64:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001e68:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001e6c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001e70:	ebb2 040a 	subs.w	r4, r2, sl
 8001e74:	eb63 050b 	sbc.w	r5, r3, fp
 8001e78:	f04f 0200 	mov.w	r2, #0
 8001e7c:	f04f 0300 	mov.w	r3, #0
 8001e80:	00eb      	lsls	r3, r5, #3
 8001e82:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001e86:	00e2      	lsls	r2, r4, #3
 8001e88:	4614      	mov	r4, r2
 8001e8a:	461d      	mov	r5, r3
 8001e8c:	4643      	mov	r3, r8
 8001e8e:	18e3      	adds	r3, r4, r3
 8001e90:	603b      	str	r3, [r7, #0]
 8001e92:	464b      	mov	r3, r9
 8001e94:	eb45 0303 	adc.w	r3, r5, r3
 8001e98:	607b      	str	r3, [r7, #4]
 8001e9a:	f04f 0200 	mov.w	r2, #0
 8001e9e:	f04f 0300 	mov.w	r3, #0
 8001ea2:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001ea6:	4629      	mov	r1, r5
 8001ea8:	028b      	lsls	r3, r1, #10
 8001eaa:	4621      	mov	r1, r4
 8001eac:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001eb0:	4621      	mov	r1, r4
 8001eb2:	028a      	lsls	r2, r1, #10
 8001eb4:	4610      	mov	r0, r2
 8001eb6:	4619      	mov	r1, r3
 8001eb8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001eba:	2200      	movs	r2, #0
 8001ebc:	61bb      	str	r3, [r7, #24]
 8001ebe:	61fa      	str	r2, [r7, #28]
 8001ec0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001ec4:	f7fe f9dc 	bl	8000280 <__aeabi_uldivmod>
 8001ec8:	4602      	mov	r2, r0
 8001eca:	460b      	mov	r3, r1
 8001ecc:	4613      	mov	r3, r2
 8001ece:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001ed0:	4b0b      	ldr	r3, [pc, #44]	; (8001f00 <HAL_RCC_GetSysClockFreq+0x200>)
 8001ed2:	685b      	ldr	r3, [r3, #4]
 8001ed4:	0c1b      	lsrs	r3, r3, #16
 8001ed6:	f003 0303 	and.w	r3, r3, #3
 8001eda:	3301      	adds	r3, #1
 8001edc:	005b      	lsls	r3, r3, #1
 8001ede:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8001ee0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001ee2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001ee4:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ee8:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001eea:	e002      	b.n	8001ef2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001eec:	4b05      	ldr	r3, [pc, #20]	; (8001f04 <HAL_RCC_GetSysClockFreq+0x204>)
 8001eee:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001ef0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001ef2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8001ef4:	4618      	mov	r0, r3
 8001ef6:	3750      	adds	r7, #80	; 0x50
 8001ef8:	46bd      	mov	sp, r7
 8001efa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001efe:	bf00      	nop
 8001f00:	40023800 	.word	0x40023800
 8001f04:	00f42400 	.word	0x00f42400
 8001f08:	007a1200 	.word	0x007a1200

08001f0c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001f0c:	b480      	push	{r7}
 8001f0e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001f10:	4b03      	ldr	r3, [pc, #12]	; (8001f20 <HAL_RCC_GetHCLKFreq+0x14>)
 8001f12:	681b      	ldr	r3, [r3, #0]
}
 8001f14:	4618      	mov	r0, r3
 8001f16:	46bd      	mov	sp, r7
 8001f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f1c:	4770      	bx	lr
 8001f1e:	bf00      	nop
 8001f20:	20000008 	.word	0x20000008

08001f24 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001f24:	b580      	push	{r7, lr}
 8001f26:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001f28:	f7ff fff0 	bl	8001f0c <HAL_RCC_GetHCLKFreq>
 8001f2c:	4602      	mov	r2, r0
 8001f2e:	4b05      	ldr	r3, [pc, #20]	; (8001f44 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001f30:	689b      	ldr	r3, [r3, #8]
 8001f32:	0a9b      	lsrs	r3, r3, #10
 8001f34:	f003 0307 	and.w	r3, r3, #7
 8001f38:	4903      	ldr	r1, [pc, #12]	; (8001f48 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001f3a:	5ccb      	ldrb	r3, [r1, r3]
 8001f3c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001f40:	4618      	mov	r0, r3
 8001f42:	bd80      	pop	{r7, pc}
 8001f44:	40023800 	.word	0x40023800
 8001f48:	08004268 	.word	0x08004268

08001f4c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001f4c:	b580      	push	{r7, lr}
 8001f4e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001f50:	f7ff ffdc 	bl	8001f0c <HAL_RCC_GetHCLKFreq>
 8001f54:	4602      	mov	r2, r0
 8001f56:	4b05      	ldr	r3, [pc, #20]	; (8001f6c <HAL_RCC_GetPCLK2Freq+0x20>)
 8001f58:	689b      	ldr	r3, [r3, #8]
 8001f5a:	0b5b      	lsrs	r3, r3, #13
 8001f5c:	f003 0307 	and.w	r3, r3, #7
 8001f60:	4903      	ldr	r1, [pc, #12]	; (8001f70 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001f62:	5ccb      	ldrb	r3, [r1, r3]
 8001f64:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001f68:	4618      	mov	r0, r3
 8001f6a:	bd80      	pop	{r7, pc}
 8001f6c:	40023800 	.word	0x40023800
 8001f70:	08004268 	.word	0x08004268

08001f74 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001f74:	b580      	push	{r7, lr}
 8001f76:	b082      	sub	sp, #8
 8001f78:	af00      	add	r7, sp, #0
 8001f7a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d101      	bne.n	8001f86 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001f82:	2301      	movs	r3, #1
 8001f84:	e041      	b.n	800200a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001f8c:	b2db      	uxtb	r3, r3
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d106      	bne.n	8001fa0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	2200      	movs	r2, #0
 8001f96:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001f9a:	6878      	ldr	r0, [r7, #4]
 8001f9c:	f7fe fe50 	bl	8000c40 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	2202      	movs	r2, #2
 8001fa4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	681a      	ldr	r2, [r3, #0]
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	3304      	adds	r3, #4
 8001fb0:	4619      	mov	r1, r3
 8001fb2:	4610      	mov	r0, r2
 8001fb4:	f000 fa88 	bl	80024c8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	2201      	movs	r2, #1
 8001fbc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	2201      	movs	r2, #1
 8001fc4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	2201      	movs	r2, #1
 8001fcc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	2201      	movs	r2, #1
 8001fd4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	2201      	movs	r2, #1
 8001fdc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	2201      	movs	r2, #1
 8001fe4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	2201      	movs	r2, #1
 8001fec:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	2201      	movs	r2, #1
 8001ff4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	2201      	movs	r2, #1
 8001ffc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	2201      	movs	r2, #1
 8002004:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002008:	2300      	movs	r3, #0
}
 800200a:	4618      	mov	r0, r3
 800200c:	3708      	adds	r7, #8
 800200e:	46bd      	mov	sp, r7
 8002010:	bd80      	pop	{r7, pc}
	...

08002014 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002014:	b480      	push	{r7}
 8002016:	b085      	sub	sp, #20
 8002018:	af00      	add	r7, sp, #0
 800201a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002022:	b2db      	uxtb	r3, r3
 8002024:	2b01      	cmp	r3, #1
 8002026:	d001      	beq.n	800202c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002028:	2301      	movs	r3, #1
 800202a:	e044      	b.n	80020b6 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	2202      	movs	r2, #2
 8002030:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	68da      	ldr	r2, [r3, #12]
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	f042 0201 	orr.w	r2, r2, #1
 8002042:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	4a1e      	ldr	r2, [pc, #120]	; (80020c4 <HAL_TIM_Base_Start_IT+0xb0>)
 800204a:	4293      	cmp	r3, r2
 800204c:	d018      	beq.n	8002080 <HAL_TIM_Base_Start_IT+0x6c>
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002056:	d013      	beq.n	8002080 <HAL_TIM_Base_Start_IT+0x6c>
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	4a1a      	ldr	r2, [pc, #104]	; (80020c8 <HAL_TIM_Base_Start_IT+0xb4>)
 800205e:	4293      	cmp	r3, r2
 8002060:	d00e      	beq.n	8002080 <HAL_TIM_Base_Start_IT+0x6c>
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	4a19      	ldr	r2, [pc, #100]	; (80020cc <HAL_TIM_Base_Start_IT+0xb8>)
 8002068:	4293      	cmp	r3, r2
 800206a:	d009      	beq.n	8002080 <HAL_TIM_Base_Start_IT+0x6c>
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	4a17      	ldr	r2, [pc, #92]	; (80020d0 <HAL_TIM_Base_Start_IT+0xbc>)
 8002072:	4293      	cmp	r3, r2
 8002074:	d004      	beq.n	8002080 <HAL_TIM_Base_Start_IT+0x6c>
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	4a16      	ldr	r2, [pc, #88]	; (80020d4 <HAL_TIM_Base_Start_IT+0xc0>)
 800207c:	4293      	cmp	r3, r2
 800207e:	d111      	bne.n	80020a4 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	689b      	ldr	r3, [r3, #8]
 8002086:	f003 0307 	and.w	r3, r3, #7
 800208a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800208c:	68fb      	ldr	r3, [r7, #12]
 800208e:	2b06      	cmp	r3, #6
 8002090:	d010      	beq.n	80020b4 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	681a      	ldr	r2, [r3, #0]
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	f042 0201 	orr.w	r2, r2, #1
 80020a0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80020a2:	e007      	b.n	80020b4 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	681a      	ldr	r2, [r3, #0]
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	f042 0201 	orr.w	r2, r2, #1
 80020b2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80020b4:	2300      	movs	r3, #0
}
 80020b6:	4618      	mov	r0, r3
 80020b8:	3714      	adds	r7, #20
 80020ba:	46bd      	mov	sp, r7
 80020bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c0:	4770      	bx	lr
 80020c2:	bf00      	nop
 80020c4:	40010000 	.word	0x40010000
 80020c8:	40000400 	.word	0x40000400
 80020cc:	40000800 	.word	0x40000800
 80020d0:	40000c00 	.word	0x40000c00
 80020d4:	40014000 	.word	0x40014000

080020d8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80020d8:	b580      	push	{r7, lr}
 80020da:	b082      	sub	sp, #8
 80020dc:	af00      	add	r7, sp, #0
 80020de:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	691b      	ldr	r3, [r3, #16]
 80020e6:	f003 0302 	and.w	r3, r3, #2
 80020ea:	2b02      	cmp	r3, #2
 80020ec:	d122      	bne.n	8002134 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	68db      	ldr	r3, [r3, #12]
 80020f4:	f003 0302 	and.w	r3, r3, #2
 80020f8:	2b02      	cmp	r3, #2
 80020fa:	d11b      	bne.n	8002134 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	f06f 0202 	mvn.w	r2, #2
 8002104:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	2201      	movs	r2, #1
 800210a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	699b      	ldr	r3, [r3, #24]
 8002112:	f003 0303 	and.w	r3, r3, #3
 8002116:	2b00      	cmp	r3, #0
 8002118:	d003      	beq.n	8002122 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800211a:	6878      	ldr	r0, [r7, #4]
 800211c:	f000 f9b5 	bl	800248a <HAL_TIM_IC_CaptureCallback>
 8002120:	e005      	b.n	800212e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002122:	6878      	ldr	r0, [r7, #4]
 8002124:	f000 f9a7 	bl	8002476 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002128:	6878      	ldr	r0, [r7, #4]
 800212a:	f000 f9b8 	bl	800249e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	2200      	movs	r2, #0
 8002132:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	691b      	ldr	r3, [r3, #16]
 800213a:	f003 0304 	and.w	r3, r3, #4
 800213e:	2b04      	cmp	r3, #4
 8002140:	d122      	bne.n	8002188 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	68db      	ldr	r3, [r3, #12]
 8002148:	f003 0304 	and.w	r3, r3, #4
 800214c:	2b04      	cmp	r3, #4
 800214e:	d11b      	bne.n	8002188 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	f06f 0204 	mvn.w	r2, #4
 8002158:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	2202      	movs	r2, #2
 800215e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	699b      	ldr	r3, [r3, #24]
 8002166:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800216a:	2b00      	cmp	r3, #0
 800216c:	d003      	beq.n	8002176 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800216e:	6878      	ldr	r0, [r7, #4]
 8002170:	f000 f98b 	bl	800248a <HAL_TIM_IC_CaptureCallback>
 8002174:	e005      	b.n	8002182 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002176:	6878      	ldr	r0, [r7, #4]
 8002178:	f000 f97d 	bl	8002476 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800217c:	6878      	ldr	r0, [r7, #4]
 800217e:	f000 f98e 	bl	800249e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	2200      	movs	r2, #0
 8002186:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	691b      	ldr	r3, [r3, #16]
 800218e:	f003 0308 	and.w	r3, r3, #8
 8002192:	2b08      	cmp	r3, #8
 8002194:	d122      	bne.n	80021dc <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	68db      	ldr	r3, [r3, #12]
 800219c:	f003 0308 	and.w	r3, r3, #8
 80021a0:	2b08      	cmp	r3, #8
 80021a2:	d11b      	bne.n	80021dc <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	f06f 0208 	mvn.w	r2, #8
 80021ac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	2204      	movs	r2, #4
 80021b2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	69db      	ldr	r3, [r3, #28]
 80021ba:	f003 0303 	and.w	r3, r3, #3
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d003      	beq.n	80021ca <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80021c2:	6878      	ldr	r0, [r7, #4]
 80021c4:	f000 f961 	bl	800248a <HAL_TIM_IC_CaptureCallback>
 80021c8:	e005      	b.n	80021d6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80021ca:	6878      	ldr	r0, [r7, #4]
 80021cc:	f000 f953 	bl	8002476 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80021d0:	6878      	ldr	r0, [r7, #4]
 80021d2:	f000 f964 	bl	800249e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	2200      	movs	r2, #0
 80021da:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	691b      	ldr	r3, [r3, #16]
 80021e2:	f003 0310 	and.w	r3, r3, #16
 80021e6:	2b10      	cmp	r3, #16
 80021e8:	d122      	bne.n	8002230 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	68db      	ldr	r3, [r3, #12]
 80021f0:	f003 0310 	and.w	r3, r3, #16
 80021f4:	2b10      	cmp	r3, #16
 80021f6:	d11b      	bne.n	8002230 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	f06f 0210 	mvn.w	r2, #16
 8002200:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	2208      	movs	r2, #8
 8002206:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	69db      	ldr	r3, [r3, #28]
 800220e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002212:	2b00      	cmp	r3, #0
 8002214:	d003      	beq.n	800221e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002216:	6878      	ldr	r0, [r7, #4]
 8002218:	f000 f937 	bl	800248a <HAL_TIM_IC_CaptureCallback>
 800221c:	e005      	b.n	800222a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800221e:	6878      	ldr	r0, [r7, #4]
 8002220:	f000 f929 	bl	8002476 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002224:	6878      	ldr	r0, [r7, #4]
 8002226:	f000 f93a 	bl	800249e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	2200      	movs	r2, #0
 800222e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	691b      	ldr	r3, [r3, #16]
 8002236:	f003 0301 	and.w	r3, r3, #1
 800223a:	2b01      	cmp	r3, #1
 800223c:	d10e      	bne.n	800225c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	68db      	ldr	r3, [r3, #12]
 8002244:	f003 0301 	and.w	r3, r3, #1
 8002248:	2b01      	cmp	r3, #1
 800224a:	d107      	bne.n	800225c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	f06f 0201 	mvn.w	r2, #1
 8002254:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002256:	6878      	ldr	r0, [r7, #4]
 8002258:	f7fe fa3c 	bl	80006d4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	691b      	ldr	r3, [r3, #16]
 8002262:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002266:	2b80      	cmp	r3, #128	; 0x80
 8002268:	d10e      	bne.n	8002288 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	68db      	ldr	r3, [r3, #12]
 8002270:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002274:	2b80      	cmp	r3, #128	; 0x80
 8002276:	d107      	bne.n	8002288 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002280:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002282:	6878      	ldr	r0, [r7, #4]
 8002284:	f000 fab2 	bl	80027ec <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	691b      	ldr	r3, [r3, #16]
 800228e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002292:	2b40      	cmp	r3, #64	; 0x40
 8002294:	d10e      	bne.n	80022b4 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	68db      	ldr	r3, [r3, #12]
 800229c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80022a0:	2b40      	cmp	r3, #64	; 0x40
 80022a2:	d107      	bne.n	80022b4 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80022ac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80022ae:	6878      	ldr	r0, [r7, #4]
 80022b0:	f000 f8ff 	bl	80024b2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	691b      	ldr	r3, [r3, #16]
 80022ba:	f003 0320 	and.w	r3, r3, #32
 80022be:	2b20      	cmp	r3, #32
 80022c0:	d10e      	bne.n	80022e0 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	68db      	ldr	r3, [r3, #12]
 80022c8:	f003 0320 	and.w	r3, r3, #32
 80022cc:	2b20      	cmp	r3, #32
 80022ce:	d107      	bne.n	80022e0 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	f06f 0220 	mvn.w	r2, #32
 80022d8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80022da:	6878      	ldr	r0, [r7, #4]
 80022dc:	f000 fa7c 	bl	80027d8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80022e0:	bf00      	nop
 80022e2:	3708      	adds	r7, #8
 80022e4:	46bd      	mov	sp, r7
 80022e6:	bd80      	pop	{r7, pc}

080022e8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80022e8:	b580      	push	{r7, lr}
 80022ea:	b084      	sub	sp, #16
 80022ec:	af00      	add	r7, sp, #0
 80022ee:	6078      	str	r0, [r7, #4]
 80022f0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80022f2:	2300      	movs	r3, #0
 80022f4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80022fc:	2b01      	cmp	r3, #1
 80022fe:	d101      	bne.n	8002304 <HAL_TIM_ConfigClockSource+0x1c>
 8002300:	2302      	movs	r3, #2
 8002302:	e0b4      	b.n	800246e <HAL_TIM_ConfigClockSource+0x186>
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	2201      	movs	r2, #1
 8002308:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	2202      	movs	r2, #2
 8002310:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	689b      	ldr	r3, [r3, #8]
 800231a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800231c:	68bb      	ldr	r3, [r7, #8]
 800231e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002322:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002324:	68bb      	ldr	r3, [r7, #8]
 8002326:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800232a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	68ba      	ldr	r2, [r7, #8]
 8002332:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002334:	683b      	ldr	r3, [r7, #0]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800233c:	d03e      	beq.n	80023bc <HAL_TIM_ConfigClockSource+0xd4>
 800233e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002342:	f200 8087 	bhi.w	8002454 <HAL_TIM_ConfigClockSource+0x16c>
 8002346:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800234a:	f000 8086 	beq.w	800245a <HAL_TIM_ConfigClockSource+0x172>
 800234e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002352:	d87f      	bhi.n	8002454 <HAL_TIM_ConfigClockSource+0x16c>
 8002354:	2b70      	cmp	r3, #112	; 0x70
 8002356:	d01a      	beq.n	800238e <HAL_TIM_ConfigClockSource+0xa6>
 8002358:	2b70      	cmp	r3, #112	; 0x70
 800235a:	d87b      	bhi.n	8002454 <HAL_TIM_ConfigClockSource+0x16c>
 800235c:	2b60      	cmp	r3, #96	; 0x60
 800235e:	d050      	beq.n	8002402 <HAL_TIM_ConfigClockSource+0x11a>
 8002360:	2b60      	cmp	r3, #96	; 0x60
 8002362:	d877      	bhi.n	8002454 <HAL_TIM_ConfigClockSource+0x16c>
 8002364:	2b50      	cmp	r3, #80	; 0x50
 8002366:	d03c      	beq.n	80023e2 <HAL_TIM_ConfigClockSource+0xfa>
 8002368:	2b50      	cmp	r3, #80	; 0x50
 800236a:	d873      	bhi.n	8002454 <HAL_TIM_ConfigClockSource+0x16c>
 800236c:	2b40      	cmp	r3, #64	; 0x40
 800236e:	d058      	beq.n	8002422 <HAL_TIM_ConfigClockSource+0x13a>
 8002370:	2b40      	cmp	r3, #64	; 0x40
 8002372:	d86f      	bhi.n	8002454 <HAL_TIM_ConfigClockSource+0x16c>
 8002374:	2b30      	cmp	r3, #48	; 0x30
 8002376:	d064      	beq.n	8002442 <HAL_TIM_ConfigClockSource+0x15a>
 8002378:	2b30      	cmp	r3, #48	; 0x30
 800237a:	d86b      	bhi.n	8002454 <HAL_TIM_ConfigClockSource+0x16c>
 800237c:	2b20      	cmp	r3, #32
 800237e:	d060      	beq.n	8002442 <HAL_TIM_ConfigClockSource+0x15a>
 8002380:	2b20      	cmp	r3, #32
 8002382:	d867      	bhi.n	8002454 <HAL_TIM_ConfigClockSource+0x16c>
 8002384:	2b00      	cmp	r3, #0
 8002386:	d05c      	beq.n	8002442 <HAL_TIM_ConfigClockSource+0x15a>
 8002388:	2b10      	cmp	r3, #16
 800238a:	d05a      	beq.n	8002442 <HAL_TIM_ConfigClockSource+0x15a>
 800238c:	e062      	b.n	8002454 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	6818      	ldr	r0, [r3, #0]
 8002392:	683b      	ldr	r3, [r7, #0]
 8002394:	6899      	ldr	r1, [r3, #8]
 8002396:	683b      	ldr	r3, [r7, #0]
 8002398:	685a      	ldr	r2, [r3, #4]
 800239a:	683b      	ldr	r3, [r7, #0]
 800239c:	68db      	ldr	r3, [r3, #12]
 800239e:	f000 f98d 	bl	80026bc <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	689b      	ldr	r3, [r3, #8]
 80023a8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80023aa:	68bb      	ldr	r3, [r7, #8]
 80023ac:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80023b0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	68ba      	ldr	r2, [r7, #8]
 80023b8:	609a      	str	r2, [r3, #8]
      break;
 80023ba:	e04f      	b.n	800245c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	6818      	ldr	r0, [r3, #0]
 80023c0:	683b      	ldr	r3, [r7, #0]
 80023c2:	6899      	ldr	r1, [r3, #8]
 80023c4:	683b      	ldr	r3, [r7, #0]
 80023c6:	685a      	ldr	r2, [r3, #4]
 80023c8:	683b      	ldr	r3, [r7, #0]
 80023ca:	68db      	ldr	r3, [r3, #12]
 80023cc:	f000 f976 	bl	80026bc <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	689a      	ldr	r2, [r3, #8]
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80023de:	609a      	str	r2, [r3, #8]
      break;
 80023e0:	e03c      	b.n	800245c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	6818      	ldr	r0, [r3, #0]
 80023e6:	683b      	ldr	r3, [r7, #0]
 80023e8:	6859      	ldr	r1, [r3, #4]
 80023ea:	683b      	ldr	r3, [r7, #0]
 80023ec:	68db      	ldr	r3, [r3, #12]
 80023ee:	461a      	mov	r2, r3
 80023f0:	f000 f8ea 	bl	80025c8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	2150      	movs	r1, #80	; 0x50
 80023fa:	4618      	mov	r0, r3
 80023fc:	f000 f943 	bl	8002686 <TIM_ITRx_SetConfig>
      break;
 8002400:	e02c      	b.n	800245c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	6818      	ldr	r0, [r3, #0]
 8002406:	683b      	ldr	r3, [r7, #0]
 8002408:	6859      	ldr	r1, [r3, #4]
 800240a:	683b      	ldr	r3, [r7, #0]
 800240c:	68db      	ldr	r3, [r3, #12]
 800240e:	461a      	mov	r2, r3
 8002410:	f000 f909 	bl	8002626 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	2160      	movs	r1, #96	; 0x60
 800241a:	4618      	mov	r0, r3
 800241c:	f000 f933 	bl	8002686 <TIM_ITRx_SetConfig>
      break;
 8002420:	e01c      	b.n	800245c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	6818      	ldr	r0, [r3, #0]
 8002426:	683b      	ldr	r3, [r7, #0]
 8002428:	6859      	ldr	r1, [r3, #4]
 800242a:	683b      	ldr	r3, [r7, #0]
 800242c:	68db      	ldr	r3, [r3, #12]
 800242e:	461a      	mov	r2, r3
 8002430:	f000 f8ca 	bl	80025c8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	2140      	movs	r1, #64	; 0x40
 800243a:	4618      	mov	r0, r3
 800243c:	f000 f923 	bl	8002686 <TIM_ITRx_SetConfig>
      break;
 8002440:	e00c      	b.n	800245c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	681a      	ldr	r2, [r3, #0]
 8002446:	683b      	ldr	r3, [r7, #0]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	4619      	mov	r1, r3
 800244c:	4610      	mov	r0, r2
 800244e:	f000 f91a 	bl	8002686 <TIM_ITRx_SetConfig>
      break;
 8002452:	e003      	b.n	800245c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002454:	2301      	movs	r3, #1
 8002456:	73fb      	strb	r3, [r7, #15]
      break;
 8002458:	e000      	b.n	800245c <HAL_TIM_ConfigClockSource+0x174>
      break;
 800245a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	2201      	movs	r2, #1
 8002460:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	2200      	movs	r2, #0
 8002468:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800246c:	7bfb      	ldrb	r3, [r7, #15]
}
 800246e:	4618      	mov	r0, r3
 8002470:	3710      	adds	r7, #16
 8002472:	46bd      	mov	sp, r7
 8002474:	bd80      	pop	{r7, pc}

08002476 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002476:	b480      	push	{r7}
 8002478:	b083      	sub	sp, #12
 800247a:	af00      	add	r7, sp, #0
 800247c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800247e:	bf00      	nop
 8002480:	370c      	adds	r7, #12
 8002482:	46bd      	mov	sp, r7
 8002484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002488:	4770      	bx	lr

0800248a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800248a:	b480      	push	{r7}
 800248c:	b083      	sub	sp, #12
 800248e:	af00      	add	r7, sp, #0
 8002490:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002492:	bf00      	nop
 8002494:	370c      	adds	r7, #12
 8002496:	46bd      	mov	sp, r7
 8002498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800249c:	4770      	bx	lr

0800249e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800249e:	b480      	push	{r7}
 80024a0:	b083      	sub	sp, #12
 80024a2:	af00      	add	r7, sp, #0
 80024a4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80024a6:	bf00      	nop
 80024a8:	370c      	adds	r7, #12
 80024aa:	46bd      	mov	sp, r7
 80024ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024b0:	4770      	bx	lr

080024b2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80024b2:	b480      	push	{r7}
 80024b4:	b083      	sub	sp, #12
 80024b6:	af00      	add	r7, sp, #0
 80024b8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80024ba:	bf00      	nop
 80024bc:	370c      	adds	r7, #12
 80024be:	46bd      	mov	sp, r7
 80024c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024c4:	4770      	bx	lr
	...

080024c8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80024c8:	b480      	push	{r7}
 80024ca:	b085      	sub	sp, #20
 80024cc:	af00      	add	r7, sp, #0
 80024ce:	6078      	str	r0, [r7, #4]
 80024d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	4a34      	ldr	r2, [pc, #208]	; (80025ac <TIM_Base_SetConfig+0xe4>)
 80024dc:	4293      	cmp	r3, r2
 80024de:	d00f      	beq.n	8002500 <TIM_Base_SetConfig+0x38>
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80024e6:	d00b      	beq.n	8002500 <TIM_Base_SetConfig+0x38>
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	4a31      	ldr	r2, [pc, #196]	; (80025b0 <TIM_Base_SetConfig+0xe8>)
 80024ec:	4293      	cmp	r3, r2
 80024ee:	d007      	beq.n	8002500 <TIM_Base_SetConfig+0x38>
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	4a30      	ldr	r2, [pc, #192]	; (80025b4 <TIM_Base_SetConfig+0xec>)
 80024f4:	4293      	cmp	r3, r2
 80024f6:	d003      	beq.n	8002500 <TIM_Base_SetConfig+0x38>
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	4a2f      	ldr	r2, [pc, #188]	; (80025b8 <TIM_Base_SetConfig+0xf0>)
 80024fc:	4293      	cmp	r3, r2
 80024fe:	d108      	bne.n	8002512 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002506:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002508:	683b      	ldr	r3, [r7, #0]
 800250a:	685b      	ldr	r3, [r3, #4]
 800250c:	68fa      	ldr	r2, [r7, #12]
 800250e:	4313      	orrs	r3, r2
 8002510:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	4a25      	ldr	r2, [pc, #148]	; (80025ac <TIM_Base_SetConfig+0xe4>)
 8002516:	4293      	cmp	r3, r2
 8002518:	d01b      	beq.n	8002552 <TIM_Base_SetConfig+0x8a>
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002520:	d017      	beq.n	8002552 <TIM_Base_SetConfig+0x8a>
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	4a22      	ldr	r2, [pc, #136]	; (80025b0 <TIM_Base_SetConfig+0xe8>)
 8002526:	4293      	cmp	r3, r2
 8002528:	d013      	beq.n	8002552 <TIM_Base_SetConfig+0x8a>
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	4a21      	ldr	r2, [pc, #132]	; (80025b4 <TIM_Base_SetConfig+0xec>)
 800252e:	4293      	cmp	r3, r2
 8002530:	d00f      	beq.n	8002552 <TIM_Base_SetConfig+0x8a>
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	4a20      	ldr	r2, [pc, #128]	; (80025b8 <TIM_Base_SetConfig+0xf0>)
 8002536:	4293      	cmp	r3, r2
 8002538:	d00b      	beq.n	8002552 <TIM_Base_SetConfig+0x8a>
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	4a1f      	ldr	r2, [pc, #124]	; (80025bc <TIM_Base_SetConfig+0xf4>)
 800253e:	4293      	cmp	r3, r2
 8002540:	d007      	beq.n	8002552 <TIM_Base_SetConfig+0x8a>
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	4a1e      	ldr	r2, [pc, #120]	; (80025c0 <TIM_Base_SetConfig+0xf8>)
 8002546:	4293      	cmp	r3, r2
 8002548:	d003      	beq.n	8002552 <TIM_Base_SetConfig+0x8a>
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	4a1d      	ldr	r2, [pc, #116]	; (80025c4 <TIM_Base_SetConfig+0xfc>)
 800254e:	4293      	cmp	r3, r2
 8002550:	d108      	bne.n	8002564 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002558:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800255a:	683b      	ldr	r3, [r7, #0]
 800255c:	68db      	ldr	r3, [r3, #12]
 800255e:	68fa      	ldr	r2, [r7, #12]
 8002560:	4313      	orrs	r3, r2
 8002562:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800256a:	683b      	ldr	r3, [r7, #0]
 800256c:	695b      	ldr	r3, [r3, #20]
 800256e:	4313      	orrs	r3, r2
 8002570:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	68fa      	ldr	r2, [r7, #12]
 8002576:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002578:	683b      	ldr	r3, [r7, #0]
 800257a:	689a      	ldr	r2, [r3, #8]
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002580:	683b      	ldr	r3, [r7, #0]
 8002582:	681a      	ldr	r2, [r3, #0]
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	4a08      	ldr	r2, [pc, #32]	; (80025ac <TIM_Base_SetConfig+0xe4>)
 800258c:	4293      	cmp	r3, r2
 800258e:	d103      	bne.n	8002598 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002590:	683b      	ldr	r3, [r7, #0]
 8002592:	691a      	ldr	r2, [r3, #16]
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	2201      	movs	r2, #1
 800259c:	615a      	str	r2, [r3, #20]
}
 800259e:	bf00      	nop
 80025a0:	3714      	adds	r7, #20
 80025a2:	46bd      	mov	sp, r7
 80025a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025a8:	4770      	bx	lr
 80025aa:	bf00      	nop
 80025ac:	40010000 	.word	0x40010000
 80025b0:	40000400 	.word	0x40000400
 80025b4:	40000800 	.word	0x40000800
 80025b8:	40000c00 	.word	0x40000c00
 80025bc:	40014000 	.word	0x40014000
 80025c0:	40014400 	.word	0x40014400
 80025c4:	40014800 	.word	0x40014800

080025c8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80025c8:	b480      	push	{r7}
 80025ca:	b087      	sub	sp, #28
 80025cc:	af00      	add	r7, sp, #0
 80025ce:	60f8      	str	r0, [r7, #12]
 80025d0:	60b9      	str	r1, [r7, #8]
 80025d2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	6a1b      	ldr	r3, [r3, #32]
 80025d8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80025da:	68fb      	ldr	r3, [r7, #12]
 80025dc:	6a1b      	ldr	r3, [r3, #32]
 80025de:	f023 0201 	bic.w	r2, r3, #1
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80025e6:	68fb      	ldr	r3, [r7, #12]
 80025e8:	699b      	ldr	r3, [r3, #24]
 80025ea:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80025ec:	693b      	ldr	r3, [r7, #16]
 80025ee:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80025f2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	011b      	lsls	r3, r3, #4
 80025f8:	693a      	ldr	r2, [r7, #16]
 80025fa:	4313      	orrs	r3, r2
 80025fc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80025fe:	697b      	ldr	r3, [r7, #20]
 8002600:	f023 030a 	bic.w	r3, r3, #10
 8002604:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002606:	697a      	ldr	r2, [r7, #20]
 8002608:	68bb      	ldr	r3, [r7, #8]
 800260a:	4313      	orrs	r3, r2
 800260c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	693a      	ldr	r2, [r7, #16]
 8002612:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	697a      	ldr	r2, [r7, #20]
 8002618:	621a      	str	r2, [r3, #32]
}
 800261a:	bf00      	nop
 800261c:	371c      	adds	r7, #28
 800261e:	46bd      	mov	sp, r7
 8002620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002624:	4770      	bx	lr

08002626 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002626:	b480      	push	{r7}
 8002628:	b087      	sub	sp, #28
 800262a:	af00      	add	r7, sp, #0
 800262c:	60f8      	str	r0, [r7, #12]
 800262e:	60b9      	str	r1, [r7, #8]
 8002630:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	6a1b      	ldr	r3, [r3, #32]
 8002636:	f023 0210 	bic.w	r2, r3, #16
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800263e:	68fb      	ldr	r3, [r7, #12]
 8002640:	699b      	ldr	r3, [r3, #24]
 8002642:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	6a1b      	ldr	r3, [r3, #32]
 8002648:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800264a:	697b      	ldr	r3, [r7, #20]
 800264c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002650:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	031b      	lsls	r3, r3, #12
 8002656:	697a      	ldr	r2, [r7, #20]
 8002658:	4313      	orrs	r3, r2
 800265a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800265c:	693b      	ldr	r3, [r7, #16]
 800265e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002662:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002664:	68bb      	ldr	r3, [r7, #8]
 8002666:	011b      	lsls	r3, r3, #4
 8002668:	693a      	ldr	r2, [r7, #16]
 800266a:	4313      	orrs	r3, r2
 800266c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800266e:	68fb      	ldr	r3, [r7, #12]
 8002670:	697a      	ldr	r2, [r7, #20]
 8002672:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	693a      	ldr	r2, [r7, #16]
 8002678:	621a      	str	r2, [r3, #32]
}
 800267a:	bf00      	nop
 800267c:	371c      	adds	r7, #28
 800267e:	46bd      	mov	sp, r7
 8002680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002684:	4770      	bx	lr

08002686 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002686:	b480      	push	{r7}
 8002688:	b085      	sub	sp, #20
 800268a:	af00      	add	r7, sp, #0
 800268c:	6078      	str	r0, [r7, #4]
 800268e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	689b      	ldr	r3, [r3, #8]
 8002694:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002696:	68fb      	ldr	r3, [r7, #12]
 8002698:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800269c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800269e:	683a      	ldr	r2, [r7, #0]
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	4313      	orrs	r3, r2
 80026a4:	f043 0307 	orr.w	r3, r3, #7
 80026a8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	68fa      	ldr	r2, [r7, #12]
 80026ae:	609a      	str	r2, [r3, #8]
}
 80026b0:	bf00      	nop
 80026b2:	3714      	adds	r7, #20
 80026b4:	46bd      	mov	sp, r7
 80026b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ba:	4770      	bx	lr

080026bc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80026bc:	b480      	push	{r7}
 80026be:	b087      	sub	sp, #28
 80026c0:	af00      	add	r7, sp, #0
 80026c2:	60f8      	str	r0, [r7, #12]
 80026c4:	60b9      	str	r1, [r7, #8]
 80026c6:	607a      	str	r2, [r7, #4]
 80026c8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80026ca:	68fb      	ldr	r3, [r7, #12]
 80026cc:	689b      	ldr	r3, [r3, #8]
 80026ce:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80026d0:	697b      	ldr	r3, [r7, #20]
 80026d2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80026d6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80026d8:	683b      	ldr	r3, [r7, #0]
 80026da:	021a      	lsls	r2, r3, #8
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	431a      	orrs	r2, r3
 80026e0:	68bb      	ldr	r3, [r7, #8]
 80026e2:	4313      	orrs	r3, r2
 80026e4:	697a      	ldr	r2, [r7, #20]
 80026e6:	4313      	orrs	r3, r2
 80026e8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	697a      	ldr	r2, [r7, #20]
 80026ee:	609a      	str	r2, [r3, #8]
}
 80026f0:	bf00      	nop
 80026f2:	371c      	adds	r7, #28
 80026f4:	46bd      	mov	sp, r7
 80026f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026fa:	4770      	bx	lr

080026fc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80026fc:	b480      	push	{r7}
 80026fe:	b085      	sub	sp, #20
 8002700:	af00      	add	r7, sp, #0
 8002702:	6078      	str	r0, [r7, #4]
 8002704:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800270c:	2b01      	cmp	r3, #1
 800270e:	d101      	bne.n	8002714 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002710:	2302      	movs	r3, #2
 8002712:	e050      	b.n	80027b6 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	2201      	movs	r2, #1
 8002718:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	2202      	movs	r2, #2
 8002720:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	685b      	ldr	r3, [r3, #4]
 800272a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	689b      	ldr	r3, [r3, #8]
 8002732:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800273a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800273c:	683b      	ldr	r3, [r7, #0]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	68fa      	ldr	r2, [r7, #12]
 8002742:	4313      	orrs	r3, r2
 8002744:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	68fa      	ldr	r2, [r7, #12]
 800274c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	4a1c      	ldr	r2, [pc, #112]	; (80027c4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8002754:	4293      	cmp	r3, r2
 8002756:	d018      	beq.n	800278a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002760:	d013      	beq.n	800278a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	4a18      	ldr	r2, [pc, #96]	; (80027c8 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8002768:	4293      	cmp	r3, r2
 800276a:	d00e      	beq.n	800278a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	4a16      	ldr	r2, [pc, #88]	; (80027cc <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8002772:	4293      	cmp	r3, r2
 8002774:	d009      	beq.n	800278a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	4a15      	ldr	r2, [pc, #84]	; (80027d0 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 800277c:	4293      	cmp	r3, r2
 800277e:	d004      	beq.n	800278a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	4a13      	ldr	r2, [pc, #76]	; (80027d4 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8002786:	4293      	cmp	r3, r2
 8002788:	d10c      	bne.n	80027a4 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800278a:	68bb      	ldr	r3, [r7, #8]
 800278c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002790:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002792:	683b      	ldr	r3, [r7, #0]
 8002794:	685b      	ldr	r3, [r3, #4]
 8002796:	68ba      	ldr	r2, [r7, #8]
 8002798:	4313      	orrs	r3, r2
 800279a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	68ba      	ldr	r2, [r7, #8]
 80027a2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	2201      	movs	r2, #1
 80027a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	2200      	movs	r2, #0
 80027b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80027b4:	2300      	movs	r3, #0
}
 80027b6:	4618      	mov	r0, r3
 80027b8:	3714      	adds	r7, #20
 80027ba:	46bd      	mov	sp, r7
 80027bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027c0:	4770      	bx	lr
 80027c2:	bf00      	nop
 80027c4:	40010000 	.word	0x40010000
 80027c8:	40000400 	.word	0x40000400
 80027cc:	40000800 	.word	0x40000800
 80027d0:	40000c00 	.word	0x40000c00
 80027d4:	40014000 	.word	0x40014000

080027d8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80027d8:	b480      	push	{r7}
 80027da:	b083      	sub	sp, #12
 80027dc:	af00      	add	r7, sp, #0
 80027de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80027e0:	bf00      	nop
 80027e2:	370c      	adds	r7, #12
 80027e4:	46bd      	mov	sp, r7
 80027e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ea:	4770      	bx	lr

080027ec <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80027ec:	b480      	push	{r7}
 80027ee:	b083      	sub	sp, #12
 80027f0:	af00      	add	r7, sp, #0
 80027f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80027f4:	bf00      	nop
 80027f6:	370c      	adds	r7, #12
 80027f8:	46bd      	mov	sp, r7
 80027fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027fe:	4770      	bx	lr

08002800 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002800:	b580      	push	{r7, lr}
 8002802:	b082      	sub	sp, #8
 8002804:	af00      	add	r7, sp, #0
 8002806:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	2b00      	cmp	r3, #0
 800280c:	d101      	bne.n	8002812 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800280e:	2301      	movs	r3, #1
 8002810:	e03f      	b.n	8002892 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002818:	b2db      	uxtb	r3, r3
 800281a:	2b00      	cmp	r3, #0
 800281c:	d106      	bne.n	800282c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	2200      	movs	r2, #0
 8002822:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002826:	6878      	ldr	r0, [r7, #4]
 8002828:	f7fe fa4e 	bl	8000cc8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	2224      	movs	r2, #36	; 0x24
 8002830:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	68da      	ldr	r2, [r3, #12]
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002842:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002844:	6878      	ldr	r0, [r7, #4]
 8002846:	f000 fddf 	bl	8003408 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	691a      	ldr	r2, [r3, #16]
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002858:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	695a      	ldr	r2, [r3, #20]
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002868:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	68da      	ldr	r2, [r3, #12]
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002878:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	2200      	movs	r2, #0
 800287e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	2220      	movs	r2, #32
 8002884:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	2220      	movs	r2, #32
 800288c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002890:	2300      	movs	r3, #0
}
 8002892:	4618      	mov	r0, r3
 8002894:	3708      	adds	r7, #8
 8002896:	46bd      	mov	sp, r7
 8002898:	bd80      	pop	{r7, pc}

0800289a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800289a:	b580      	push	{r7, lr}
 800289c:	b08a      	sub	sp, #40	; 0x28
 800289e:	af02      	add	r7, sp, #8
 80028a0:	60f8      	str	r0, [r7, #12]
 80028a2:	60b9      	str	r1, [r7, #8]
 80028a4:	603b      	str	r3, [r7, #0]
 80028a6:	4613      	mov	r3, r2
 80028a8:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80028aa:	2300      	movs	r3, #0
 80028ac:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80028b4:	b2db      	uxtb	r3, r3
 80028b6:	2b20      	cmp	r3, #32
 80028b8:	d17c      	bne.n	80029b4 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80028ba:	68bb      	ldr	r3, [r7, #8]
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d002      	beq.n	80028c6 <HAL_UART_Transmit+0x2c>
 80028c0:	88fb      	ldrh	r3, [r7, #6]
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d101      	bne.n	80028ca <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80028c6:	2301      	movs	r3, #1
 80028c8:	e075      	b.n	80029b6 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80028d0:	2b01      	cmp	r3, #1
 80028d2:	d101      	bne.n	80028d8 <HAL_UART_Transmit+0x3e>
 80028d4:	2302      	movs	r3, #2
 80028d6:	e06e      	b.n	80029b6 <HAL_UART_Transmit+0x11c>
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	2201      	movs	r2, #1
 80028dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	2200      	movs	r2, #0
 80028e4:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	2221      	movs	r2, #33	; 0x21
 80028ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80028ee:	f7fe fb5b 	bl	8000fa8 <HAL_GetTick>
 80028f2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	88fa      	ldrh	r2, [r7, #6]
 80028f8:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	88fa      	ldrh	r2, [r7, #6]
 80028fe:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	689b      	ldr	r3, [r3, #8]
 8002904:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002908:	d108      	bne.n	800291c <HAL_UART_Transmit+0x82>
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	691b      	ldr	r3, [r3, #16]
 800290e:	2b00      	cmp	r3, #0
 8002910:	d104      	bne.n	800291c <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8002912:	2300      	movs	r3, #0
 8002914:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002916:	68bb      	ldr	r3, [r7, #8]
 8002918:	61bb      	str	r3, [r7, #24]
 800291a:	e003      	b.n	8002924 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 800291c:	68bb      	ldr	r3, [r7, #8]
 800291e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002920:	2300      	movs	r3, #0
 8002922:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	2200      	movs	r2, #0
 8002928:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 800292c:	e02a      	b.n	8002984 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800292e:	683b      	ldr	r3, [r7, #0]
 8002930:	9300      	str	r3, [sp, #0]
 8002932:	697b      	ldr	r3, [r7, #20]
 8002934:	2200      	movs	r2, #0
 8002936:	2180      	movs	r1, #128	; 0x80
 8002938:	68f8      	ldr	r0, [r7, #12]
 800293a:	f000 fb1f 	bl	8002f7c <UART_WaitOnFlagUntilTimeout>
 800293e:	4603      	mov	r3, r0
 8002940:	2b00      	cmp	r3, #0
 8002942:	d001      	beq.n	8002948 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8002944:	2303      	movs	r3, #3
 8002946:	e036      	b.n	80029b6 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8002948:	69fb      	ldr	r3, [r7, #28]
 800294a:	2b00      	cmp	r3, #0
 800294c:	d10b      	bne.n	8002966 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800294e:	69bb      	ldr	r3, [r7, #24]
 8002950:	881b      	ldrh	r3, [r3, #0]
 8002952:	461a      	mov	r2, r3
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800295c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800295e:	69bb      	ldr	r3, [r7, #24]
 8002960:	3302      	adds	r3, #2
 8002962:	61bb      	str	r3, [r7, #24]
 8002964:	e007      	b.n	8002976 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002966:	69fb      	ldr	r3, [r7, #28]
 8002968:	781a      	ldrb	r2, [r3, #0]
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002970:	69fb      	ldr	r3, [r7, #28]
 8002972:	3301      	adds	r3, #1
 8002974:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800297a:	b29b      	uxth	r3, r3
 800297c:	3b01      	subs	r3, #1
 800297e:	b29a      	uxth	r2, r3
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002988:	b29b      	uxth	r3, r3
 800298a:	2b00      	cmp	r3, #0
 800298c:	d1cf      	bne.n	800292e <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800298e:	683b      	ldr	r3, [r7, #0]
 8002990:	9300      	str	r3, [sp, #0]
 8002992:	697b      	ldr	r3, [r7, #20]
 8002994:	2200      	movs	r2, #0
 8002996:	2140      	movs	r1, #64	; 0x40
 8002998:	68f8      	ldr	r0, [r7, #12]
 800299a:	f000 faef 	bl	8002f7c <UART_WaitOnFlagUntilTimeout>
 800299e:	4603      	mov	r3, r0
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	d001      	beq.n	80029a8 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80029a4:	2303      	movs	r3, #3
 80029a6:	e006      	b.n	80029b6 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	2220      	movs	r2, #32
 80029ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80029b0:	2300      	movs	r3, #0
 80029b2:	e000      	b.n	80029b6 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80029b4:	2302      	movs	r3, #2
  }
}
 80029b6:	4618      	mov	r0, r3
 80029b8:	3720      	adds	r7, #32
 80029ba:	46bd      	mov	sp, r7
 80029bc:	bd80      	pop	{r7, pc}

080029be <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80029be:	b580      	push	{r7, lr}
 80029c0:	b084      	sub	sp, #16
 80029c2:	af00      	add	r7, sp, #0
 80029c4:	60f8      	str	r0, [r7, #12]
 80029c6:	60b9      	str	r1, [r7, #8]
 80029c8:	4613      	mov	r3, r2
 80029ca:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80029d2:	b2db      	uxtb	r3, r3
 80029d4:	2b20      	cmp	r3, #32
 80029d6:	d11d      	bne.n	8002a14 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 80029d8:	68bb      	ldr	r3, [r7, #8]
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d002      	beq.n	80029e4 <HAL_UART_Receive_IT+0x26>
 80029de:	88fb      	ldrh	r3, [r7, #6]
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d101      	bne.n	80029e8 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80029e4:	2301      	movs	r3, #1
 80029e6:	e016      	b.n	8002a16 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80029ee:	2b01      	cmp	r3, #1
 80029f0:	d101      	bne.n	80029f6 <HAL_UART_Receive_IT+0x38>
 80029f2:	2302      	movs	r3, #2
 80029f4:	e00f      	b.n	8002a16 <HAL_UART_Receive_IT+0x58>
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	2201      	movs	r2, #1
 80029fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	2200      	movs	r2, #0
 8002a02:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8002a04:	88fb      	ldrh	r3, [r7, #6]
 8002a06:	461a      	mov	r2, r3
 8002a08:	68b9      	ldr	r1, [r7, #8]
 8002a0a:	68f8      	ldr	r0, [r7, #12]
 8002a0c:	f000 fb24 	bl	8003058 <UART_Start_Receive_IT>
 8002a10:	4603      	mov	r3, r0
 8002a12:	e000      	b.n	8002a16 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8002a14:	2302      	movs	r3, #2
  }
}
 8002a16:	4618      	mov	r0, r3
 8002a18:	3710      	adds	r7, #16
 8002a1a:	46bd      	mov	sp, r7
 8002a1c:	bd80      	pop	{r7, pc}
	...

08002a20 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002a20:	b580      	push	{r7, lr}
 8002a22:	b0ba      	sub	sp, #232	; 0xe8
 8002a24:	af00      	add	r7, sp, #0
 8002a26:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	68db      	ldr	r3, [r3, #12]
 8002a38:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	695b      	ldr	r3, [r3, #20]
 8002a42:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8002a46:	2300      	movs	r3, #0
 8002a48:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8002a4c:	2300      	movs	r3, #0
 8002a4e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8002a52:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002a56:	f003 030f 	and.w	r3, r3, #15
 8002a5a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8002a5e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d10f      	bne.n	8002a86 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002a66:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002a6a:	f003 0320 	and.w	r3, r3, #32
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d009      	beq.n	8002a86 <HAL_UART_IRQHandler+0x66>
 8002a72:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002a76:	f003 0320 	and.w	r3, r3, #32
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d003      	beq.n	8002a86 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8002a7e:	6878      	ldr	r0, [r7, #4]
 8002a80:	f000 fc07 	bl	8003292 <UART_Receive_IT>
      return;
 8002a84:	e256      	b.n	8002f34 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8002a86:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	f000 80de 	beq.w	8002c4c <HAL_UART_IRQHandler+0x22c>
 8002a90:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002a94:	f003 0301 	and.w	r3, r3, #1
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d106      	bne.n	8002aaa <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8002a9c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002aa0:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	f000 80d1 	beq.w	8002c4c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8002aaa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002aae:	f003 0301 	and.w	r3, r3, #1
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d00b      	beq.n	8002ace <HAL_UART_IRQHandler+0xae>
 8002ab6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002aba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d005      	beq.n	8002ace <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ac6:	f043 0201 	orr.w	r2, r3, #1
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002ace:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002ad2:	f003 0304 	and.w	r3, r3, #4
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d00b      	beq.n	8002af2 <HAL_UART_IRQHandler+0xd2>
 8002ada:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002ade:	f003 0301 	and.w	r3, r3, #1
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d005      	beq.n	8002af2 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002aea:	f043 0202 	orr.w	r2, r3, #2
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002af2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002af6:	f003 0302 	and.w	r3, r3, #2
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d00b      	beq.n	8002b16 <HAL_UART_IRQHandler+0xf6>
 8002afe:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002b02:	f003 0301 	and.w	r3, r3, #1
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d005      	beq.n	8002b16 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b0e:	f043 0204 	orr.w	r2, r3, #4
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8002b16:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002b1a:	f003 0308 	and.w	r3, r3, #8
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d011      	beq.n	8002b46 <HAL_UART_IRQHandler+0x126>
 8002b22:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002b26:	f003 0320 	and.w	r3, r3, #32
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d105      	bne.n	8002b3a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8002b2e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002b32:	f003 0301 	and.w	r3, r3, #1
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d005      	beq.n	8002b46 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b3e:	f043 0208 	orr.w	r2, r3, #8
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	f000 81ed 	beq.w	8002f2a <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002b50:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002b54:	f003 0320 	and.w	r3, r3, #32
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	d008      	beq.n	8002b6e <HAL_UART_IRQHandler+0x14e>
 8002b5c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002b60:	f003 0320 	and.w	r3, r3, #32
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	d002      	beq.n	8002b6e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8002b68:	6878      	ldr	r0, [r7, #4]
 8002b6a:	f000 fb92 	bl	8003292 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	695b      	ldr	r3, [r3, #20]
 8002b74:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b78:	2b40      	cmp	r3, #64	; 0x40
 8002b7a:	bf0c      	ite	eq
 8002b7c:	2301      	moveq	r3, #1
 8002b7e:	2300      	movne	r3, #0
 8002b80:	b2db      	uxtb	r3, r3
 8002b82:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b8a:	f003 0308 	and.w	r3, r3, #8
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d103      	bne.n	8002b9a <HAL_UART_IRQHandler+0x17a>
 8002b92:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d04f      	beq.n	8002c3a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002b9a:	6878      	ldr	r0, [r7, #4]
 8002b9c:	f000 fa9a 	bl	80030d4 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	695b      	ldr	r3, [r3, #20]
 8002ba6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002baa:	2b40      	cmp	r3, #64	; 0x40
 8002bac:	d141      	bne.n	8002c32 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	3314      	adds	r3, #20
 8002bb4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002bb8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002bbc:	e853 3f00 	ldrex	r3, [r3]
 8002bc0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8002bc4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002bc8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002bcc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	3314      	adds	r3, #20
 8002bd6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8002bda:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8002bde:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002be2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8002be6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8002bea:	e841 2300 	strex	r3, r2, [r1]
 8002bee:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8002bf2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d1d9      	bne.n	8002bae <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d013      	beq.n	8002c2a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c06:	4a7d      	ldr	r2, [pc, #500]	; (8002dfc <HAL_UART_IRQHandler+0x3dc>)
 8002c08:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c0e:	4618      	mov	r0, r3
 8002c10:	f7fe fb57 	bl	80012c2 <HAL_DMA_Abort_IT>
 8002c14:	4603      	mov	r3, r0
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d016      	beq.n	8002c48 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c1e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002c20:	687a      	ldr	r2, [r7, #4]
 8002c22:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002c24:	4610      	mov	r0, r2
 8002c26:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002c28:	e00e      	b.n	8002c48 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002c2a:	6878      	ldr	r0, [r7, #4]
 8002c2c:	f000 f990 	bl	8002f50 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002c30:	e00a      	b.n	8002c48 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002c32:	6878      	ldr	r0, [r7, #4]
 8002c34:	f000 f98c 	bl	8002f50 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002c38:	e006      	b.n	8002c48 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002c3a:	6878      	ldr	r0, [r7, #4]
 8002c3c:	f000 f988 	bl	8002f50 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	2200      	movs	r2, #0
 8002c44:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8002c46:	e170      	b.n	8002f2a <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002c48:	bf00      	nop
    return;
 8002c4a:	e16e      	b.n	8002f2a <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c50:	2b01      	cmp	r3, #1
 8002c52:	f040 814a 	bne.w	8002eea <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8002c56:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002c5a:	f003 0310 	and.w	r3, r3, #16
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	f000 8143 	beq.w	8002eea <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8002c64:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002c68:	f003 0310 	and.w	r3, r3, #16
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	f000 813c 	beq.w	8002eea <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002c72:	2300      	movs	r3, #0
 8002c74:	60bb      	str	r3, [r7, #8]
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	60bb      	str	r3, [r7, #8]
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	685b      	ldr	r3, [r3, #4]
 8002c84:	60bb      	str	r3, [r7, #8]
 8002c86:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	695b      	ldr	r3, [r3, #20]
 8002c8e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c92:	2b40      	cmp	r3, #64	; 0x40
 8002c94:	f040 80b4 	bne.w	8002e00 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	685b      	ldr	r3, [r3, #4]
 8002ca0:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8002ca4:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	f000 8140 	beq.w	8002f2e <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8002cb2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8002cb6:	429a      	cmp	r2, r3
 8002cb8:	f080 8139 	bcs.w	8002f2e <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8002cc2:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002cc8:	69db      	ldr	r3, [r3, #28]
 8002cca:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002cce:	f000 8088 	beq.w	8002de2 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	330c      	adds	r3, #12
 8002cd8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002cdc:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002ce0:	e853 3f00 	ldrex	r3, [r3]
 8002ce4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8002ce8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002cec:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002cf0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	330c      	adds	r3, #12
 8002cfa:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8002cfe:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8002d02:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002d06:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8002d0a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8002d0e:	e841 2300 	strex	r3, r2, [r1]
 8002d12:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8002d16:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d1d9      	bne.n	8002cd2 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	3314      	adds	r3, #20
 8002d24:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002d26:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002d28:	e853 3f00 	ldrex	r3, [r3]
 8002d2c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8002d2e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002d30:	f023 0301 	bic.w	r3, r3, #1
 8002d34:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	3314      	adds	r3, #20
 8002d3e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8002d42:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8002d46:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002d48:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8002d4a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8002d4e:	e841 2300 	strex	r3, r2, [r1]
 8002d52:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8002d54:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d1e1      	bne.n	8002d1e <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	3314      	adds	r3, #20
 8002d60:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002d62:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002d64:	e853 3f00 	ldrex	r3, [r3]
 8002d68:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8002d6a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002d6c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002d70:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	3314      	adds	r3, #20
 8002d7a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8002d7e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8002d80:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002d82:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8002d84:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8002d86:	e841 2300 	strex	r3, r2, [r1]
 8002d8a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8002d8c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d1e3      	bne.n	8002d5a <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	2220      	movs	r2, #32
 8002d96:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	2200      	movs	r2, #0
 8002d9e:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	330c      	adds	r3, #12
 8002da6:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002da8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002daa:	e853 3f00 	ldrex	r3, [r3]
 8002dae:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8002db0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002db2:	f023 0310 	bic.w	r3, r3, #16
 8002db6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	330c      	adds	r3, #12
 8002dc0:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8002dc4:	65ba      	str	r2, [r7, #88]	; 0x58
 8002dc6:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002dc8:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8002dca:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002dcc:	e841 2300 	strex	r3, r2, [r1]
 8002dd0:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8002dd2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d1e3      	bne.n	8002da0 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ddc:	4618      	mov	r0, r3
 8002dde:	f7fe fa00 	bl	80011e2 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002dea:	b29b      	uxth	r3, r3
 8002dec:	1ad3      	subs	r3, r2, r3
 8002dee:	b29b      	uxth	r3, r3
 8002df0:	4619      	mov	r1, r3
 8002df2:	6878      	ldr	r0, [r7, #4]
 8002df4:	f000 f8b6 	bl	8002f64 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8002df8:	e099      	b.n	8002f2e <HAL_UART_IRQHandler+0x50e>
 8002dfa:	bf00      	nop
 8002dfc:	0800319b 	.word	0x0800319b
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002e08:	b29b      	uxth	r3, r3
 8002e0a:	1ad3      	subs	r3, r2, r3
 8002e0c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002e14:	b29b      	uxth	r3, r3
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	f000 808b 	beq.w	8002f32 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8002e1c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	f000 8086 	beq.w	8002f32 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	330c      	adds	r3, #12
 8002e2c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e30:	e853 3f00 	ldrex	r3, [r3]
 8002e34:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8002e36:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002e38:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8002e3c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	330c      	adds	r3, #12
 8002e46:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8002e4a:	647a      	str	r2, [r7, #68]	; 0x44
 8002e4c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e4e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8002e50:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002e52:	e841 2300 	strex	r3, r2, [r1]
 8002e56:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8002e58:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d1e3      	bne.n	8002e26 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	3314      	adds	r3, #20
 8002e64:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e68:	e853 3f00 	ldrex	r3, [r3]
 8002e6c:	623b      	str	r3, [r7, #32]
   return(result);
 8002e6e:	6a3b      	ldr	r3, [r7, #32]
 8002e70:	f023 0301 	bic.w	r3, r3, #1
 8002e74:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	3314      	adds	r3, #20
 8002e7e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8002e82:	633a      	str	r2, [r7, #48]	; 0x30
 8002e84:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e86:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002e88:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002e8a:	e841 2300 	strex	r3, r2, [r1]
 8002e8e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8002e90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d1e3      	bne.n	8002e5e <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	2220      	movs	r2, #32
 8002e9a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	2200      	movs	r2, #0
 8002ea2:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	330c      	adds	r3, #12
 8002eaa:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002eac:	693b      	ldr	r3, [r7, #16]
 8002eae:	e853 3f00 	ldrex	r3, [r3]
 8002eb2:	60fb      	str	r3, [r7, #12]
   return(result);
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	f023 0310 	bic.w	r3, r3, #16
 8002eba:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	330c      	adds	r3, #12
 8002ec4:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8002ec8:	61fa      	str	r2, [r7, #28]
 8002eca:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002ecc:	69b9      	ldr	r1, [r7, #24]
 8002ece:	69fa      	ldr	r2, [r7, #28]
 8002ed0:	e841 2300 	strex	r3, r2, [r1]
 8002ed4:	617b      	str	r3, [r7, #20]
   return(result);
 8002ed6:	697b      	ldr	r3, [r7, #20]
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	d1e3      	bne.n	8002ea4 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8002edc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8002ee0:	4619      	mov	r1, r3
 8002ee2:	6878      	ldr	r0, [r7, #4]
 8002ee4:	f000 f83e 	bl	8002f64 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8002ee8:	e023      	b.n	8002f32 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8002eea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002eee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d009      	beq.n	8002f0a <HAL_UART_IRQHandler+0x4ea>
 8002ef6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002efa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d003      	beq.n	8002f0a <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8002f02:	6878      	ldr	r0, [r7, #4]
 8002f04:	f000 f95d 	bl	80031c2 <UART_Transmit_IT>
    return;
 8002f08:	e014      	b.n	8002f34 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8002f0a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002f0e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d00e      	beq.n	8002f34 <HAL_UART_IRQHandler+0x514>
 8002f16:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002f1a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d008      	beq.n	8002f34 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8002f22:	6878      	ldr	r0, [r7, #4]
 8002f24:	f000 f99d 	bl	8003262 <UART_EndTransmit_IT>
    return;
 8002f28:	e004      	b.n	8002f34 <HAL_UART_IRQHandler+0x514>
    return;
 8002f2a:	bf00      	nop
 8002f2c:	e002      	b.n	8002f34 <HAL_UART_IRQHandler+0x514>
      return;
 8002f2e:	bf00      	nop
 8002f30:	e000      	b.n	8002f34 <HAL_UART_IRQHandler+0x514>
      return;
 8002f32:	bf00      	nop
  }
}
 8002f34:	37e8      	adds	r7, #232	; 0xe8
 8002f36:	46bd      	mov	sp, r7
 8002f38:	bd80      	pop	{r7, pc}
 8002f3a:	bf00      	nop

08002f3c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002f3c:	b480      	push	{r7}
 8002f3e:	b083      	sub	sp, #12
 8002f40:	af00      	add	r7, sp, #0
 8002f42:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8002f44:	bf00      	nop
 8002f46:	370c      	adds	r7, #12
 8002f48:	46bd      	mov	sp, r7
 8002f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f4e:	4770      	bx	lr

08002f50 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002f50:	b480      	push	{r7}
 8002f52:	b083      	sub	sp, #12
 8002f54:	af00      	add	r7, sp, #0
 8002f56:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8002f58:	bf00      	nop
 8002f5a:	370c      	adds	r7, #12
 8002f5c:	46bd      	mov	sp, r7
 8002f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f62:	4770      	bx	lr

08002f64 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002f64:	b480      	push	{r7}
 8002f66:	b083      	sub	sp, #12
 8002f68:	af00      	add	r7, sp, #0
 8002f6a:	6078      	str	r0, [r7, #4]
 8002f6c:	460b      	mov	r3, r1
 8002f6e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8002f70:	bf00      	nop
 8002f72:	370c      	adds	r7, #12
 8002f74:	46bd      	mov	sp, r7
 8002f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f7a:	4770      	bx	lr

08002f7c <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8002f7c:	b580      	push	{r7, lr}
 8002f7e:	b090      	sub	sp, #64	; 0x40
 8002f80:	af00      	add	r7, sp, #0
 8002f82:	60f8      	str	r0, [r7, #12]
 8002f84:	60b9      	str	r1, [r7, #8]
 8002f86:	603b      	str	r3, [r7, #0]
 8002f88:	4613      	mov	r3, r2
 8002f8a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002f8c:	e050      	b.n	8003030 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002f8e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002f90:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f94:	d04c      	beq.n	8003030 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002f96:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	d007      	beq.n	8002fac <UART_WaitOnFlagUntilTimeout+0x30>
 8002f9c:	f7fe f804 	bl	8000fa8 <HAL_GetTick>
 8002fa0:	4602      	mov	r2, r0
 8002fa2:	683b      	ldr	r3, [r7, #0]
 8002fa4:	1ad3      	subs	r3, r2, r3
 8002fa6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002fa8:	429a      	cmp	r2, r3
 8002faa:	d241      	bcs.n	8003030 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	330c      	adds	r3, #12
 8002fb2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002fb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002fb6:	e853 3f00 	ldrex	r3, [r3]
 8002fba:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002fbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fbe:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8002fc2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	330c      	adds	r3, #12
 8002fca:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002fcc:	637a      	str	r2, [r7, #52]	; 0x34
 8002fce:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002fd0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002fd2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002fd4:	e841 2300 	strex	r3, r2, [r1]
 8002fd8:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8002fda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	d1e5      	bne.n	8002fac <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	3314      	adds	r3, #20
 8002fe6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002fe8:	697b      	ldr	r3, [r7, #20]
 8002fea:	e853 3f00 	ldrex	r3, [r3]
 8002fee:	613b      	str	r3, [r7, #16]
   return(result);
 8002ff0:	693b      	ldr	r3, [r7, #16]
 8002ff2:	f023 0301 	bic.w	r3, r3, #1
 8002ff6:	63bb      	str	r3, [r7, #56]	; 0x38
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	3314      	adds	r3, #20
 8002ffe:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003000:	623a      	str	r2, [r7, #32]
 8003002:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003004:	69f9      	ldr	r1, [r7, #28]
 8003006:	6a3a      	ldr	r2, [r7, #32]
 8003008:	e841 2300 	strex	r3, r2, [r1]
 800300c:	61bb      	str	r3, [r7, #24]
   return(result);
 800300e:	69bb      	ldr	r3, [r7, #24]
 8003010:	2b00      	cmp	r3, #0
 8003012:	d1e5      	bne.n	8002fe0 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	2220      	movs	r2, #32
 8003018:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	2220      	movs	r2, #32
 8003020:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	2200      	movs	r2, #0
 8003028:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800302c:	2303      	movs	r3, #3
 800302e:	e00f      	b.n	8003050 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	681a      	ldr	r2, [r3, #0]
 8003036:	68bb      	ldr	r3, [r7, #8]
 8003038:	4013      	ands	r3, r2
 800303a:	68ba      	ldr	r2, [r7, #8]
 800303c:	429a      	cmp	r2, r3
 800303e:	bf0c      	ite	eq
 8003040:	2301      	moveq	r3, #1
 8003042:	2300      	movne	r3, #0
 8003044:	b2db      	uxtb	r3, r3
 8003046:	461a      	mov	r2, r3
 8003048:	79fb      	ldrb	r3, [r7, #7]
 800304a:	429a      	cmp	r2, r3
 800304c:	d09f      	beq.n	8002f8e <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800304e:	2300      	movs	r3, #0
}
 8003050:	4618      	mov	r0, r3
 8003052:	3740      	adds	r7, #64	; 0x40
 8003054:	46bd      	mov	sp, r7
 8003056:	bd80      	pop	{r7, pc}

08003058 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003058:	b480      	push	{r7}
 800305a:	b085      	sub	sp, #20
 800305c:	af00      	add	r7, sp, #0
 800305e:	60f8      	str	r0, [r7, #12]
 8003060:	60b9      	str	r1, [r7, #8]
 8003062:	4613      	mov	r3, r2
 8003064:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	68ba      	ldr	r2, [r7, #8]
 800306a:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	88fa      	ldrh	r2, [r7, #6]
 8003070:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	88fa      	ldrh	r2, [r7, #6]
 8003076:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	2200      	movs	r2, #0
 800307c:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	2222      	movs	r2, #34	; 0x22
 8003082:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	2200      	movs	r2, #0
 800308a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	691b      	ldr	r3, [r3, #16]
 8003092:	2b00      	cmp	r3, #0
 8003094:	d007      	beq.n	80030a6 <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	68da      	ldr	r2, [r3, #12]
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80030a4:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	695a      	ldr	r2, [r3, #20]
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	f042 0201 	orr.w	r2, r2, #1
 80030b4:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	68da      	ldr	r2, [r3, #12]
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	f042 0220 	orr.w	r2, r2, #32
 80030c4:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80030c6:	2300      	movs	r3, #0
}
 80030c8:	4618      	mov	r0, r3
 80030ca:	3714      	adds	r7, #20
 80030cc:	46bd      	mov	sp, r7
 80030ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030d2:	4770      	bx	lr

080030d4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80030d4:	b480      	push	{r7}
 80030d6:	b095      	sub	sp, #84	; 0x54
 80030d8:	af00      	add	r7, sp, #0
 80030da:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	330c      	adds	r3, #12
 80030e2:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80030e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80030e6:	e853 3f00 	ldrex	r3, [r3]
 80030ea:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80030ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80030ee:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80030f2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	330c      	adds	r3, #12
 80030fa:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80030fc:	643a      	str	r2, [r7, #64]	; 0x40
 80030fe:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003100:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8003102:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003104:	e841 2300 	strex	r3, r2, [r1]
 8003108:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800310a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800310c:	2b00      	cmp	r3, #0
 800310e:	d1e5      	bne.n	80030dc <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	3314      	adds	r3, #20
 8003116:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003118:	6a3b      	ldr	r3, [r7, #32]
 800311a:	e853 3f00 	ldrex	r3, [r3]
 800311e:	61fb      	str	r3, [r7, #28]
   return(result);
 8003120:	69fb      	ldr	r3, [r7, #28]
 8003122:	f023 0301 	bic.w	r3, r3, #1
 8003126:	64bb      	str	r3, [r7, #72]	; 0x48
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	3314      	adds	r3, #20
 800312e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003130:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003132:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003134:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003136:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003138:	e841 2300 	strex	r3, r2, [r1]
 800313c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800313e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003140:	2b00      	cmp	r3, #0
 8003142:	d1e5      	bne.n	8003110 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003148:	2b01      	cmp	r3, #1
 800314a:	d119      	bne.n	8003180 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	330c      	adds	r3, #12
 8003152:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	e853 3f00 	ldrex	r3, [r3]
 800315a:	60bb      	str	r3, [r7, #8]
   return(result);
 800315c:	68bb      	ldr	r3, [r7, #8]
 800315e:	f023 0310 	bic.w	r3, r3, #16
 8003162:	647b      	str	r3, [r7, #68]	; 0x44
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	330c      	adds	r3, #12
 800316a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800316c:	61ba      	str	r2, [r7, #24]
 800316e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003170:	6979      	ldr	r1, [r7, #20]
 8003172:	69ba      	ldr	r2, [r7, #24]
 8003174:	e841 2300 	strex	r3, r2, [r1]
 8003178:	613b      	str	r3, [r7, #16]
   return(result);
 800317a:	693b      	ldr	r3, [r7, #16]
 800317c:	2b00      	cmp	r3, #0
 800317e:	d1e5      	bne.n	800314c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	2220      	movs	r2, #32
 8003184:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	2200      	movs	r2, #0
 800318c:	631a      	str	r2, [r3, #48]	; 0x30
}
 800318e:	bf00      	nop
 8003190:	3754      	adds	r7, #84	; 0x54
 8003192:	46bd      	mov	sp, r7
 8003194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003198:	4770      	bx	lr

0800319a <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800319a:	b580      	push	{r7, lr}
 800319c:	b084      	sub	sp, #16
 800319e:	af00      	add	r7, sp, #0
 80031a0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031a6:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	2200      	movs	r2, #0
 80031ac:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	2200      	movs	r2, #0
 80031b2:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80031b4:	68f8      	ldr	r0, [r7, #12]
 80031b6:	f7ff fecb 	bl	8002f50 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80031ba:	bf00      	nop
 80031bc:	3710      	adds	r7, #16
 80031be:	46bd      	mov	sp, r7
 80031c0:	bd80      	pop	{r7, pc}

080031c2 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80031c2:	b480      	push	{r7}
 80031c4:	b085      	sub	sp, #20
 80031c6:	af00      	add	r7, sp, #0
 80031c8:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80031d0:	b2db      	uxtb	r3, r3
 80031d2:	2b21      	cmp	r3, #33	; 0x21
 80031d4:	d13e      	bne.n	8003254 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	689b      	ldr	r3, [r3, #8]
 80031da:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80031de:	d114      	bne.n	800320a <UART_Transmit_IT+0x48>
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	691b      	ldr	r3, [r3, #16]
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	d110      	bne.n	800320a <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	6a1b      	ldr	r3, [r3, #32]
 80031ec:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	881b      	ldrh	r3, [r3, #0]
 80031f2:	461a      	mov	r2, r3
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80031fc:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	6a1b      	ldr	r3, [r3, #32]
 8003202:	1c9a      	adds	r2, r3, #2
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	621a      	str	r2, [r3, #32]
 8003208:	e008      	b.n	800321c <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	6a1b      	ldr	r3, [r3, #32]
 800320e:	1c59      	adds	r1, r3, #1
 8003210:	687a      	ldr	r2, [r7, #4]
 8003212:	6211      	str	r1, [r2, #32]
 8003214:	781a      	ldrb	r2, [r3, #0]
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003220:	b29b      	uxth	r3, r3
 8003222:	3b01      	subs	r3, #1
 8003224:	b29b      	uxth	r3, r3
 8003226:	687a      	ldr	r2, [r7, #4]
 8003228:	4619      	mov	r1, r3
 800322a:	84d1      	strh	r1, [r2, #38]	; 0x26
 800322c:	2b00      	cmp	r3, #0
 800322e:	d10f      	bne.n	8003250 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	68da      	ldr	r2, [r3, #12]
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800323e:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	68da      	ldr	r2, [r3, #12]
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800324e:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8003250:	2300      	movs	r3, #0
 8003252:	e000      	b.n	8003256 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8003254:	2302      	movs	r3, #2
  }
}
 8003256:	4618      	mov	r0, r3
 8003258:	3714      	adds	r7, #20
 800325a:	46bd      	mov	sp, r7
 800325c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003260:	4770      	bx	lr

08003262 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003262:	b580      	push	{r7, lr}
 8003264:	b082      	sub	sp, #8
 8003266:	af00      	add	r7, sp, #0
 8003268:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	68da      	ldr	r2, [r3, #12]
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003278:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	2220      	movs	r2, #32
 800327e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003282:	6878      	ldr	r0, [r7, #4]
 8003284:	f7ff fe5a 	bl	8002f3c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8003288:	2300      	movs	r3, #0
}
 800328a:	4618      	mov	r0, r3
 800328c:	3708      	adds	r7, #8
 800328e:	46bd      	mov	sp, r7
 8003290:	bd80      	pop	{r7, pc}

08003292 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8003292:	b580      	push	{r7, lr}
 8003294:	b08c      	sub	sp, #48	; 0x30
 8003296:	af00      	add	r7, sp, #0
 8003298:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80032a0:	b2db      	uxtb	r3, r3
 80032a2:	2b22      	cmp	r3, #34	; 0x22
 80032a4:	f040 80ab 	bne.w	80033fe <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	689b      	ldr	r3, [r3, #8]
 80032ac:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80032b0:	d117      	bne.n	80032e2 <UART_Receive_IT+0x50>
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	691b      	ldr	r3, [r3, #16]
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d113      	bne.n	80032e2 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80032ba:	2300      	movs	r3, #0
 80032bc:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032c2:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	685b      	ldr	r3, [r3, #4]
 80032ca:	b29b      	uxth	r3, r3
 80032cc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80032d0:	b29a      	uxth	r2, r3
 80032d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80032d4:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032da:	1c9a      	adds	r2, r3, #2
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	629a      	str	r2, [r3, #40]	; 0x28
 80032e0:	e026      	b.n	8003330 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032e6:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 80032e8:	2300      	movs	r3, #0
 80032ea:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	689b      	ldr	r3, [r3, #8]
 80032f0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80032f4:	d007      	beq.n	8003306 <UART_Receive_IT+0x74>
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	689b      	ldr	r3, [r3, #8]
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d10a      	bne.n	8003314 <UART_Receive_IT+0x82>
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	691b      	ldr	r3, [r3, #16]
 8003302:	2b00      	cmp	r3, #0
 8003304:	d106      	bne.n	8003314 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	685b      	ldr	r3, [r3, #4]
 800330c:	b2da      	uxtb	r2, r3
 800330e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003310:	701a      	strb	r2, [r3, #0]
 8003312:	e008      	b.n	8003326 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	685b      	ldr	r3, [r3, #4]
 800331a:	b2db      	uxtb	r3, r3
 800331c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003320:	b2da      	uxtb	r2, r3
 8003322:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003324:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800332a:	1c5a      	adds	r2, r3, #1
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003334:	b29b      	uxth	r3, r3
 8003336:	3b01      	subs	r3, #1
 8003338:	b29b      	uxth	r3, r3
 800333a:	687a      	ldr	r2, [r7, #4]
 800333c:	4619      	mov	r1, r3
 800333e:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8003340:	2b00      	cmp	r3, #0
 8003342:	d15a      	bne.n	80033fa <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	68da      	ldr	r2, [r3, #12]
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	f022 0220 	bic.w	r2, r2, #32
 8003352:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	68da      	ldr	r2, [r3, #12]
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003362:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	695a      	ldr	r2, [r3, #20]
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	f022 0201 	bic.w	r2, r2, #1
 8003372:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	2220      	movs	r2, #32
 8003378:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003380:	2b01      	cmp	r3, #1
 8003382:	d135      	bne.n	80033f0 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	2200      	movs	r2, #0
 8003388:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	330c      	adds	r3, #12
 8003390:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003392:	697b      	ldr	r3, [r7, #20]
 8003394:	e853 3f00 	ldrex	r3, [r3]
 8003398:	613b      	str	r3, [r7, #16]
   return(result);
 800339a:	693b      	ldr	r3, [r7, #16]
 800339c:	f023 0310 	bic.w	r3, r3, #16
 80033a0:	627b      	str	r3, [r7, #36]	; 0x24
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	330c      	adds	r3, #12
 80033a8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80033aa:	623a      	str	r2, [r7, #32]
 80033ac:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80033ae:	69f9      	ldr	r1, [r7, #28]
 80033b0:	6a3a      	ldr	r2, [r7, #32]
 80033b2:	e841 2300 	strex	r3, r2, [r1]
 80033b6:	61bb      	str	r3, [r7, #24]
   return(result);
 80033b8:	69bb      	ldr	r3, [r7, #24]
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d1e5      	bne.n	800338a <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	f003 0310 	and.w	r3, r3, #16
 80033c8:	2b10      	cmp	r3, #16
 80033ca:	d10a      	bne.n	80033e2 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80033cc:	2300      	movs	r3, #0
 80033ce:	60fb      	str	r3, [r7, #12]
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	60fb      	str	r3, [r7, #12]
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	685b      	ldr	r3, [r3, #4]
 80033de:	60fb      	str	r3, [r7, #12]
 80033e0:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80033e6:	4619      	mov	r1, r3
 80033e8:	6878      	ldr	r0, [r7, #4]
 80033ea:	f7ff fdbb 	bl	8002f64 <HAL_UARTEx_RxEventCallback>
 80033ee:	e002      	b.n	80033f6 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80033f0:	6878      	ldr	r0, [r7, #4]
 80033f2:	f7fd f9c3 	bl	800077c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80033f6:	2300      	movs	r3, #0
 80033f8:	e002      	b.n	8003400 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 80033fa:	2300      	movs	r3, #0
 80033fc:	e000      	b.n	8003400 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 80033fe:	2302      	movs	r3, #2
  }
}
 8003400:	4618      	mov	r0, r3
 8003402:	3730      	adds	r7, #48	; 0x30
 8003404:	46bd      	mov	sp, r7
 8003406:	bd80      	pop	{r7, pc}

08003408 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003408:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800340c:	b0c0      	sub	sp, #256	; 0x100
 800340e:	af00      	add	r7, sp, #0
 8003410:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003414:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	691b      	ldr	r3, [r3, #16]
 800341c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8003420:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003424:	68d9      	ldr	r1, [r3, #12]
 8003426:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800342a:	681a      	ldr	r2, [r3, #0]
 800342c:	ea40 0301 	orr.w	r3, r0, r1
 8003430:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003432:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003436:	689a      	ldr	r2, [r3, #8]
 8003438:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800343c:	691b      	ldr	r3, [r3, #16]
 800343e:	431a      	orrs	r2, r3
 8003440:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003444:	695b      	ldr	r3, [r3, #20]
 8003446:	431a      	orrs	r2, r3
 8003448:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800344c:	69db      	ldr	r3, [r3, #28]
 800344e:	4313      	orrs	r3, r2
 8003450:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003454:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	68db      	ldr	r3, [r3, #12]
 800345c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8003460:	f021 010c 	bic.w	r1, r1, #12
 8003464:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003468:	681a      	ldr	r2, [r3, #0]
 800346a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800346e:	430b      	orrs	r3, r1
 8003470:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003472:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	695b      	ldr	r3, [r3, #20]
 800347a:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800347e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003482:	6999      	ldr	r1, [r3, #24]
 8003484:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003488:	681a      	ldr	r2, [r3, #0]
 800348a:	ea40 0301 	orr.w	r3, r0, r1
 800348e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003490:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003494:	681a      	ldr	r2, [r3, #0]
 8003496:	4b8f      	ldr	r3, [pc, #572]	; (80036d4 <UART_SetConfig+0x2cc>)
 8003498:	429a      	cmp	r2, r3
 800349a:	d005      	beq.n	80034a8 <UART_SetConfig+0xa0>
 800349c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80034a0:	681a      	ldr	r2, [r3, #0]
 80034a2:	4b8d      	ldr	r3, [pc, #564]	; (80036d8 <UART_SetConfig+0x2d0>)
 80034a4:	429a      	cmp	r2, r3
 80034a6:	d104      	bne.n	80034b2 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80034a8:	f7fe fd50 	bl	8001f4c <HAL_RCC_GetPCLK2Freq>
 80034ac:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80034b0:	e003      	b.n	80034ba <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80034b2:	f7fe fd37 	bl	8001f24 <HAL_RCC_GetPCLK1Freq>
 80034b6:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80034ba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80034be:	69db      	ldr	r3, [r3, #28]
 80034c0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80034c4:	f040 810c 	bne.w	80036e0 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80034c8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80034cc:	2200      	movs	r2, #0
 80034ce:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80034d2:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80034d6:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80034da:	4622      	mov	r2, r4
 80034dc:	462b      	mov	r3, r5
 80034de:	1891      	adds	r1, r2, r2
 80034e0:	65b9      	str	r1, [r7, #88]	; 0x58
 80034e2:	415b      	adcs	r3, r3
 80034e4:	65fb      	str	r3, [r7, #92]	; 0x5c
 80034e6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80034ea:	4621      	mov	r1, r4
 80034ec:	eb12 0801 	adds.w	r8, r2, r1
 80034f0:	4629      	mov	r1, r5
 80034f2:	eb43 0901 	adc.w	r9, r3, r1
 80034f6:	f04f 0200 	mov.w	r2, #0
 80034fa:	f04f 0300 	mov.w	r3, #0
 80034fe:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003502:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003506:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800350a:	4690      	mov	r8, r2
 800350c:	4699      	mov	r9, r3
 800350e:	4623      	mov	r3, r4
 8003510:	eb18 0303 	adds.w	r3, r8, r3
 8003514:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8003518:	462b      	mov	r3, r5
 800351a:	eb49 0303 	adc.w	r3, r9, r3
 800351e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8003522:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003526:	685b      	ldr	r3, [r3, #4]
 8003528:	2200      	movs	r2, #0
 800352a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800352e:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8003532:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8003536:	460b      	mov	r3, r1
 8003538:	18db      	adds	r3, r3, r3
 800353a:	653b      	str	r3, [r7, #80]	; 0x50
 800353c:	4613      	mov	r3, r2
 800353e:	eb42 0303 	adc.w	r3, r2, r3
 8003542:	657b      	str	r3, [r7, #84]	; 0x54
 8003544:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8003548:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800354c:	f7fc fe98 	bl	8000280 <__aeabi_uldivmod>
 8003550:	4602      	mov	r2, r0
 8003552:	460b      	mov	r3, r1
 8003554:	4b61      	ldr	r3, [pc, #388]	; (80036dc <UART_SetConfig+0x2d4>)
 8003556:	fba3 2302 	umull	r2, r3, r3, r2
 800355a:	095b      	lsrs	r3, r3, #5
 800355c:	011c      	lsls	r4, r3, #4
 800355e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003562:	2200      	movs	r2, #0
 8003564:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003568:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800356c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8003570:	4642      	mov	r2, r8
 8003572:	464b      	mov	r3, r9
 8003574:	1891      	adds	r1, r2, r2
 8003576:	64b9      	str	r1, [r7, #72]	; 0x48
 8003578:	415b      	adcs	r3, r3
 800357a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800357c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8003580:	4641      	mov	r1, r8
 8003582:	eb12 0a01 	adds.w	sl, r2, r1
 8003586:	4649      	mov	r1, r9
 8003588:	eb43 0b01 	adc.w	fp, r3, r1
 800358c:	f04f 0200 	mov.w	r2, #0
 8003590:	f04f 0300 	mov.w	r3, #0
 8003594:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003598:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800359c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80035a0:	4692      	mov	sl, r2
 80035a2:	469b      	mov	fp, r3
 80035a4:	4643      	mov	r3, r8
 80035a6:	eb1a 0303 	adds.w	r3, sl, r3
 80035aa:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80035ae:	464b      	mov	r3, r9
 80035b0:	eb4b 0303 	adc.w	r3, fp, r3
 80035b4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80035b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80035bc:	685b      	ldr	r3, [r3, #4]
 80035be:	2200      	movs	r2, #0
 80035c0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80035c4:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80035c8:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80035cc:	460b      	mov	r3, r1
 80035ce:	18db      	adds	r3, r3, r3
 80035d0:	643b      	str	r3, [r7, #64]	; 0x40
 80035d2:	4613      	mov	r3, r2
 80035d4:	eb42 0303 	adc.w	r3, r2, r3
 80035d8:	647b      	str	r3, [r7, #68]	; 0x44
 80035da:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80035de:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80035e2:	f7fc fe4d 	bl	8000280 <__aeabi_uldivmod>
 80035e6:	4602      	mov	r2, r0
 80035e8:	460b      	mov	r3, r1
 80035ea:	4611      	mov	r1, r2
 80035ec:	4b3b      	ldr	r3, [pc, #236]	; (80036dc <UART_SetConfig+0x2d4>)
 80035ee:	fba3 2301 	umull	r2, r3, r3, r1
 80035f2:	095b      	lsrs	r3, r3, #5
 80035f4:	2264      	movs	r2, #100	; 0x64
 80035f6:	fb02 f303 	mul.w	r3, r2, r3
 80035fa:	1acb      	subs	r3, r1, r3
 80035fc:	00db      	lsls	r3, r3, #3
 80035fe:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8003602:	4b36      	ldr	r3, [pc, #216]	; (80036dc <UART_SetConfig+0x2d4>)
 8003604:	fba3 2302 	umull	r2, r3, r3, r2
 8003608:	095b      	lsrs	r3, r3, #5
 800360a:	005b      	lsls	r3, r3, #1
 800360c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003610:	441c      	add	r4, r3
 8003612:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003616:	2200      	movs	r2, #0
 8003618:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800361c:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8003620:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8003624:	4642      	mov	r2, r8
 8003626:	464b      	mov	r3, r9
 8003628:	1891      	adds	r1, r2, r2
 800362a:	63b9      	str	r1, [r7, #56]	; 0x38
 800362c:	415b      	adcs	r3, r3
 800362e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003630:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003634:	4641      	mov	r1, r8
 8003636:	1851      	adds	r1, r2, r1
 8003638:	6339      	str	r1, [r7, #48]	; 0x30
 800363a:	4649      	mov	r1, r9
 800363c:	414b      	adcs	r3, r1
 800363e:	637b      	str	r3, [r7, #52]	; 0x34
 8003640:	f04f 0200 	mov.w	r2, #0
 8003644:	f04f 0300 	mov.w	r3, #0
 8003648:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800364c:	4659      	mov	r1, fp
 800364e:	00cb      	lsls	r3, r1, #3
 8003650:	4651      	mov	r1, sl
 8003652:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003656:	4651      	mov	r1, sl
 8003658:	00ca      	lsls	r2, r1, #3
 800365a:	4610      	mov	r0, r2
 800365c:	4619      	mov	r1, r3
 800365e:	4603      	mov	r3, r0
 8003660:	4642      	mov	r2, r8
 8003662:	189b      	adds	r3, r3, r2
 8003664:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003668:	464b      	mov	r3, r9
 800366a:	460a      	mov	r2, r1
 800366c:	eb42 0303 	adc.w	r3, r2, r3
 8003670:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003674:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003678:	685b      	ldr	r3, [r3, #4]
 800367a:	2200      	movs	r2, #0
 800367c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8003680:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8003684:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8003688:	460b      	mov	r3, r1
 800368a:	18db      	adds	r3, r3, r3
 800368c:	62bb      	str	r3, [r7, #40]	; 0x28
 800368e:	4613      	mov	r3, r2
 8003690:	eb42 0303 	adc.w	r3, r2, r3
 8003694:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003696:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800369a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800369e:	f7fc fdef 	bl	8000280 <__aeabi_uldivmod>
 80036a2:	4602      	mov	r2, r0
 80036a4:	460b      	mov	r3, r1
 80036a6:	4b0d      	ldr	r3, [pc, #52]	; (80036dc <UART_SetConfig+0x2d4>)
 80036a8:	fba3 1302 	umull	r1, r3, r3, r2
 80036ac:	095b      	lsrs	r3, r3, #5
 80036ae:	2164      	movs	r1, #100	; 0x64
 80036b0:	fb01 f303 	mul.w	r3, r1, r3
 80036b4:	1ad3      	subs	r3, r2, r3
 80036b6:	00db      	lsls	r3, r3, #3
 80036b8:	3332      	adds	r3, #50	; 0x32
 80036ba:	4a08      	ldr	r2, [pc, #32]	; (80036dc <UART_SetConfig+0x2d4>)
 80036bc:	fba2 2303 	umull	r2, r3, r2, r3
 80036c0:	095b      	lsrs	r3, r3, #5
 80036c2:	f003 0207 	and.w	r2, r3, #7
 80036c6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	4422      	add	r2, r4
 80036ce:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80036d0:	e105      	b.n	80038de <UART_SetConfig+0x4d6>
 80036d2:	bf00      	nop
 80036d4:	40011000 	.word	0x40011000
 80036d8:	40011400 	.word	0x40011400
 80036dc:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80036e0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80036e4:	2200      	movs	r2, #0
 80036e6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80036ea:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80036ee:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80036f2:	4642      	mov	r2, r8
 80036f4:	464b      	mov	r3, r9
 80036f6:	1891      	adds	r1, r2, r2
 80036f8:	6239      	str	r1, [r7, #32]
 80036fa:	415b      	adcs	r3, r3
 80036fc:	627b      	str	r3, [r7, #36]	; 0x24
 80036fe:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003702:	4641      	mov	r1, r8
 8003704:	1854      	adds	r4, r2, r1
 8003706:	4649      	mov	r1, r9
 8003708:	eb43 0501 	adc.w	r5, r3, r1
 800370c:	f04f 0200 	mov.w	r2, #0
 8003710:	f04f 0300 	mov.w	r3, #0
 8003714:	00eb      	lsls	r3, r5, #3
 8003716:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800371a:	00e2      	lsls	r2, r4, #3
 800371c:	4614      	mov	r4, r2
 800371e:	461d      	mov	r5, r3
 8003720:	4643      	mov	r3, r8
 8003722:	18e3      	adds	r3, r4, r3
 8003724:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003728:	464b      	mov	r3, r9
 800372a:	eb45 0303 	adc.w	r3, r5, r3
 800372e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8003732:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003736:	685b      	ldr	r3, [r3, #4]
 8003738:	2200      	movs	r2, #0
 800373a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800373e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003742:	f04f 0200 	mov.w	r2, #0
 8003746:	f04f 0300 	mov.w	r3, #0
 800374a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800374e:	4629      	mov	r1, r5
 8003750:	008b      	lsls	r3, r1, #2
 8003752:	4621      	mov	r1, r4
 8003754:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003758:	4621      	mov	r1, r4
 800375a:	008a      	lsls	r2, r1, #2
 800375c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8003760:	f7fc fd8e 	bl	8000280 <__aeabi_uldivmod>
 8003764:	4602      	mov	r2, r0
 8003766:	460b      	mov	r3, r1
 8003768:	4b60      	ldr	r3, [pc, #384]	; (80038ec <UART_SetConfig+0x4e4>)
 800376a:	fba3 2302 	umull	r2, r3, r3, r2
 800376e:	095b      	lsrs	r3, r3, #5
 8003770:	011c      	lsls	r4, r3, #4
 8003772:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003776:	2200      	movs	r2, #0
 8003778:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800377c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8003780:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8003784:	4642      	mov	r2, r8
 8003786:	464b      	mov	r3, r9
 8003788:	1891      	adds	r1, r2, r2
 800378a:	61b9      	str	r1, [r7, #24]
 800378c:	415b      	adcs	r3, r3
 800378e:	61fb      	str	r3, [r7, #28]
 8003790:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003794:	4641      	mov	r1, r8
 8003796:	1851      	adds	r1, r2, r1
 8003798:	6139      	str	r1, [r7, #16]
 800379a:	4649      	mov	r1, r9
 800379c:	414b      	adcs	r3, r1
 800379e:	617b      	str	r3, [r7, #20]
 80037a0:	f04f 0200 	mov.w	r2, #0
 80037a4:	f04f 0300 	mov.w	r3, #0
 80037a8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80037ac:	4659      	mov	r1, fp
 80037ae:	00cb      	lsls	r3, r1, #3
 80037b0:	4651      	mov	r1, sl
 80037b2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80037b6:	4651      	mov	r1, sl
 80037b8:	00ca      	lsls	r2, r1, #3
 80037ba:	4610      	mov	r0, r2
 80037bc:	4619      	mov	r1, r3
 80037be:	4603      	mov	r3, r0
 80037c0:	4642      	mov	r2, r8
 80037c2:	189b      	adds	r3, r3, r2
 80037c4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80037c8:	464b      	mov	r3, r9
 80037ca:	460a      	mov	r2, r1
 80037cc:	eb42 0303 	adc.w	r3, r2, r3
 80037d0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80037d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80037d8:	685b      	ldr	r3, [r3, #4]
 80037da:	2200      	movs	r2, #0
 80037dc:	67bb      	str	r3, [r7, #120]	; 0x78
 80037de:	67fa      	str	r2, [r7, #124]	; 0x7c
 80037e0:	f04f 0200 	mov.w	r2, #0
 80037e4:	f04f 0300 	mov.w	r3, #0
 80037e8:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80037ec:	4649      	mov	r1, r9
 80037ee:	008b      	lsls	r3, r1, #2
 80037f0:	4641      	mov	r1, r8
 80037f2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80037f6:	4641      	mov	r1, r8
 80037f8:	008a      	lsls	r2, r1, #2
 80037fa:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80037fe:	f7fc fd3f 	bl	8000280 <__aeabi_uldivmod>
 8003802:	4602      	mov	r2, r0
 8003804:	460b      	mov	r3, r1
 8003806:	4b39      	ldr	r3, [pc, #228]	; (80038ec <UART_SetConfig+0x4e4>)
 8003808:	fba3 1302 	umull	r1, r3, r3, r2
 800380c:	095b      	lsrs	r3, r3, #5
 800380e:	2164      	movs	r1, #100	; 0x64
 8003810:	fb01 f303 	mul.w	r3, r1, r3
 8003814:	1ad3      	subs	r3, r2, r3
 8003816:	011b      	lsls	r3, r3, #4
 8003818:	3332      	adds	r3, #50	; 0x32
 800381a:	4a34      	ldr	r2, [pc, #208]	; (80038ec <UART_SetConfig+0x4e4>)
 800381c:	fba2 2303 	umull	r2, r3, r2, r3
 8003820:	095b      	lsrs	r3, r3, #5
 8003822:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003826:	441c      	add	r4, r3
 8003828:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800382c:	2200      	movs	r2, #0
 800382e:	673b      	str	r3, [r7, #112]	; 0x70
 8003830:	677a      	str	r2, [r7, #116]	; 0x74
 8003832:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8003836:	4642      	mov	r2, r8
 8003838:	464b      	mov	r3, r9
 800383a:	1891      	adds	r1, r2, r2
 800383c:	60b9      	str	r1, [r7, #8]
 800383e:	415b      	adcs	r3, r3
 8003840:	60fb      	str	r3, [r7, #12]
 8003842:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003846:	4641      	mov	r1, r8
 8003848:	1851      	adds	r1, r2, r1
 800384a:	6039      	str	r1, [r7, #0]
 800384c:	4649      	mov	r1, r9
 800384e:	414b      	adcs	r3, r1
 8003850:	607b      	str	r3, [r7, #4]
 8003852:	f04f 0200 	mov.w	r2, #0
 8003856:	f04f 0300 	mov.w	r3, #0
 800385a:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800385e:	4659      	mov	r1, fp
 8003860:	00cb      	lsls	r3, r1, #3
 8003862:	4651      	mov	r1, sl
 8003864:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003868:	4651      	mov	r1, sl
 800386a:	00ca      	lsls	r2, r1, #3
 800386c:	4610      	mov	r0, r2
 800386e:	4619      	mov	r1, r3
 8003870:	4603      	mov	r3, r0
 8003872:	4642      	mov	r2, r8
 8003874:	189b      	adds	r3, r3, r2
 8003876:	66bb      	str	r3, [r7, #104]	; 0x68
 8003878:	464b      	mov	r3, r9
 800387a:	460a      	mov	r2, r1
 800387c:	eb42 0303 	adc.w	r3, r2, r3
 8003880:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003882:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003886:	685b      	ldr	r3, [r3, #4]
 8003888:	2200      	movs	r2, #0
 800388a:	663b      	str	r3, [r7, #96]	; 0x60
 800388c:	667a      	str	r2, [r7, #100]	; 0x64
 800388e:	f04f 0200 	mov.w	r2, #0
 8003892:	f04f 0300 	mov.w	r3, #0
 8003896:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800389a:	4649      	mov	r1, r9
 800389c:	008b      	lsls	r3, r1, #2
 800389e:	4641      	mov	r1, r8
 80038a0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80038a4:	4641      	mov	r1, r8
 80038a6:	008a      	lsls	r2, r1, #2
 80038a8:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80038ac:	f7fc fce8 	bl	8000280 <__aeabi_uldivmod>
 80038b0:	4602      	mov	r2, r0
 80038b2:	460b      	mov	r3, r1
 80038b4:	4b0d      	ldr	r3, [pc, #52]	; (80038ec <UART_SetConfig+0x4e4>)
 80038b6:	fba3 1302 	umull	r1, r3, r3, r2
 80038ba:	095b      	lsrs	r3, r3, #5
 80038bc:	2164      	movs	r1, #100	; 0x64
 80038be:	fb01 f303 	mul.w	r3, r1, r3
 80038c2:	1ad3      	subs	r3, r2, r3
 80038c4:	011b      	lsls	r3, r3, #4
 80038c6:	3332      	adds	r3, #50	; 0x32
 80038c8:	4a08      	ldr	r2, [pc, #32]	; (80038ec <UART_SetConfig+0x4e4>)
 80038ca:	fba2 2303 	umull	r2, r3, r2, r3
 80038ce:	095b      	lsrs	r3, r3, #5
 80038d0:	f003 020f 	and.w	r2, r3, #15
 80038d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	4422      	add	r2, r4
 80038dc:	609a      	str	r2, [r3, #8]
}
 80038de:	bf00      	nop
 80038e0:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80038e4:	46bd      	mov	sp, r7
 80038e6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80038ea:	bf00      	nop
 80038ec:	51eb851f 	.word	0x51eb851f

080038f0 <__errno>:
 80038f0:	4b01      	ldr	r3, [pc, #4]	; (80038f8 <__errno+0x8>)
 80038f2:	6818      	ldr	r0, [r3, #0]
 80038f4:	4770      	bx	lr
 80038f6:	bf00      	nop
 80038f8:	20000014 	.word	0x20000014

080038fc <__libc_init_array>:
 80038fc:	b570      	push	{r4, r5, r6, lr}
 80038fe:	4d0d      	ldr	r5, [pc, #52]	; (8003934 <__libc_init_array+0x38>)
 8003900:	4c0d      	ldr	r4, [pc, #52]	; (8003938 <__libc_init_array+0x3c>)
 8003902:	1b64      	subs	r4, r4, r5
 8003904:	10a4      	asrs	r4, r4, #2
 8003906:	2600      	movs	r6, #0
 8003908:	42a6      	cmp	r6, r4
 800390a:	d109      	bne.n	8003920 <__libc_init_array+0x24>
 800390c:	4d0b      	ldr	r5, [pc, #44]	; (800393c <__libc_init_array+0x40>)
 800390e:	4c0c      	ldr	r4, [pc, #48]	; (8003940 <__libc_init_array+0x44>)
 8003910:	f000 fc8e 	bl	8004230 <_init>
 8003914:	1b64      	subs	r4, r4, r5
 8003916:	10a4      	asrs	r4, r4, #2
 8003918:	2600      	movs	r6, #0
 800391a:	42a6      	cmp	r6, r4
 800391c:	d105      	bne.n	800392a <__libc_init_array+0x2e>
 800391e:	bd70      	pop	{r4, r5, r6, pc}
 8003920:	f855 3b04 	ldr.w	r3, [r5], #4
 8003924:	4798      	blx	r3
 8003926:	3601      	adds	r6, #1
 8003928:	e7ee      	b.n	8003908 <__libc_init_array+0xc>
 800392a:	f855 3b04 	ldr.w	r3, [r5], #4
 800392e:	4798      	blx	r3
 8003930:	3601      	adds	r6, #1
 8003932:	e7f2      	b.n	800391a <__libc_init_array+0x1e>
 8003934:	080042ac 	.word	0x080042ac
 8003938:	080042ac 	.word	0x080042ac
 800393c:	080042ac 	.word	0x080042ac
 8003940:	080042b0 	.word	0x080042b0

08003944 <memset>:
 8003944:	4402      	add	r2, r0
 8003946:	4603      	mov	r3, r0
 8003948:	4293      	cmp	r3, r2
 800394a:	d100      	bne.n	800394e <memset+0xa>
 800394c:	4770      	bx	lr
 800394e:	f803 1b01 	strb.w	r1, [r3], #1
 8003952:	e7f9      	b.n	8003948 <memset+0x4>

08003954 <siprintf>:
 8003954:	b40e      	push	{r1, r2, r3}
 8003956:	b500      	push	{lr}
 8003958:	b09c      	sub	sp, #112	; 0x70
 800395a:	ab1d      	add	r3, sp, #116	; 0x74
 800395c:	9002      	str	r0, [sp, #8]
 800395e:	9006      	str	r0, [sp, #24]
 8003960:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8003964:	4809      	ldr	r0, [pc, #36]	; (800398c <siprintf+0x38>)
 8003966:	9107      	str	r1, [sp, #28]
 8003968:	9104      	str	r1, [sp, #16]
 800396a:	4909      	ldr	r1, [pc, #36]	; (8003990 <siprintf+0x3c>)
 800396c:	f853 2b04 	ldr.w	r2, [r3], #4
 8003970:	9105      	str	r1, [sp, #20]
 8003972:	6800      	ldr	r0, [r0, #0]
 8003974:	9301      	str	r3, [sp, #4]
 8003976:	a902      	add	r1, sp, #8
 8003978:	f000 f868 	bl	8003a4c <_svfiprintf_r>
 800397c:	9b02      	ldr	r3, [sp, #8]
 800397e:	2200      	movs	r2, #0
 8003980:	701a      	strb	r2, [r3, #0]
 8003982:	b01c      	add	sp, #112	; 0x70
 8003984:	f85d eb04 	ldr.w	lr, [sp], #4
 8003988:	b003      	add	sp, #12
 800398a:	4770      	bx	lr
 800398c:	20000014 	.word	0x20000014
 8003990:	ffff0208 	.word	0xffff0208

08003994 <__ssputs_r>:
 8003994:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003998:	688e      	ldr	r6, [r1, #8]
 800399a:	429e      	cmp	r6, r3
 800399c:	4682      	mov	sl, r0
 800399e:	460c      	mov	r4, r1
 80039a0:	4690      	mov	r8, r2
 80039a2:	461f      	mov	r7, r3
 80039a4:	d838      	bhi.n	8003a18 <__ssputs_r+0x84>
 80039a6:	898a      	ldrh	r2, [r1, #12]
 80039a8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80039ac:	d032      	beq.n	8003a14 <__ssputs_r+0x80>
 80039ae:	6825      	ldr	r5, [r4, #0]
 80039b0:	6909      	ldr	r1, [r1, #16]
 80039b2:	eba5 0901 	sub.w	r9, r5, r1
 80039b6:	6965      	ldr	r5, [r4, #20]
 80039b8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80039bc:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80039c0:	3301      	adds	r3, #1
 80039c2:	444b      	add	r3, r9
 80039c4:	106d      	asrs	r5, r5, #1
 80039c6:	429d      	cmp	r5, r3
 80039c8:	bf38      	it	cc
 80039ca:	461d      	movcc	r5, r3
 80039cc:	0553      	lsls	r3, r2, #21
 80039ce:	d531      	bpl.n	8003a34 <__ssputs_r+0xa0>
 80039d0:	4629      	mov	r1, r5
 80039d2:	f000 fb63 	bl	800409c <_malloc_r>
 80039d6:	4606      	mov	r6, r0
 80039d8:	b950      	cbnz	r0, 80039f0 <__ssputs_r+0x5c>
 80039da:	230c      	movs	r3, #12
 80039dc:	f8ca 3000 	str.w	r3, [sl]
 80039e0:	89a3      	ldrh	r3, [r4, #12]
 80039e2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80039e6:	81a3      	strh	r3, [r4, #12]
 80039e8:	f04f 30ff 	mov.w	r0, #4294967295
 80039ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80039f0:	6921      	ldr	r1, [r4, #16]
 80039f2:	464a      	mov	r2, r9
 80039f4:	f000 fabe 	bl	8003f74 <memcpy>
 80039f8:	89a3      	ldrh	r3, [r4, #12]
 80039fa:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80039fe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003a02:	81a3      	strh	r3, [r4, #12]
 8003a04:	6126      	str	r6, [r4, #16]
 8003a06:	6165      	str	r5, [r4, #20]
 8003a08:	444e      	add	r6, r9
 8003a0a:	eba5 0509 	sub.w	r5, r5, r9
 8003a0e:	6026      	str	r6, [r4, #0]
 8003a10:	60a5      	str	r5, [r4, #8]
 8003a12:	463e      	mov	r6, r7
 8003a14:	42be      	cmp	r6, r7
 8003a16:	d900      	bls.n	8003a1a <__ssputs_r+0x86>
 8003a18:	463e      	mov	r6, r7
 8003a1a:	6820      	ldr	r0, [r4, #0]
 8003a1c:	4632      	mov	r2, r6
 8003a1e:	4641      	mov	r1, r8
 8003a20:	f000 fab6 	bl	8003f90 <memmove>
 8003a24:	68a3      	ldr	r3, [r4, #8]
 8003a26:	1b9b      	subs	r3, r3, r6
 8003a28:	60a3      	str	r3, [r4, #8]
 8003a2a:	6823      	ldr	r3, [r4, #0]
 8003a2c:	4433      	add	r3, r6
 8003a2e:	6023      	str	r3, [r4, #0]
 8003a30:	2000      	movs	r0, #0
 8003a32:	e7db      	b.n	80039ec <__ssputs_r+0x58>
 8003a34:	462a      	mov	r2, r5
 8003a36:	f000 fba5 	bl	8004184 <_realloc_r>
 8003a3a:	4606      	mov	r6, r0
 8003a3c:	2800      	cmp	r0, #0
 8003a3e:	d1e1      	bne.n	8003a04 <__ssputs_r+0x70>
 8003a40:	6921      	ldr	r1, [r4, #16]
 8003a42:	4650      	mov	r0, sl
 8003a44:	f000 fabe 	bl	8003fc4 <_free_r>
 8003a48:	e7c7      	b.n	80039da <__ssputs_r+0x46>
	...

08003a4c <_svfiprintf_r>:
 8003a4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003a50:	4698      	mov	r8, r3
 8003a52:	898b      	ldrh	r3, [r1, #12]
 8003a54:	061b      	lsls	r3, r3, #24
 8003a56:	b09d      	sub	sp, #116	; 0x74
 8003a58:	4607      	mov	r7, r0
 8003a5a:	460d      	mov	r5, r1
 8003a5c:	4614      	mov	r4, r2
 8003a5e:	d50e      	bpl.n	8003a7e <_svfiprintf_r+0x32>
 8003a60:	690b      	ldr	r3, [r1, #16]
 8003a62:	b963      	cbnz	r3, 8003a7e <_svfiprintf_r+0x32>
 8003a64:	2140      	movs	r1, #64	; 0x40
 8003a66:	f000 fb19 	bl	800409c <_malloc_r>
 8003a6a:	6028      	str	r0, [r5, #0]
 8003a6c:	6128      	str	r0, [r5, #16]
 8003a6e:	b920      	cbnz	r0, 8003a7a <_svfiprintf_r+0x2e>
 8003a70:	230c      	movs	r3, #12
 8003a72:	603b      	str	r3, [r7, #0]
 8003a74:	f04f 30ff 	mov.w	r0, #4294967295
 8003a78:	e0d1      	b.n	8003c1e <_svfiprintf_r+0x1d2>
 8003a7a:	2340      	movs	r3, #64	; 0x40
 8003a7c:	616b      	str	r3, [r5, #20]
 8003a7e:	2300      	movs	r3, #0
 8003a80:	9309      	str	r3, [sp, #36]	; 0x24
 8003a82:	2320      	movs	r3, #32
 8003a84:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003a88:	f8cd 800c 	str.w	r8, [sp, #12]
 8003a8c:	2330      	movs	r3, #48	; 0x30
 8003a8e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8003c38 <_svfiprintf_r+0x1ec>
 8003a92:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003a96:	f04f 0901 	mov.w	r9, #1
 8003a9a:	4623      	mov	r3, r4
 8003a9c:	469a      	mov	sl, r3
 8003a9e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003aa2:	b10a      	cbz	r2, 8003aa8 <_svfiprintf_r+0x5c>
 8003aa4:	2a25      	cmp	r2, #37	; 0x25
 8003aa6:	d1f9      	bne.n	8003a9c <_svfiprintf_r+0x50>
 8003aa8:	ebba 0b04 	subs.w	fp, sl, r4
 8003aac:	d00b      	beq.n	8003ac6 <_svfiprintf_r+0x7a>
 8003aae:	465b      	mov	r3, fp
 8003ab0:	4622      	mov	r2, r4
 8003ab2:	4629      	mov	r1, r5
 8003ab4:	4638      	mov	r0, r7
 8003ab6:	f7ff ff6d 	bl	8003994 <__ssputs_r>
 8003aba:	3001      	adds	r0, #1
 8003abc:	f000 80aa 	beq.w	8003c14 <_svfiprintf_r+0x1c8>
 8003ac0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003ac2:	445a      	add	r2, fp
 8003ac4:	9209      	str	r2, [sp, #36]	; 0x24
 8003ac6:	f89a 3000 	ldrb.w	r3, [sl]
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	f000 80a2 	beq.w	8003c14 <_svfiprintf_r+0x1c8>
 8003ad0:	2300      	movs	r3, #0
 8003ad2:	f04f 32ff 	mov.w	r2, #4294967295
 8003ad6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003ada:	f10a 0a01 	add.w	sl, sl, #1
 8003ade:	9304      	str	r3, [sp, #16]
 8003ae0:	9307      	str	r3, [sp, #28]
 8003ae2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003ae6:	931a      	str	r3, [sp, #104]	; 0x68
 8003ae8:	4654      	mov	r4, sl
 8003aea:	2205      	movs	r2, #5
 8003aec:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003af0:	4851      	ldr	r0, [pc, #324]	; (8003c38 <_svfiprintf_r+0x1ec>)
 8003af2:	f7fc fb75 	bl	80001e0 <memchr>
 8003af6:	9a04      	ldr	r2, [sp, #16]
 8003af8:	b9d8      	cbnz	r0, 8003b32 <_svfiprintf_r+0xe6>
 8003afa:	06d0      	lsls	r0, r2, #27
 8003afc:	bf44      	itt	mi
 8003afe:	2320      	movmi	r3, #32
 8003b00:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003b04:	0711      	lsls	r1, r2, #28
 8003b06:	bf44      	itt	mi
 8003b08:	232b      	movmi	r3, #43	; 0x2b
 8003b0a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003b0e:	f89a 3000 	ldrb.w	r3, [sl]
 8003b12:	2b2a      	cmp	r3, #42	; 0x2a
 8003b14:	d015      	beq.n	8003b42 <_svfiprintf_r+0xf6>
 8003b16:	9a07      	ldr	r2, [sp, #28]
 8003b18:	4654      	mov	r4, sl
 8003b1a:	2000      	movs	r0, #0
 8003b1c:	f04f 0c0a 	mov.w	ip, #10
 8003b20:	4621      	mov	r1, r4
 8003b22:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003b26:	3b30      	subs	r3, #48	; 0x30
 8003b28:	2b09      	cmp	r3, #9
 8003b2a:	d94e      	bls.n	8003bca <_svfiprintf_r+0x17e>
 8003b2c:	b1b0      	cbz	r0, 8003b5c <_svfiprintf_r+0x110>
 8003b2e:	9207      	str	r2, [sp, #28]
 8003b30:	e014      	b.n	8003b5c <_svfiprintf_r+0x110>
 8003b32:	eba0 0308 	sub.w	r3, r0, r8
 8003b36:	fa09 f303 	lsl.w	r3, r9, r3
 8003b3a:	4313      	orrs	r3, r2
 8003b3c:	9304      	str	r3, [sp, #16]
 8003b3e:	46a2      	mov	sl, r4
 8003b40:	e7d2      	b.n	8003ae8 <_svfiprintf_r+0x9c>
 8003b42:	9b03      	ldr	r3, [sp, #12]
 8003b44:	1d19      	adds	r1, r3, #4
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	9103      	str	r1, [sp, #12]
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	bfbb      	ittet	lt
 8003b4e:	425b      	neglt	r3, r3
 8003b50:	f042 0202 	orrlt.w	r2, r2, #2
 8003b54:	9307      	strge	r3, [sp, #28]
 8003b56:	9307      	strlt	r3, [sp, #28]
 8003b58:	bfb8      	it	lt
 8003b5a:	9204      	strlt	r2, [sp, #16]
 8003b5c:	7823      	ldrb	r3, [r4, #0]
 8003b5e:	2b2e      	cmp	r3, #46	; 0x2e
 8003b60:	d10c      	bne.n	8003b7c <_svfiprintf_r+0x130>
 8003b62:	7863      	ldrb	r3, [r4, #1]
 8003b64:	2b2a      	cmp	r3, #42	; 0x2a
 8003b66:	d135      	bne.n	8003bd4 <_svfiprintf_r+0x188>
 8003b68:	9b03      	ldr	r3, [sp, #12]
 8003b6a:	1d1a      	adds	r2, r3, #4
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	9203      	str	r2, [sp, #12]
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	bfb8      	it	lt
 8003b74:	f04f 33ff 	movlt.w	r3, #4294967295
 8003b78:	3402      	adds	r4, #2
 8003b7a:	9305      	str	r3, [sp, #20]
 8003b7c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8003c48 <_svfiprintf_r+0x1fc>
 8003b80:	7821      	ldrb	r1, [r4, #0]
 8003b82:	2203      	movs	r2, #3
 8003b84:	4650      	mov	r0, sl
 8003b86:	f7fc fb2b 	bl	80001e0 <memchr>
 8003b8a:	b140      	cbz	r0, 8003b9e <_svfiprintf_r+0x152>
 8003b8c:	2340      	movs	r3, #64	; 0x40
 8003b8e:	eba0 000a 	sub.w	r0, r0, sl
 8003b92:	fa03 f000 	lsl.w	r0, r3, r0
 8003b96:	9b04      	ldr	r3, [sp, #16]
 8003b98:	4303      	orrs	r3, r0
 8003b9a:	3401      	adds	r4, #1
 8003b9c:	9304      	str	r3, [sp, #16]
 8003b9e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003ba2:	4826      	ldr	r0, [pc, #152]	; (8003c3c <_svfiprintf_r+0x1f0>)
 8003ba4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003ba8:	2206      	movs	r2, #6
 8003baa:	f7fc fb19 	bl	80001e0 <memchr>
 8003bae:	2800      	cmp	r0, #0
 8003bb0:	d038      	beq.n	8003c24 <_svfiprintf_r+0x1d8>
 8003bb2:	4b23      	ldr	r3, [pc, #140]	; (8003c40 <_svfiprintf_r+0x1f4>)
 8003bb4:	bb1b      	cbnz	r3, 8003bfe <_svfiprintf_r+0x1b2>
 8003bb6:	9b03      	ldr	r3, [sp, #12]
 8003bb8:	3307      	adds	r3, #7
 8003bba:	f023 0307 	bic.w	r3, r3, #7
 8003bbe:	3308      	adds	r3, #8
 8003bc0:	9303      	str	r3, [sp, #12]
 8003bc2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003bc4:	4433      	add	r3, r6
 8003bc6:	9309      	str	r3, [sp, #36]	; 0x24
 8003bc8:	e767      	b.n	8003a9a <_svfiprintf_r+0x4e>
 8003bca:	fb0c 3202 	mla	r2, ip, r2, r3
 8003bce:	460c      	mov	r4, r1
 8003bd0:	2001      	movs	r0, #1
 8003bd2:	e7a5      	b.n	8003b20 <_svfiprintf_r+0xd4>
 8003bd4:	2300      	movs	r3, #0
 8003bd6:	3401      	adds	r4, #1
 8003bd8:	9305      	str	r3, [sp, #20]
 8003bda:	4619      	mov	r1, r3
 8003bdc:	f04f 0c0a 	mov.w	ip, #10
 8003be0:	4620      	mov	r0, r4
 8003be2:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003be6:	3a30      	subs	r2, #48	; 0x30
 8003be8:	2a09      	cmp	r2, #9
 8003bea:	d903      	bls.n	8003bf4 <_svfiprintf_r+0x1a8>
 8003bec:	2b00      	cmp	r3, #0
 8003bee:	d0c5      	beq.n	8003b7c <_svfiprintf_r+0x130>
 8003bf0:	9105      	str	r1, [sp, #20]
 8003bf2:	e7c3      	b.n	8003b7c <_svfiprintf_r+0x130>
 8003bf4:	fb0c 2101 	mla	r1, ip, r1, r2
 8003bf8:	4604      	mov	r4, r0
 8003bfa:	2301      	movs	r3, #1
 8003bfc:	e7f0      	b.n	8003be0 <_svfiprintf_r+0x194>
 8003bfe:	ab03      	add	r3, sp, #12
 8003c00:	9300      	str	r3, [sp, #0]
 8003c02:	462a      	mov	r2, r5
 8003c04:	4b0f      	ldr	r3, [pc, #60]	; (8003c44 <_svfiprintf_r+0x1f8>)
 8003c06:	a904      	add	r1, sp, #16
 8003c08:	4638      	mov	r0, r7
 8003c0a:	f3af 8000 	nop.w
 8003c0e:	1c42      	adds	r2, r0, #1
 8003c10:	4606      	mov	r6, r0
 8003c12:	d1d6      	bne.n	8003bc2 <_svfiprintf_r+0x176>
 8003c14:	89ab      	ldrh	r3, [r5, #12]
 8003c16:	065b      	lsls	r3, r3, #25
 8003c18:	f53f af2c 	bmi.w	8003a74 <_svfiprintf_r+0x28>
 8003c1c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003c1e:	b01d      	add	sp, #116	; 0x74
 8003c20:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003c24:	ab03      	add	r3, sp, #12
 8003c26:	9300      	str	r3, [sp, #0]
 8003c28:	462a      	mov	r2, r5
 8003c2a:	4b06      	ldr	r3, [pc, #24]	; (8003c44 <_svfiprintf_r+0x1f8>)
 8003c2c:	a904      	add	r1, sp, #16
 8003c2e:	4638      	mov	r0, r7
 8003c30:	f000 f87a 	bl	8003d28 <_printf_i>
 8003c34:	e7eb      	b.n	8003c0e <_svfiprintf_r+0x1c2>
 8003c36:	bf00      	nop
 8003c38:	08004270 	.word	0x08004270
 8003c3c:	0800427a 	.word	0x0800427a
 8003c40:	00000000 	.word	0x00000000
 8003c44:	08003995 	.word	0x08003995
 8003c48:	08004276 	.word	0x08004276

08003c4c <_printf_common>:
 8003c4c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003c50:	4616      	mov	r6, r2
 8003c52:	4699      	mov	r9, r3
 8003c54:	688a      	ldr	r2, [r1, #8]
 8003c56:	690b      	ldr	r3, [r1, #16]
 8003c58:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003c5c:	4293      	cmp	r3, r2
 8003c5e:	bfb8      	it	lt
 8003c60:	4613      	movlt	r3, r2
 8003c62:	6033      	str	r3, [r6, #0]
 8003c64:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003c68:	4607      	mov	r7, r0
 8003c6a:	460c      	mov	r4, r1
 8003c6c:	b10a      	cbz	r2, 8003c72 <_printf_common+0x26>
 8003c6e:	3301      	adds	r3, #1
 8003c70:	6033      	str	r3, [r6, #0]
 8003c72:	6823      	ldr	r3, [r4, #0]
 8003c74:	0699      	lsls	r1, r3, #26
 8003c76:	bf42      	ittt	mi
 8003c78:	6833      	ldrmi	r3, [r6, #0]
 8003c7a:	3302      	addmi	r3, #2
 8003c7c:	6033      	strmi	r3, [r6, #0]
 8003c7e:	6825      	ldr	r5, [r4, #0]
 8003c80:	f015 0506 	ands.w	r5, r5, #6
 8003c84:	d106      	bne.n	8003c94 <_printf_common+0x48>
 8003c86:	f104 0a19 	add.w	sl, r4, #25
 8003c8a:	68e3      	ldr	r3, [r4, #12]
 8003c8c:	6832      	ldr	r2, [r6, #0]
 8003c8e:	1a9b      	subs	r3, r3, r2
 8003c90:	42ab      	cmp	r3, r5
 8003c92:	dc26      	bgt.n	8003ce2 <_printf_common+0x96>
 8003c94:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003c98:	1e13      	subs	r3, r2, #0
 8003c9a:	6822      	ldr	r2, [r4, #0]
 8003c9c:	bf18      	it	ne
 8003c9e:	2301      	movne	r3, #1
 8003ca0:	0692      	lsls	r2, r2, #26
 8003ca2:	d42b      	bmi.n	8003cfc <_printf_common+0xb0>
 8003ca4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003ca8:	4649      	mov	r1, r9
 8003caa:	4638      	mov	r0, r7
 8003cac:	47c0      	blx	r8
 8003cae:	3001      	adds	r0, #1
 8003cb0:	d01e      	beq.n	8003cf0 <_printf_common+0xa4>
 8003cb2:	6823      	ldr	r3, [r4, #0]
 8003cb4:	68e5      	ldr	r5, [r4, #12]
 8003cb6:	6832      	ldr	r2, [r6, #0]
 8003cb8:	f003 0306 	and.w	r3, r3, #6
 8003cbc:	2b04      	cmp	r3, #4
 8003cbe:	bf08      	it	eq
 8003cc0:	1aad      	subeq	r5, r5, r2
 8003cc2:	68a3      	ldr	r3, [r4, #8]
 8003cc4:	6922      	ldr	r2, [r4, #16]
 8003cc6:	bf0c      	ite	eq
 8003cc8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003ccc:	2500      	movne	r5, #0
 8003cce:	4293      	cmp	r3, r2
 8003cd0:	bfc4      	itt	gt
 8003cd2:	1a9b      	subgt	r3, r3, r2
 8003cd4:	18ed      	addgt	r5, r5, r3
 8003cd6:	2600      	movs	r6, #0
 8003cd8:	341a      	adds	r4, #26
 8003cda:	42b5      	cmp	r5, r6
 8003cdc:	d11a      	bne.n	8003d14 <_printf_common+0xc8>
 8003cde:	2000      	movs	r0, #0
 8003ce0:	e008      	b.n	8003cf4 <_printf_common+0xa8>
 8003ce2:	2301      	movs	r3, #1
 8003ce4:	4652      	mov	r2, sl
 8003ce6:	4649      	mov	r1, r9
 8003ce8:	4638      	mov	r0, r7
 8003cea:	47c0      	blx	r8
 8003cec:	3001      	adds	r0, #1
 8003cee:	d103      	bne.n	8003cf8 <_printf_common+0xac>
 8003cf0:	f04f 30ff 	mov.w	r0, #4294967295
 8003cf4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003cf8:	3501      	adds	r5, #1
 8003cfa:	e7c6      	b.n	8003c8a <_printf_common+0x3e>
 8003cfc:	18e1      	adds	r1, r4, r3
 8003cfe:	1c5a      	adds	r2, r3, #1
 8003d00:	2030      	movs	r0, #48	; 0x30
 8003d02:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003d06:	4422      	add	r2, r4
 8003d08:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003d0c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003d10:	3302      	adds	r3, #2
 8003d12:	e7c7      	b.n	8003ca4 <_printf_common+0x58>
 8003d14:	2301      	movs	r3, #1
 8003d16:	4622      	mov	r2, r4
 8003d18:	4649      	mov	r1, r9
 8003d1a:	4638      	mov	r0, r7
 8003d1c:	47c0      	blx	r8
 8003d1e:	3001      	adds	r0, #1
 8003d20:	d0e6      	beq.n	8003cf0 <_printf_common+0xa4>
 8003d22:	3601      	adds	r6, #1
 8003d24:	e7d9      	b.n	8003cda <_printf_common+0x8e>
	...

08003d28 <_printf_i>:
 8003d28:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003d2c:	7e0f      	ldrb	r7, [r1, #24]
 8003d2e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8003d30:	2f78      	cmp	r7, #120	; 0x78
 8003d32:	4691      	mov	r9, r2
 8003d34:	4680      	mov	r8, r0
 8003d36:	460c      	mov	r4, r1
 8003d38:	469a      	mov	sl, r3
 8003d3a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8003d3e:	d807      	bhi.n	8003d50 <_printf_i+0x28>
 8003d40:	2f62      	cmp	r7, #98	; 0x62
 8003d42:	d80a      	bhi.n	8003d5a <_printf_i+0x32>
 8003d44:	2f00      	cmp	r7, #0
 8003d46:	f000 80d8 	beq.w	8003efa <_printf_i+0x1d2>
 8003d4a:	2f58      	cmp	r7, #88	; 0x58
 8003d4c:	f000 80a3 	beq.w	8003e96 <_printf_i+0x16e>
 8003d50:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003d54:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8003d58:	e03a      	b.n	8003dd0 <_printf_i+0xa8>
 8003d5a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8003d5e:	2b15      	cmp	r3, #21
 8003d60:	d8f6      	bhi.n	8003d50 <_printf_i+0x28>
 8003d62:	a101      	add	r1, pc, #4	; (adr r1, 8003d68 <_printf_i+0x40>)
 8003d64:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003d68:	08003dc1 	.word	0x08003dc1
 8003d6c:	08003dd5 	.word	0x08003dd5
 8003d70:	08003d51 	.word	0x08003d51
 8003d74:	08003d51 	.word	0x08003d51
 8003d78:	08003d51 	.word	0x08003d51
 8003d7c:	08003d51 	.word	0x08003d51
 8003d80:	08003dd5 	.word	0x08003dd5
 8003d84:	08003d51 	.word	0x08003d51
 8003d88:	08003d51 	.word	0x08003d51
 8003d8c:	08003d51 	.word	0x08003d51
 8003d90:	08003d51 	.word	0x08003d51
 8003d94:	08003ee1 	.word	0x08003ee1
 8003d98:	08003e05 	.word	0x08003e05
 8003d9c:	08003ec3 	.word	0x08003ec3
 8003da0:	08003d51 	.word	0x08003d51
 8003da4:	08003d51 	.word	0x08003d51
 8003da8:	08003f03 	.word	0x08003f03
 8003dac:	08003d51 	.word	0x08003d51
 8003db0:	08003e05 	.word	0x08003e05
 8003db4:	08003d51 	.word	0x08003d51
 8003db8:	08003d51 	.word	0x08003d51
 8003dbc:	08003ecb 	.word	0x08003ecb
 8003dc0:	682b      	ldr	r3, [r5, #0]
 8003dc2:	1d1a      	adds	r2, r3, #4
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	602a      	str	r2, [r5, #0]
 8003dc8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003dcc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003dd0:	2301      	movs	r3, #1
 8003dd2:	e0a3      	b.n	8003f1c <_printf_i+0x1f4>
 8003dd4:	6820      	ldr	r0, [r4, #0]
 8003dd6:	6829      	ldr	r1, [r5, #0]
 8003dd8:	0606      	lsls	r6, r0, #24
 8003dda:	f101 0304 	add.w	r3, r1, #4
 8003dde:	d50a      	bpl.n	8003df6 <_printf_i+0xce>
 8003de0:	680e      	ldr	r6, [r1, #0]
 8003de2:	602b      	str	r3, [r5, #0]
 8003de4:	2e00      	cmp	r6, #0
 8003de6:	da03      	bge.n	8003df0 <_printf_i+0xc8>
 8003de8:	232d      	movs	r3, #45	; 0x2d
 8003dea:	4276      	negs	r6, r6
 8003dec:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003df0:	485e      	ldr	r0, [pc, #376]	; (8003f6c <_printf_i+0x244>)
 8003df2:	230a      	movs	r3, #10
 8003df4:	e019      	b.n	8003e2a <_printf_i+0x102>
 8003df6:	680e      	ldr	r6, [r1, #0]
 8003df8:	602b      	str	r3, [r5, #0]
 8003dfa:	f010 0f40 	tst.w	r0, #64	; 0x40
 8003dfe:	bf18      	it	ne
 8003e00:	b236      	sxthne	r6, r6
 8003e02:	e7ef      	b.n	8003de4 <_printf_i+0xbc>
 8003e04:	682b      	ldr	r3, [r5, #0]
 8003e06:	6820      	ldr	r0, [r4, #0]
 8003e08:	1d19      	adds	r1, r3, #4
 8003e0a:	6029      	str	r1, [r5, #0]
 8003e0c:	0601      	lsls	r1, r0, #24
 8003e0e:	d501      	bpl.n	8003e14 <_printf_i+0xec>
 8003e10:	681e      	ldr	r6, [r3, #0]
 8003e12:	e002      	b.n	8003e1a <_printf_i+0xf2>
 8003e14:	0646      	lsls	r6, r0, #25
 8003e16:	d5fb      	bpl.n	8003e10 <_printf_i+0xe8>
 8003e18:	881e      	ldrh	r6, [r3, #0]
 8003e1a:	4854      	ldr	r0, [pc, #336]	; (8003f6c <_printf_i+0x244>)
 8003e1c:	2f6f      	cmp	r7, #111	; 0x6f
 8003e1e:	bf0c      	ite	eq
 8003e20:	2308      	moveq	r3, #8
 8003e22:	230a      	movne	r3, #10
 8003e24:	2100      	movs	r1, #0
 8003e26:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003e2a:	6865      	ldr	r5, [r4, #4]
 8003e2c:	60a5      	str	r5, [r4, #8]
 8003e2e:	2d00      	cmp	r5, #0
 8003e30:	bfa2      	ittt	ge
 8003e32:	6821      	ldrge	r1, [r4, #0]
 8003e34:	f021 0104 	bicge.w	r1, r1, #4
 8003e38:	6021      	strge	r1, [r4, #0]
 8003e3a:	b90e      	cbnz	r6, 8003e40 <_printf_i+0x118>
 8003e3c:	2d00      	cmp	r5, #0
 8003e3e:	d04d      	beq.n	8003edc <_printf_i+0x1b4>
 8003e40:	4615      	mov	r5, r2
 8003e42:	fbb6 f1f3 	udiv	r1, r6, r3
 8003e46:	fb03 6711 	mls	r7, r3, r1, r6
 8003e4a:	5dc7      	ldrb	r7, [r0, r7]
 8003e4c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8003e50:	4637      	mov	r7, r6
 8003e52:	42bb      	cmp	r3, r7
 8003e54:	460e      	mov	r6, r1
 8003e56:	d9f4      	bls.n	8003e42 <_printf_i+0x11a>
 8003e58:	2b08      	cmp	r3, #8
 8003e5a:	d10b      	bne.n	8003e74 <_printf_i+0x14c>
 8003e5c:	6823      	ldr	r3, [r4, #0]
 8003e5e:	07de      	lsls	r6, r3, #31
 8003e60:	d508      	bpl.n	8003e74 <_printf_i+0x14c>
 8003e62:	6923      	ldr	r3, [r4, #16]
 8003e64:	6861      	ldr	r1, [r4, #4]
 8003e66:	4299      	cmp	r1, r3
 8003e68:	bfde      	ittt	le
 8003e6a:	2330      	movle	r3, #48	; 0x30
 8003e6c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8003e70:	f105 35ff 	addle.w	r5, r5, #4294967295
 8003e74:	1b52      	subs	r2, r2, r5
 8003e76:	6122      	str	r2, [r4, #16]
 8003e78:	f8cd a000 	str.w	sl, [sp]
 8003e7c:	464b      	mov	r3, r9
 8003e7e:	aa03      	add	r2, sp, #12
 8003e80:	4621      	mov	r1, r4
 8003e82:	4640      	mov	r0, r8
 8003e84:	f7ff fee2 	bl	8003c4c <_printf_common>
 8003e88:	3001      	adds	r0, #1
 8003e8a:	d14c      	bne.n	8003f26 <_printf_i+0x1fe>
 8003e8c:	f04f 30ff 	mov.w	r0, #4294967295
 8003e90:	b004      	add	sp, #16
 8003e92:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003e96:	4835      	ldr	r0, [pc, #212]	; (8003f6c <_printf_i+0x244>)
 8003e98:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8003e9c:	6829      	ldr	r1, [r5, #0]
 8003e9e:	6823      	ldr	r3, [r4, #0]
 8003ea0:	f851 6b04 	ldr.w	r6, [r1], #4
 8003ea4:	6029      	str	r1, [r5, #0]
 8003ea6:	061d      	lsls	r5, r3, #24
 8003ea8:	d514      	bpl.n	8003ed4 <_printf_i+0x1ac>
 8003eaa:	07df      	lsls	r7, r3, #31
 8003eac:	bf44      	itt	mi
 8003eae:	f043 0320 	orrmi.w	r3, r3, #32
 8003eb2:	6023      	strmi	r3, [r4, #0]
 8003eb4:	b91e      	cbnz	r6, 8003ebe <_printf_i+0x196>
 8003eb6:	6823      	ldr	r3, [r4, #0]
 8003eb8:	f023 0320 	bic.w	r3, r3, #32
 8003ebc:	6023      	str	r3, [r4, #0]
 8003ebe:	2310      	movs	r3, #16
 8003ec0:	e7b0      	b.n	8003e24 <_printf_i+0xfc>
 8003ec2:	6823      	ldr	r3, [r4, #0]
 8003ec4:	f043 0320 	orr.w	r3, r3, #32
 8003ec8:	6023      	str	r3, [r4, #0]
 8003eca:	2378      	movs	r3, #120	; 0x78
 8003ecc:	4828      	ldr	r0, [pc, #160]	; (8003f70 <_printf_i+0x248>)
 8003ece:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8003ed2:	e7e3      	b.n	8003e9c <_printf_i+0x174>
 8003ed4:	0659      	lsls	r1, r3, #25
 8003ed6:	bf48      	it	mi
 8003ed8:	b2b6      	uxthmi	r6, r6
 8003eda:	e7e6      	b.n	8003eaa <_printf_i+0x182>
 8003edc:	4615      	mov	r5, r2
 8003ede:	e7bb      	b.n	8003e58 <_printf_i+0x130>
 8003ee0:	682b      	ldr	r3, [r5, #0]
 8003ee2:	6826      	ldr	r6, [r4, #0]
 8003ee4:	6961      	ldr	r1, [r4, #20]
 8003ee6:	1d18      	adds	r0, r3, #4
 8003ee8:	6028      	str	r0, [r5, #0]
 8003eea:	0635      	lsls	r5, r6, #24
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	d501      	bpl.n	8003ef4 <_printf_i+0x1cc>
 8003ef0:	6019      	str	r1, [r3, #0]
 8003ef2:	e002      	b.n	8003efa <_printf_i+0x1d2>
 8003ef4:	0670      	lsls	r0, r6, #25
 8003ef6:	d5fb      	bpl.n	8003ef0 <_printf_i+0x1c8>
 8003ef8:	8019      	strh	r1, [r3, #0]
 8003efa:	2300      	movs	r3, #0
 8003efc:	6123      	str	r3, [r4, #16]
 8003efe:	4615      	mov	r5, r2
 8003f00:	e7ba      	b.n	8003e78 <_printf_i+0x150>
 8003f02:	682b      	ldr	r3, [r5, #0]
 8003f04:	1d1a      	adds	r2, r3, #4
 8003f06:	602a      	str	r2, [r5, #0]
 8003f08:	681d      	ldr	r5, [r3, #0]
 8003f0a:	6862      	ldr	r2, [r4, #4]
 8003f0c:	2100      	movs	r1, #0
 8003f0e:	4628      	mov	r0, r5
 8003f10:	f7fc f966 	bl	80001e0 <memchr>
 8003f14:	b108      	cbz	r0, 8003f1a <_printf_i+0x1f2>
 8003f16:	1b40      	subs	r0, r0, r5
 8003f18:	6060      	str	r0, [r4, #4]
 8003f1a:	6863      	ldr	r3, [r4, #4]
 8003f1c:	6123      	str	r3, [r4, #16]
 8003f1e:	2300      	movs	r3, #0
 8003f20:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003f24:	e7a8      	b.n	8003e78 <_printf_i+0x150>
 8003f26:	6923      	ldr	r3, [r4, #16]
 8003f28:	462a      	mov	r2, r5
 8003f2a:	4649      	mov	r1, r9
 8003f2c:	4640      	mov	r0, r8
 8003f2e:	47d0      	blx	sl
 8003f30:	3001      	adds	r0, #1
 8003f32:	d0ab      	beq.n	8003e8c <_printf_i+0x164>
 8003f34:	6823      	ldr	r3, [r4, #0]
 8003f36:	079b      	lsls	r3, r3, #30
 8003f38:	d413      	bmi.n	8003f62 <_printf_i+0x23a>
 8003f3a:	68e0      	ldr	r0, [r4, #12]
 8003f3c:	9b03      	ldr	r3, [sp, #12]
 8003f3e:	4298      	cmp	r0, r3
 8003f40:	bfb8      	it	lt
 8003f42:	4618      	movlt	r0, r3
 8003f44:	e7a4      	b.n	8003e90 <_printf_i+0x168>
 8003f46:	2301      	movs	r3, #1
 8003f48:	4632      	mov	r2, r6
 8003f4a:	4649      	mov	r1, r9
 8003f4c:	4640      	mov	r0, r8
 8003f4e:	47d0      	blx	sl
 8003f50:	3001      	adds	r0, #1
 8003f52:	d09b      	beq.n	8003e8c <_printf_i+0x164>
 8003f54:	3501      	adds	r5, #1
 8003f56:	68e3      	ldr	r3, [r4, #12]
 8003f58:	9903      	ldr	r1, [sp, #12]
 8003f5a:	1a5b      	subs	r3, r3, r1
 8003f5c:	42ab      	cmp	r3, r5
 8003f5e:	dcf2      	bgt.n	8003f46 <_printf_i+0x21e>
 8003f60:	e7eb      	b.n	8003f3a <_printf_i+0x212>
 8003f62:	2500      	movs	r5, #0
 8003f64:	f104 0619 	add.w	r6, r4, #25
 8003f68:	e7f5      	b.n	8003f56 <_printf_i+0x22e>
 8003f6a:	bf00      	nop
 8003f6c:	08004281 	.word	0x08004281
 8003f70:	08004292 	.word	0x08004292

08003f74 <memcpy>:
 8003f74:	440a      	add	r2, r1
 8003f76:	4291      	cmp	r1, r2
 8003f78:	f100 33ff 	add.w	r3, r0, #4294967295
 8003f7c:	d100      	bne.n	8003f80 <memcpy+0xc>
 8003f7e:	4770      	bx	lr
 8003f80:	b510      	push	{r4, lr}
 8003f82:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003f86:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003f8a:	4291      	cmp	r1, r2
 8003f8c:	d1f9      	bne.n	8003f82 <memcpy+0xe>
 8003f8e:	bd10      	pop	{r4, pc}

08003f90 <memmove>:
 8003f90:	4288      	cmp	r0, r1
 8003f92:	b510      	push	{r4, lr}
 8003f94:	eb01 0402 	add.w	r4, r1, r2
 8003f98:	d902      	bls.n	8003fa0 <memmove+0x10>
 8003f9a:	4284      	cmp	r4, r0
 8003f9c:	4623      	mov	r3, r4
 8003f9e:	d807      	bhi.n	8003fb0 <memmove+0x20>
 8003fa0:	1e43      	subs	r3, r0, #1
 8003fa2:	42a1      	cmp	r1, r4
 8003fa4:	d008      	beq.n	8003fb8 <memmove+0x28>
 8003fa6:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003faa:	f803 2f01 	strb.w	r2, [r3, #1]!
 8003fae:	e7f8      	b.n	8003fa2 <memmove+0x12>
 8003fb0:	4402      	add	r2, r0
 8003fb2:	4601      	mov	r1, r0
 8003fb4:	428a      	cmp	r2, r1
 8003fb6:	d100      	bne.n	8003fba <memmove+0x2a>
 8003fb8:	bd10      	pop	{r4, pc}
 8003fba:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8003fbe:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8003fc2:	e7f7      	b.n	8003fb4 <memmove+0x24>

08003fc4 <_free_r>:
 8003fc4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8003fc6:	2900      	cmp	r1, #0
 8003fc8:	d044      	beq.n	8004054 <_free_r+0x90>
 8003fca:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003fce:	9001      	str	r0, [sp, #4]
 8003fd0:	2b00      	cmp	r3, #0
 8003fd2:	f1a1 0404 	sub.w	r4, r1, #4
 8003fd6:	bfb8      	it	lt
 8003fd8:	18e4      	addlt	r4, r4, r3
 8003fda:	f000 f913 	bl	8004204 <__malloc_lock>
 8003fde:	4a1e      	ldr	r2, [pc, #120]	; (8004058 <_free_r+0x94>)
 8003fe0:	9801      	ldr	r0, [sp, #4]
 8003fe2:	6813      	ldr	r3, [r2, #0]
 8003fe4:	b933      	cbnz	r3, 8003ff4 <_free_r+0x30>
 8003fe6:	6063      	str	r3, [r4, #4]
 8003fe8:	6014      	str	r4, [r2, #0]
 8003fea:	b003      	add	sp, #12
 8003fec:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8003ff0:	f000 b90e 	b.w	8004210 <__malloc_unlock>
 8003ff4:	42a3      	cmp	r3, r4
 8003ff6:	d908      	bls.n	800400a <_free_r+0x46>
 8003ff8:	6825      	ldr	r5, [r4, #0]
 8003ffa:	1961      	adds	r1, r4, r5
 8003ffc:	428b      	cmp	r3, r1
 8003ffe:	bf01      	itttt	eq
 8004000:	6819      	ldreq	r1, [r3, #0]
 8004002:	685b      	ldreq	r3, [r3, #4]
 8004004:	1949      	addeq	r1, r1, r5
 8004006:	6021      	streq	r1, [r4, #0]
 8004008:	e7ed      	b.n	8003fe6 <_free_r+0x22>
 800400a:	461a      	mov	r2, r3
 800400c:	685b      	ldr	r3, [r3, #4]
 800400e:	b10b      	cbz	r3, 8004014 <_free_r+0x50>
 8004010:	42a3      	cmp	r3, r4
 8004012:	d9fa      	bls.n	800400a <_free_r+0x46>
 8004014:	6811      	ldr	r1, [r2, #0]
 8004016:	1855      	adds	r5, r2, r1
 8004018:	42a5      	cmp	r5, r4
 800401a:	d10b      	bne.n	8004034 <_free_r+0x70>
 800401c:	6824      	ldr	r4, [r4, #0]
 800401e:	4421      	add	r1, r4
 8004020:	1854      	adds	r4, r2, r1
 8004022:	42a3      	cmp	r3, r4
 8004024:	6011      	str	r1, [r2, #0]
 8004026:	d1e0      	bne.n	8003fea <_free_r+0x26>
 8004028:	681c      	ldr	r4, [r3, #0]
 800402a:	685b      	ldr	r3, [r3, #4]
 800402c:	6053      	str	r3, [r2, #4]
 800402e:	4421      	add	r1, r4
 8004030:	6011      	str	r1, [r2, #0]
 8004032:	e7da      	b.n	8003fea <_free_r+0x26>
 8004034:	d902      	bls.n	800403c <_free_r+0x78>
 8004036:	230c      	movs	r3, #12
 8004038:	6003      	str	r3, [r0, #0]
 800403a:	e7d6      	b.n	8003fea <_free_r+0x26>
 800403c:	6825      	ldr	r5, [r4, #0]
 800403e:	1961      	adds	r1, r4, r5
 8004040:	428b      	cmp	r3, r1
 8004042:	bf04      	itt	eq
 8004044:	6819      	ldreq	r1, [r3, #0]
 8004046:	685b      	ldreq	r3, [r3, #4]
 8004048:	6063      	str	r3, [r4, #4]
 800404a:	bf04      	itt	eq
 800404c:	1949      	addeq	r1, r1, r5
 800404e:	6021      	streq	r1, [r4, #0]
 8004050:	6054      	str	r4, [r2, #4]
 8004052:	e7ca      	b.n	8003fea <_free_r+0x26>
 8004054:	b003      	add	sp, #12
 8004056:	bd30      	pop	{r4, r5, pc}
 8004058:	20000184 	.word	0x20000184

0800405c <sbrk_aligned>:
 800405c:	b570      	push	{r4, r5, r6, lr}
 800405e:	4e0e      	ldr	r6, [pc, #56]	; (8004098 <sbrk_aligned+0x3c>)
 8004060:	460c      	mov	r4, r1
 8004062:	6831      	ldr	r1, [r6, #0]
 8004064:	4605      	mov	r5, r0
 8004066:	b911      	cbnz	r1, 800406e <sbrk_aligned+0x12>
 8004068:	f000 f8bc 	bl	80041e4 <_sbrk_r>
 800406c:	6030      	str	r0, [r6, #0]
 800406e:	4621      	mov	r1, r4
 8004070:	4628      	mov	r0, r5
 8004072:	f000 f8b7 	bl	80041e4 <_sbrk_r>
 8004076:	1c43      	adds	r3, r0, #1
 8004078:	d00a      	beq.n	8004090 <sbrk_aligned+0x34>
 800407a:	1cc4      	adds	r4, r0, #3
 800407c:	f024 0403 	bic.w	r4, r4, #3
 8004080:	42a0      	cmp	r0, r4
 8004082:	d007      	beq.n	8004094 <sbrk_aligned+0x38>
 8004084:	1a21      	subs	r1, r4, r0
 8004086:	4628      	mov	r0, r5
 8004088:	f000 f8ac 	bl	80041e4 <_sbrk_r>
 800408c:	3001      	adds	r0, #1
 800408e:	d101      	bne.n	8004094 <sbrk_aligned+0x38>
 8004090:	f04f 34ff 	mov.w	r4, #4294967295
 8004094:	4620      	mov	r0, r4
 8004096:	bd70      	pop	{r4, r5, r6, pc}
 8004098:	20000188 	.word	0x20000188

0800409c <_malloc_r>:
 800409c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80040a0:	1ccd      	adds	r5, r1, #3
 80040a2:	f025 0503 	bic.w	r5, r5, #3
 80040a6:	3508      	adds	r5, #8
 80040a8:	2d0c      	cmp	r5, #12
 80040aa:	bf38      	it	cc
 80040ac:	250c      	movcc	r5, #12
 80040ae:	2d00      	cmp	r5, #0
 80040b0:	4607      	mov	r7, r0
 80040b2:	db01      	blt.n	80040b8 <_malloc_r+0x1c>
 80040b4:	42a9      	cmp	r1, r5
 80040b6:	d905      	bls.n	80040c4 <_malloc_r+0x28>
 80040b8:	230c      	movs	r3, #12
 80040ba:	603b      	str	r3, [r7, #0]
 80040bc:	2600      	movs	r6, #0
 80040be:	4630      	mov	r0, r6
 80040c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80040c4:	4e2e      	ldr	r6, [pc, #184]	; (8004180 <_malloc_r+0xe4>)
 80040c6:	f000 f89d 	bl	8004204 <__malloc_lock>
 80040ca:	6833      	ldr	r3, [r6, #0]
 80040cc:	461c      	mov	r4, r3
 80040ce:	bb34      	cbnz	r4, 800411e <_malloc_r+0x82>
 80040d0:	4629      	mov	r1, r5
 80040d2:	4638      	mov	r0, r7
 80040d4:	f7ff ffc2 	bl	800405c <sbrk_aligned>
 80040d8:	1c43      	adds	r3, r0, #1
 80040da:	4604      	mov	r4, r0
 80040dc:	d14d      	bne.n	800417a <_malloc_r+0xde>
 80040de:	6834      	ldr	r4, [r6, #0]
 80040e0:	4626      	mov	r6, r4
 80040e2:	2e00      	cmp	r6, #0
 80040e4:	d140      	bne.n	8004168 <_malloc_r+0xcc>
 80040e6:	6823      	ldr	r3, [r4, #0]
 80040e8:	4631      	mov	r1, r6
 80040ea:	4638      	mov	r0, r7
 80040ec:	eb04 0803 	add.w	r8, r4, r3
 80040f0:	f000 f878 	bl	80041e4 <_sbrk_r>
 80040f4:	4580      	cmp	r8, r0
 80040f6:	d13a      	bne.n	800416e <_malloc_r+0xd2>
 80040f8:	6821      	ldr	r1, [r4, #0]
 80040fa:	3503      	adds	r5, #3
 80040fc:	1a6d      	subs	r5, r5, r1
 80040fe:	f025 0503 	bic.w	r5, r5, #3
 8004102:	3508      	adds	r5, #8
 8004104:	2d0c      	cmp	r5, #12
 8004106:	bf38      	it	cc
 8004108:	250c      	movcc	r5, #12
 800410a:	4629      	mov	r1, r5
 800410c:	4638      	mov	r0, r7
 800410e:	f7ff ffa5 	bl	800405c <sbrk_aligned>
 8004112:	3001      	adds	r0, #1
 8004114:	d02b      	beq.n	800416e <_malloc_r+0xd2>
 8004116:	6823      	ldr	r3, [r4, #0]
 8004118:	442b      	add	r3, r5
 800411a:	6023      	str	r3, [r4, #0]
 800411c:	e00e      	b.n	800413c <_malloc_r+0xa0>
 800411e:	6822      	ldr	r2, [r4, #0]
 8004120:	1b52      	subs	r2, r2, r5
 8004122:	d41e      	bmi.n	8004162 <_malloc_r+0xc6>
 8004124:	2a0b      	cmp	r2, #11
 8004126:	d916      	bls.n	8004156 <_malloc_r+0xba>
 8004128:	1961      	adds	r1, r4, r5
 800412a:	42a3      	cmp	r3, r4
 800412c:	6025      	str	r5, [r4, #0]
 800412e:	bf18      	it	ne
 8004130:	6059      	strne	r1, [r3, #4]
 8004132:	6863      	ldr	r3, [r4, #4]
 8004134:	bf08      	it	eq
 8004136:	6031      	streq	r1, [r6, #0]
 8004138:	5162      	str	r2, [r4, r5]
 800413a:	604b      	str	r3, [r1, #4]
 800413c:	4638      	mov	r0, r7
 800413e:	f104 060b 	add.w	r6, r4, #11
 8004142:	f000 f865 	bl	8004210 <__malloc_unlock>
 8004146:	f026 0607 	bic.w	r6, r6, #7
 800414a:	1d23      	adds	r3, r4, #4
 800414c:	1af2      	subs	r2, r6, r3
 800414e:	d0b6      	beq.n	80040be <_malloc_r+0x22>
 8004150:	1b9b      	subs	r3, r3, r6
 8004152:	50a3      	str	r3, [r4, r2]
 8004154:	e7b3      	b.n	80040be <_malloc_r+0x22>
 8004156:	6862      	ldr	r2, [r4, #4]
 8004158:	42a3      	cmp	r3, r4
 800415a:	bf0c      	ite	eq
 800415c:	6032      	streq	r2, [r6, #0]
 800415e:	605a      	strne	r2, [r3, #4]
 8004160:	e7ec      	b.n	800413c <_malloc_r+0xa0>
 8004162:	4623      	mov	r3, r4
 8004164:	6864      	ldr	r4, [r4, #4]
 8004166:	e7b2      	b.n	80040ce <_malloc_r+0x32>
 8004168:	4634      	mov	r4, r6
 800416a:	6876      	ldr	r6, [r6, #4]
 800416c:	e7b9      	b.n	80040e2 <_malloc_r+0x46>
 800416e:	230c      	movs	r3, #12
 8004170:	603b      	str	r3, [r7, #0]
 8004172:	4638      	mov	r0, r7
 8004174:	f000 f84c 	bl	8004210 <__malloc_unlock>
 8004178:	e7a1      	b.n	80040be <_malloc_r+0x22>
 800417a:	6025      	str	r5, [r4, #0]
 800417c:	e7de      	b.n	800413c <_malloc_r+0xa0>
 800417e:	bf00      	nop
 8004180:	20000184 	.word	0x20000184

08004184 <_realloc_r>:
 8004184:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004188:	4680      	mov	r8, r0
 800418a:	4614      	mov	r4, r2
 800418c:	460e      	mov	r6, r1
 800418e:	b921      	cbnz	r1, 800419a <_realloc_r+0x16>
 8004190:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004194:	4611      	mov	r1, r2
 8004196:	f7ff bf81 	b.w	800409c <_malloc_r>
 800419a:	b92a      	cbnz	r2, 80041a8 <_realloc_r+0x24>
 800419c:	f7ff ff12 	bl	8003fc4 <_free_r>
 80041a0:	4625      	mov	r5, r4
 80041a2:	4628      	mov	r0, r5
 80041a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80041a8:	f000 f838 	bl	800421c <_malloc_usable_size_r>
 80041ac:	4284      	cmp	r4, r0
 80041ae:	4607      	mov	r7, r0
 80041b0:	d802      	bhi.n	80041b8 <_realloc_r+0x34>
 80041b2:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80041b6:	d812      	bhi.n	80041de <_realloc_r+0x5a>
 80041b8:	4621      	mov	r1, r4
 80041ba:	4640      	mov	r0, r8
 80041bc:	f7ff ff6e 	bl	800409c <_malloc_r>
 80041c0:	4605      	mov	r5, r0
 80041c2:	2800      	cmp	r0, #0
 80041c4:	d0ed      	beq.n	80041a2 <_realloc_r+0x1e>
 80041c6:	42bc      	cmp	r4, r7
 80041c8:	4622      	mov	r2, r4
 80041ca:	4631      	mov	r1, r6
 80041cc:	bf28      	it	cs
 80041ce:	463a      	movcs	r2, r7
 80041d0:	f7ff fed0 	bl	8003f74 <memcpy>
 80041d4:	4631      	mov	r1, r6
 80041d6:	4640      	mov	r0, r8
 80041d8:	f7ff fef4 	bl	8003fc4 <_free_r>
 80041dc:	e7e1      	b.n	80041a2 <_realloc_r+0x1e>
 80041de:	4635      	mov	r5, r6
 80041e0:	e7df      	b.n	80041a2 <_realloc_r+0x1e>
	...

080041e4 <_sbrk_r>:
 80041e4:	b538      	push	{r3, r4, r5, lr}
 80041e6:	4d06      	ldr	r5, [pc, #24]	; (8004200 <_sbrk_r+0x1c>)
 80041e8:	2300      	movs	r3, #0
 80041ea:	4604      	mov	r4, r0
 80041ec:	4608      	mov	r0, r1
 80041ee:	602b      	str	r3, [r5, #0]
 80041f0:	f7fc fe02 	bl	8000df8 <_sbrk>
 80041f4:	1c43      	adds	r3, r0, #1
 80041f6:	d102      	bne.n	80041fe <_sbrk_r+0x1a>
 80041f8:	682b      	ldr	r3, [r5, #0]
 80041fa:	b103      	cbz	r3, 80041fe <_sbrk_r+0x1a>
 80041fc:	6023      	str	r3, [r4, #0]
 80041fe:	bd38      	pop	{r3, r4, r5, pc}
 8004200:	2000018c 	.word	0x2000018c

08004204 <__malloc_lock>:
 8004204:	4801      	ldr	r0, [pc, #4]	; (800420c <__malloc_lock+0x8>)
 8004206:	f000 b811 	b.w	800422c <__retarget_lock_acquire_recursive>
 800420a:	bf00      	nop
 800420c:	20000190 	.word	0x20000190

08004210 <__malloc_unlock>:
 8004210:	4801      	ldr	r0, [pc, #4]	; (8004218 <__malloc_unlock+0x8>)
 8004212:	f000 b80c 	b.w	800422e <__retarget_lock_release_recursive>
 8004216:	bf00      	nop
 8004218:	20000190 	.word	0x20000190

0800421c <_malloc_usable_size_r>:
 800421c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004220:	1f18      	subs	r0, r3, #4
 8004222:	2b00      	cmp	r3, #0
 8004224:	bfbc      	itt	lt
 8004226:	580b      	ldrlt	r3, [r1, r0]
 8004228:	18c0      	addlt	r0, r0, r3
 800422a:	4770      	bx	lr

0800422c <__retarget_lock_acquire_recursive>:
 800422c:	4770      	bx	lr

0800422e <__retarget_lock_release_recursive>:
 800422e:	4770      	bx	lr

08004230 <_init>:
 8004230:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004232:	bf00      	nop
 8004234:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004236:	bc08      	pop	{r3}
 8004238:	469e      	mov	lr, r3
 800423a:	4770      	bx	lr

0800423c <_fini>:
 800423c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800423e:	bf00      	nop
 8004240:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004242:	bc08      	pop	{r3}
 8004244:	469e      	mov	lr, r3
 8004246:	4770      	bx	lr
